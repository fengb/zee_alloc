zigAnalysis={"typeKinds": ["Type","Void","Bool","NoReturn","Int","Float","Pointer","Array","Struct","ComptimeFloat","ComptimeInt","Undefined","Null","Optional","ErrorUnion","ErrorSet","Enum","Union","Fn","BoundFn","Opaque","Frame","AnyFrame","Vector","EnumLiteral"],"params": {"zigId": "NYx2YuytuVj96GkUTKJVuunvTBFyX8ibOEiW7JYLrwERG4FaZL8w_OXm9JFDSj1j","zigVersion": "0.6.0+dc4fea983","builds": [{"target": "wasm32-freestanding-musl"}],"rootName": "wasm_exports"},"rootPkg": 0,"calls": [{"fn": 40,"result": {"type": 33,"value": 34},"args": [{"type": 33,"value": 35}]},{"fn": 41,"result": {"type": 37,"value": null},"args": [{"type": 33,"value": 38}]},{"fn": 1,"result": {"type": 39,"value": "undefined"},"args": [{"type": 40,"value": null}]},{"fn": 42,"result": {"type": 37,"value": null},"args": [{"type": 37,"value": null},{"type": 37,"value": null}]},{"fn": 43,"result": {"type": 33,"value": 43},"args": [{"type": 40,"value": null},{"type": 44,"value": 5}]},{"fn": 43,"result": {"type": 33,"value": 35},"args": [{"type": 40,"value": null},{"type": 44,"value": 160}]},{"fn": 43,"result": {"type": 33,"value": 34},"args": [{"type": 40,"value": null},{"type": 44,"value": 8}]},{"fn": 44,"result": {"type": 40,"value": null},"args": [{"type": 46,"value": null}]},{"fn": 45,"result": {"type": 33,"value": 48},"args": [{"type": 49,"value": null}]},{"fn": 46,"result": {"type": 39,"value": "undefined"},"args": [{"type": 51,"value": null}]},{"fn": 40,"result": {"type": 33,"value": 43},"args": [{"type": 33,"value": 38}]},{"fn": 47,"result": {"type": 33,"value": 38},"args": [{"type": 33,"value": 38},{"type": 33,"value": 38}]},{"fn": 47,"result": {"type": 33,"value": 43},"args": [{"type": 33,"value": 43},{"type": 33,"value": 43}]},{"fn": 48,"result": {"type": 40,"value": null},"args": [{"type": 38,"value": 65536}]},{"fn": 49,"result": {"type": 40,"value": null},"args": [{"type": 46,"value": null}]},{"fn": 50,"result": {"type": 43,"value": 4},"args": [{"type": 33,"value": 38},{"type": 38,"value": 16}]},{"fn": 50,"result": {"type": 43,"value": 16},"args": [{"type": 33,"value": 38},{"type": 38,"value": 65536}]}],"packages": [{"name": "","file": 0,"main": 56,"table": {"builtin": 1,"std": 2,"root": 0}},{"name": "builtin","file": 1,"main": 57,"table": {"std": 2}},{"name": "std","file": 2,"main": 58,"table": {"builtin": 1,"std": 2,"root": 0}}],"types": [{"kind": 18,"name": "fn([]const u8, ?*std.builtin.StackTrace) noreturn","generic": false,"ret": 59,"args": [60,61]},{"kind": 18,"name": "fn(bool) void","generic": false,"ret": 39,"args": [40]},{"kind": 18,"name": "fn(*std.mem.Allocator) main.ZeeAlloc((struct main.Config constant))","generic": false,"ret": 48,"args": [62]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) std.mem.Error![]u8","generic": false,"ret": 63,"args": [62,64,65,38,65]},{"kind": 18,"name": "fn() main.FreeList","generic": false,"ret": 66},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) []u8","generic": false,"ret": 64,"args": [62,64,65,38,65]},{"kind": 18,"name": "fn(usize) callconv(.C) ?*c_void","generic": false,"ret": 67,"args": [38]},{"kind": 18,"name": "fn(usize, usize) callconv(.C) ?*c_void","generic": false,"ret": 67,"args": [38,38]},{"kind": 18,"name": "fn(?*c_void, usize) callconv(.C) ?*c_void","generic": false,"ret": 67,"args": [67,38]},{"kind": 18,"name": "fn(?*c_void) callconv(.C) void","generic": false,"ret": 39,"args": [67]},{"kind": 18,"name": "fn([*]u8) @TypeOf(main.Frame.restorePayload).ReturnType.ErrorSet!*main.Frame","generic": false,"ret": 68,"args": [69]},{"kind": 18,"name": "fn(*main.Frame) usize","generic": false,"ret": 38,"args": [70]},{"kind": 18,"name": "fn(*main.Frame, usize, usize) []u8","generic": false,"ret": 64,"args": [70,38,38]},{"kind": 18,"name": "fn(*main.ZeeAlloc((struct main.Config constant)), usize) ?*main.Frame","generic": false,"ret": 71,"args": [72,38]},{"kind": 18,"name": "fn(*main.ZeeAlloc((struct main.Config constant)), usize) @TypeOf(main.ZeeAlloc((struct main.Config constant)).allocNode).ReturnType.ErrorSet!*main.Frame","generic": false,"ret": 73,"args": [72,38]},{"kind": 18,"name": "fn(usize) usize","generic": false,"ret": 38,"args": [38]},{"kind": 18,"name": "fn([]u8) *main.Frame","generic": false,"ret": 70,"args": [64]},{"kind": 18,"name": "fn(*main.Frame) void","generic": false,"ret": 39,"args": [70]},{"kind": 18,"name": "fn(*main.ZeeAlloc((struct main.Config constant)), *main.Frame, usize) []u8","generic": false,"ret": 64,"args": [72,70,38]},{"kind": 18,"name": "fn([]u8, []const u8) void","generic": false,"ret": 39,"args": [64,60]},{"kind": 18,"name": "fn(*main.ZeeAlloc((struct main.Config constant)), *main.Frame) void","generic": false,"ret": 39,"args": [72,70]},{"kind": 18,"name": "fn(*main.Frame) bool","generic": false,"ret": 40,"args": [70]},{"kind": 18,"name": "fn(*main.Frame) @TypeOf(main.Frame.validate).ReturnType.ErrorSet!void","generic": false,"ret": 74,"args": [70]},{"kind": 18,"name": "fn(usize) bool","generic": false,"ret": 40,"args": [38]},{"kind": 18,"name": "fn(*main.ZeeAlloc((struct main.Config constant)), usize) usize","generic": false,"ret": 38,"args": [72,38]},{"kind": 18,"name": "fn(*main.FreeList) *main.Frame","generic": false,"ret": 70,"args": [75]},{"kind": 18,"name": "fn(*main.FreeList, *main.Frame) *main.Frame","generic": false,"ret": 70,"args": [75,70]},{"kind": 18,"name": "fn(*main.ZeeAlloc((struct main.Config constant)), usize) *main.FreeList","generic": false,"ret": 75,"args": [72,38]},{"kind": 18,"name": "fn(*main.FreeList, *main.Frame) void","generic": false,"ret": 39,"args": [75,70]},{"kind": 18,"name": "fn(usize, usize) usize","generic": false,"ret": 38,"args": [38,38]},{"kind": 18,"name": "fn(usize) u5","generic": false,"ret": 43,"args": [38]},{"kind": 18,"name": "fn(u5, u5) u5","generic": false,"ret": 43,"args": [43,43]},{"kind": 18,"name": "fn(type) var","generic": true,"args": [33]},{"kind": 0},{"kind": 4,"u": 8},{"kind": 4,"u": 160},{"kind": 18,"name": "fn(type) var","generic": true,"args": [33]},{"kind": 10,"name": "comptime_int"},{"kind": 4,"u": 32},{"kind": 1,"name": "void"},{"kind": 2},{"kind": 18,"name": "fn(var,var) var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(bool,var) var","generic": true,"args": [40,null]},{"kind": 4,"u": 5},{"kind": 4,"u": 16},{"kind": 18,"name": "fn(main.Validation) var","generic": true,"args": [46]},{"kind": 16,"name": "main.Validation","src": 48,"pubDecls": [],"privDecls": [0,1,2,3],"fields": [0,1,2]},{"kind": 18,"name": "fn(main.Config) var","generic": true,"args": [49]},{"kind": 8,"name": "main.ZeeAlloc((struct main.Config constant))","src": 49,"pubDecls": [4,5],"privDecls": [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"fields": [62,82,83]},{"kind": 8,"name": "main.Config","src": 50,"pubDecls": [26,27,28,29],"privDecls": [],"fields": [38,46,84,86,85]},{"kind": 18,"name": "fn(main.ExportC) var","generic": true,"args": [51]},{"kind": 8,"name": "main.ExportC","src": 51,"pubDecls": [30],"privDecls": [],"fields": [62,40,40,40,40]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [33,null]},{"kind": 18,"name": "fn(var) var","generic": true,"args": [null]},{"kind": 18,"name": "fn(main.Validation) var","generic": true,"args": [46]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [33,null]},{"kind": 8,"name": "(root)","src": 52,"pubDecls": [31,32,33,34],"privDecls": [35,36,37],"file": 0},{"kind": 8,"name": "builtin","src": 53,"pubDecls": [38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"privDecls": [],"file": 1},{"kind": 8,"name": "std","src": 54,"pubDecls": [84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153],"privDecls": [],"file": 2},{"kind": 3,"name": "noreturn"},{"kind": 6,"len": 2,"const": true,"elem": 34},{"kind": 13,"child": 106},{"kind": 6,"elem": 83},{"kind": 14,"err": 107,"payload": 64},{"kind": 6,"len": 2,"elem": 34},{"kind": 4,"u": 29},{"kind": 8,"name": "main.FreeList","src": 55,"pubDecls": [154,155,156,157,158],"privDecls": [],"fields": [71]},{"kind": 13,"child": 108},{"kind": 14,"err": 109,"payload": 70},{"kind": 6,"len": 1,"elem": 34},{"kind": 6,"elem": 80},{"kind": 13,"child": 70},{"kind": 6,"elem": 48},{"kind": 14,"err": 110,"payload": 70},{"kind": 14,"err": 111,"payload": 39},{"kind": 6,"elem": 66},{"kind": 8,"name": "main","src": 56,"pubDecls": [34,32,33,31],"privDecls": [159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"file": 3},{"kind": 18,"name": "fn(main.Validation,var) var","generic": true,"args": [46,null]},{"kind": 18,"name": "fn(main.Validation,var) var","generic": true,"args": [46,null]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [33,null]},{"kind": 8,"name": "main.Frame","src": 57,"pubDecls": [175,176,177,178,179,180,181,182],"privDecls": [183,184,185],"fields": [71,38,114]},{"kind": 18,"name": "fn(type,var) var","generic": true,"args": [33,null]},{"kind": 7,"len": 14,"elem": 66},{"kind": 8,"name": "std.mem.Allocator","src": 58,"pubDecls": [186,187,188,189,190,191,192,193,194,195,196,197,198,199],"privDecls": [200],"fields": [3,5]},{"kind": 16,"name": "main.JumboMatchStrategy","src": 59,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "main.ShrinkStrategy","src": 60,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "main.BuddyStrategy","src": 61,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.builtin","src": 62,"pubDecls": [38,40,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,59,62,61,63,64,65,67,66,68,69,70,71,72,73,75,74,76,77,78,79,80,81,82,83],"privDecls": [201,202],"file": 4},{"kind": 16,"name": "std.builtin.OutputMode","src": 63,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "std.builtin.Mode","src": 64,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 8,"name": "std.target.Os","src": 65,"pubDecls": [203,204,205,206,207,208],"privDecls": [],"fields": [116,119]},{"kind": 8,"name": "std.builtin.StackTrace","src": 66,"pubDecls": [],"privDecls": [],"fields": [38,120]},{"kind": 16,"name": "std.builtin.CallingConvention","src": 67,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13]},{"kind": 8,"name": "std.builtin.CallOptions","src": 68,"pubDecls": [209],"privDecls": [],"fields": [121,122]},{"kind": 8,"name": "std.builtin.Version","src": 69,"pubDecls": [210,211,212,213],"privDecls": [],"fields": [124,124,124]},{"kind": 16,"name": "std.builtin.GlobalLinkage","src": 70,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 17,"name": "std.builtin.TypeInfo","src": 71,"pubDecls": [214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233],"privDecls": [],"fields": [39,39,39,39,144,137,128,126,125,39,39,39,39,134,127,133,135,132,142,142,39,39,140,136,39]},{"kind": 16,"name": "std.builtin.LinkMode","src": 72,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.builtin.ExportOptions","src": 73,"pubDecls": [],"privDecls": [],"fields": [60,95,145]},{"kind": 16,"name": "std.target.Arch","src": 74,"pubDecls": [234,235,236,237,238,239,240,241,242,243,244,245],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]},{"kind": 8,"name": "std.mem","src": 75,"pubDecls": [246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333],"privDecls": [334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351],"file": 5},{"kind": 8,"name": "std.math","src": 76,"pubDecls": [352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510],"privDecls": [511,512,513,514,515,516,517,518,519,520,521,522,523,524],"file": 6},{"kind": 8,"name": "std.debug","src": 77,"pubDecls": [525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557],"privDecls": [558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609],"file": 7},{"kind": 8,"name": "std.meta","src": 78,"pubDecls": [610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634],"privDecls": [635,636,637,638,639,640,641,642],"file": 8},{"kind": 8,"name": "std.start","src": 79,"pubDecls": [643],"privDecls": [644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661],"file": 9},{"kind": 8,"name": "std.target.Target","src": 80,"pubDecls": [662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710],"privDecls": [],"fields": [148,90,149]},{"kind": 6,"elem": 91},{"kind": 15,"name": "std.mem.Error","errors": [0]},{"kind": 6,"elem": 150},{"kind": 15,"name": "@TypeOf(main.Frame.restorePayload).ReturnType.ErrorSet","fn": 12,"errors": [1]},{"kind": 15,"name": "@TypeOf(main.ZeeAlloc((struct main.Config constant)).allocNode).ReturnType.ErrorSet","fn": 16,"errors": [0]},{"kind": 15,"name": "@TypeOf(main.Frame.validate).ReturnType.ErrorSet","fn": 25,"errors": [1]},{"kind": 18,"name": "fn(u32, u32) callconv(.C) i32","generic": false,"ret": 151,"args": [124,124]},{"kind": 18,"name": "fn(bool,var) var","generic": true,"args": [40,null]},{"kind": 7,"len": 8,"elem": 34},{"kind": 8,"name": "std.target","src": 81,"pubDecls": [711],"privDecls": [712,713,714,715],"file": 10},{"kind": 16,"name": "std.target.Tag","src": 82,"pubDecls": [716,717],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]},{"kind": 8,"name": "std.target.LinuxVersionRange","src": 83,"pubDecls": [718],"privDecls": [],"fields": [123,94]},{"kind": 16,"name": "std.target.WindowsVersion","src": 84,"pubDecls": [719],"privDecls": [],"fields": [67108864,83886080,83951616,84017152,100663296,100728832,100794368,100859904,167772160,167772161,167772162,167772163,167772164,167772165,167772166,167772167]},{"kind": 17,"name": "std.target.VersionRange","src": 85,"pubDecls": [720],"privDecls": [],"fields": [39,123,117,152]},{"kind": 6,"len": 2,"elem": 38},{"kind": 16,"name": "std.builtin.Modifier","src": 86,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7]},{"kind": 13,"child": 153},{"kind": 8,"name": "std.builtin.Range","src": 87,"pubDecls": [721],"privDecls": [],"fields": [94,94]},{"kind": 4,"u": 32},{"kind": 8,"name": "std.builtin.Struct","src": 88,"pubDecls": [],"privDecls": [],"fields": [130,154,155]},{"kind": 8,"name": "std.builtin.Array","src": 89,"pubDecls": [],"privDecls": [],"fields": [37,33,156]},{"kind": 8,"name": "std.builtin.ErrorUnion","src": 90,"pubDecls": [],"privDecls": [],"fields": [33,33]},{"kind": 8,"name": "std.builtin.Pointer","src": 91,"pubDecls": [722],"privDecls": [],"fields": [157,40,40,37,33,40,156]},{"kind": 8,"name": "std.builtin.EnumField","src": 92,"pubDecls": [],"privDecls": [],"fields": [60,37]},{"kind": 16,"name": "std.builtin.ContainerLayout","src": 93,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.builtin.Declaration","src": 94,"pubDecls": [723],"privDecls": [],"fields": [60,40,158]},{"kind": 8,"name": "std.builtin.Union","src": 95,"pubDecls": [],"privDecls": [],"fields": [130,159,160,155]},{"kind": 13,"child": 161},{"kind": 8,"name": "std.builtin.Optional","src": 96,"pubDecls": [],"privDecls": [],"fields": [33]},{"kind": 8,"name": "std.builtin.Enum","src": 97,"pubDecls": [],"privDecls": [],"fields": [130,33,162,155,40]},{"kind": 8,"name": "std.builtin.Vector","src": 98,"pubDecls": [],"privDecls": [],"fields": [37,33]},{"kind": 8,"name": "std.builtin.Float","src": 99,"pubDecls": [],"privDecls": [],"fields": [37]},{"kind": 8,"name": "std.builtin.UnionField","src": 100,"pubDecls": [],"privDecls": [],"fields": [60,163,33]},{"kind": 8,"name": "std.builtin.StructField","src": 101,"pubDecls": [],"privDecls": [],"fields": [60,164,33,156]},{"kind": 8,"name": "std.builtin.AnyFrame","src": 102,"pubDecls": [],"privDecls": [],"fields": [159]},{"kind": 8,"name": "std.builtin.Error","src": 103,"pubDecls": [],"privDecls": [],"fields": [60,37]},{"kind": 8,"name": "std.builtin.Fn","src": 104,"pubDecls": [],"privDecls": [],"fields": [92,40,40,159,165]},{"kind": 8,"name": "std.builtin.FnArg","src": 105,"pubDecls": [],"privDecls": [],"fields": [40,40,159]},{"kind": 8,"name": "std.builtin.Int","src": 106,"pubDecls": [],"privDecls": [],"fields": [40,37]},{"kind": 13,"child": 60},{"kind": 18,"name": "fn(type,var,var) var","generic": true,"args": [33,null,null]},{"kind": 18,"name": "fn(var,var) var","generic": true,"args": [null,null]},{"kind": 8,"name": "std.target.Cpu","src": 107,"pubDecls": [724,725,726,727],"privDecls": [],"fields": [99,168,169]},{"kind": 16,"name": "std.target.Abi","src": 108,"pubDecls": [728,729,730,731],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]},{"kind": 20,"name": "c_void"},{"kind": 4,"i": 32},{"kind": 8,"name": "std.target.Range","src": 109,"pubDecls": [732],"privDecls": [],"fields": [118,118]},{"kind": 6,"len": 2,"align": 16,"elem": 34},{"kind": 6,"len": 2,"elem": 139},{"kind": 6,"len": 2,"elem": 131},{"kind": 20,"name": "(var)"},{"kind": 16,"name": "std.builtin.Size","src": 110,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 17,"name": "std.builtin.Data","src": 111,"pubDecls": [733],"privDecls": [],"fields": [33,33,170]},{"kind": 13,"child": 33},{"kind": 6,"len": 2,"elem": 138},{"kind": 6,"len": 2,"elem": 141},{"kind": 6,"len": 2,"elem": 129},{"kind": 13,"child": 129},{"kind": 13,"child": 37},{"kind": 6,"len": 2,"elem": 143},{"kind": 8,"name": "std.target.Model","src": 112,"pubDecls": [734,735,736],"privDecls": [],"fields": [60,171,169]},{"kind": 8,"name": "std.target.Feature","src": 113,"pubDecls": [737,738],"privDecls": [],"fields": [34,60,171,60,169]},{"kind": 6,"const": true,"elem": 166},{"kind": 8,"name": "std.target.Set","src": 114,"pubDecls": [739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754],"privDecls": [],"fields": [172]},{"kind": 8,"name": "std.builtin.FnDecl","src": 115,"pubDecls": [755],"privDecls": [],"fields": [33,173,40,40,40,145,33,174]},{"kind": 13,"child": 175},{"kind": 7,"len": 5,"elem": 38},{"kind": 16,"name": "std.builtin.Inline","src": 116,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 6,"len": 2,"elem": 60},{"kind": 6,"len": 2,"const": true,"elem": 34}],"decls": [{"import": 76,"src": 24,"name": "assertExternal","kind": "const","type": 77,"value": 51},{"import": 76,"src": 27,"name": "assertInternal","kind": "const","type": 78,"value": 52},{"import": 76,"src": 42,"name": "useExternal","kind": "const","type": 45,"value": 44},{"import": 76,"src": 46,"name": "useInternal","kind": "const","type": 54,"value": 49},{"import": 76,"src": 117,"name": "wasm_allocator","kind": "const","type": 62,"value": null},{"import": 76,"src": 2,"name": "init","kind": "const","type": 2,"value": 2},{"import": 76,"src": 36,"name": "unsafeCeilPowerOfTwo","kind": "const","type": 79,"value": 53},{"import": 76,"src": 16,"name": "allocNode","kind": "const","type": 14,"value": 16},{"import": 76,"src": 5,"name": "realloc","kind": "const","type": 3,"value": 5},{"import": 76,"src": 118,"name": "Frame","kind": "const","type": 33,"value": 80},{"import": 76,"src": 119,"name": "config","kind": "const","type": 49,"value": null},{"import": 76,"src": 32,"name": "freeListOfSize","kind": "const","type": 27,"value": 32},{"import": 76,"src": 38,"name": "unsafeLog2Int","kind": "const","type": 81,"value": 54},{"import": 76,"src": 120,"name": "debugCountAll"},{"import": 76,"src": 121,"name": "Self","kind": "const","type": 33,"value": 48},{"import": 76,"src": 122,"name": "debugCount"},{"import": 76,"src": 29,"name": "freeListIndex","kind": "const","type": 24,"value": 29},{"import": 76,"src": 22,"name": "free","kind": "const","type": 20,"value": 22},{"import": 76,"src": 123,"name": "_wasm","kind": "var","type": 48,"value": null},{"import": 76,"src": 17,"name": "unsafeAlignForward","kind": "const","type": 15,"value": 17},{"import": 76,"src": 124,"name": "FreeList","kind": "const","type": 33,"value": 66},{"import": 76,"src": 20,"name": "chunkify","kind": "const","type": 18,"value": 20},{"import": 76,"src": 28,"name": "padToFrameSize","kind": "const","type": 24,"value": 28},{"import": 76,"src": 6,"name": "shrink","kind": "const","type": 5,"value": 6},{"import": 76,"src": 15,"name": "findFreeNode","kind": "const","type": 13,"value": 15},{"import": 76,"src": 125,"name": "debugDump"},{"import": 76,"src": 126,"name": "JumboMatchStrategy","kind": "const","type": 33,"value": 84},{"import": 76,"src": 127,"name": "Validation","kind": "const","type": 33,"value": 46},{"import": 76,"src": 128,"name": "ShrinkStrategy","kind": "const","type": 33,"value": 85},{"import": 76,"src": 129,"name": "BuddyStrategy","kind": "const","type": 33,"value": 86},{"import": 76,"src": 44,"name": "run","kind": "const","type": 50,"value": 46},{"import": 76,"src": 130,"name": "ExportC","kind": "const","type": 33,"value": 51},{"import": 76,"src": 131,"name": "ZeeAllocDefaults","kind": "const","type": 33,"value": 48},{"import": 76,"src": 132,"name": "Config","kind": "const","type": 33,"value": 49},{"import": 76,"src": 43,"name": "ZeeAlloc","kind": "const","type": 47,"value": 45},{"import": 56,"src": 133,"name": "builtin"},{"import": 56,"src": 134,"name": "std"},{"import": 56,"src": 135,"name": "zee_alloc","kind": "const","type": 33,"value": 76},{"import": 87,"src": 136,"name": "CodeModel"},{"import": 57,"src": 137,"name": "code_model"},{"import": 87,"src": 0,"name": "default_panic","kind": "const","type": 0,"value": 0},{"import": 87,"src": 138,"name": "OutputMode","kind": "const","type": 33,"value": 88},{"import": 57,"src": 139,"name": "cpu"},{"import": 57,"src": 140,"name": "mode","kind": "const","type": 89,"value": null},{"import": 57,"src": 141,"name": "os","kind": "const","type": 90,"value": null},{"import": 57,"src": 142,"name": "abi"},{"import": 87,"src": 143,"name": "StackTrace","kind": "const","type": 33,"value": 91},{"import": 57,"src": 144,"name": "output_mode","kind": "const","type": 88,"value": null},{"import": 87,"src": 145,"name": "CallingConvention","kind": "const","type": 33,"value": 92},{"import": 87,"src": 146,"name": "Cpu"},{"import": 87,"src": 147,"name": "CallOptions","kind": "const","type": 33,"value": 93},{"import": 87,"src": 148,"name": "Mode","kind": "const","type": 33,"value": 89},{"import": 87,"src": 149,"name": "TestFn"},{"import": 87,"src": 150,"name": "Os","kind": "const","type": 33,"value": 90},{"import": 87,"src": 151,"name": "Version","kind": "const","type": 33,"value": 94},{"import": 87,"src": 152,"name": "GlobalLinkage","kind": "const","type": 33,"value": 95},{"import": 87,"src": 153,"name": "Abi"},{"import": 57,"src": 154,"name": "have_error_return_tracing"},{"import": 87,"src": 155,"name": "TypeInfo","kind": "const","type": 33,"value": 96},{"import": 57,"src": 156,"name": "position_independent_code"},{"import": 87,"src": 157,"name": "AtomicRmwOp"},{"import": 57,"src": 158,"name": "link_libc"},{"import": 87,"src": 159,"name": "LinkMode","kind": "const","type": 33,"value": 97},{"import": 87,"src": 160,"name": "ExportOptions","kind": "const","type": 33,"value": 98},{"import": 57,"src": 161,"name": "object_format"},{"import": 57,"src": 162,"name": "arch","kind": "const","type": 99,"value": null},{"import": 57,"src": 163,"name": "endian"},{"import": 87,"src": 164,"name": "FloatMode"},{"import": 87,"src": 165,"name": "AtomicOrder"},{"import": 87,"src": 166,"name": "TypeId"},{"import": 87,"src": 167,"name": "ObjectFormat"},{"import": 57,"src": 168,"name": "is_test"},{"import": 87,"src": 169,"name": "Target"},{"import": 87,"src": 170,"name": "PanicFn","kind": "const","type": 33,"value": 0},{"import": 57,"src": 171,"name": "link_mode","kind": "const","type": 97,"value": null},{"import": 87,"src": 172,"name": "Arch","kind": "const","type": 33,"value": 99},{"import": 57,"src": 173,"name": "valgrind_support"},{"import": 87,"src": 174,"name": "SubSystem"},{"import": 87,"src": 175,"name": "subsystem"},{"import": 87,"src": 176,"name": "Endian"},{"import": 87,"src": 177,"name": "panic","kind": "const","type": 0,"value": 0},{"import": 57,"src": 178,"name": "link_libcpp"},{"import": 57,"src": 179,"name": "strip_debug_info"},{"import": 57,"src": 180,"name": "single_threaded"},{"import": 58,"src": 181,"name": "mem","kind": "const","type": 33,"value": 100},{"import": 58,"src": 182,"name": "DynLib"},{"import": 58,"src": 183,"name": "builtin","kind": "const","type": 33,"value": 87},{"import": 58,"src": 184,"name": "SinglyLinkedList"},{"import": 58,"src": 185,"name": "PackedIntArrayEndian"},{"import": 58,"src": 186,"name": "PackedIntArray"},{"import": 58,"src": 187,"name": "math","kind": "const","type": 33,"value": 101},{"import": 58,"src": 188,"name": "Thread"},{"import": 58,"src": 189,"name": "ArrayListAlignedUnmanaged"},{"import": 58,"src": 190,"name": "BufSet"},{"import": 58,"src": 191,"name": "ArrayListSentineled"},{"import": 58,"src": 192,"name": "fifo"},{"import": 58,"src": 193,"name": "os"},{"import": 58,"src": 194,"name": "debug","kind": "const","type": 33,"value": 102},{"import": 58,"src": 195,"name": "dwarf"},{"import": 58,"src": 196,"name": "testing"},{"import": 58,"src": 197,"name": "event"},{"import": 58,"src": 198,"name": "unicode"},{"import": 58,"src": 199,"name": "ArrayListUnmanaged"},{"import": 58,"src": 200,"name": "build"},{"import": 58,"src": 201,"name": "http"},{"import": 58,"src": 202,"name": "elf"},{"import": 58,"src": 203,"name": "ComptimeStringMap"},{"import": 58,"src": 204,"name": "SegmentedList"},{"import": 58,"src": 205,"name": "ascii"},{"import": 58,"src": 206,"name": "io"},{"import": 58,"src": 207,"name": "ChildProcess"},{"import": 58,"src": 208,"name": "hash_map"},{"import": 58,"src": 209,"name": "fmt"},{"import": 58,"src": 210,"name": "base64"},{"import": 58,"src": 211,"name": "atomic"},{"import": 58,"src": 212,"name": "TailQueue"},{"import": 58,"src": 213,"name": "json"},{"import": 58,"src": 214,"name": "once"},{"import": 58,"src": 215,"name": "ResetEvent"},{"import": 58,"src": 216,"name": "pdb"},{"import": 58,"src": 217,"name": "BufMap"},{"import": 58,"src": 218,"name": "coff"},{"import": 58,"src": 219,"name": "crypto"},{"import": 58,"src": 220,"name": "hash"},{"import": 58,"src": 221,"name": "sort"},{"import": 58,"src": 222,"name": "cache_hash"},{"import": 58,"src": 223,"name": "c"},{"import": 58,"src": 224,"name": "cstr"},{"import": 58,"src": 225,"name": "rb"},{"import": 58,"src": 226,"name": "rand"},{"import": 58,"src": 227,"name": "meta","kind": "const","type": 33,"value": 103},{"import": 58,"src": 228,"name": "net"},{"import": 58,"src": 229,"name": "fs"},{"import": 58,"src": 230,"name": "heap"},{"import": 58,"src": 231,"name": "start","kind": "const","type": 33,"value": 104},{"import": 58,"src": 232,"name": "ArrayListAligned"},{"import": 58,"src": 233,"name": "AutoHashMap"},{"import": 58,"src": 234,"name": "PriorityQueue"},{"import": 58,"src": 235,"name": "Mutex"},{"import": 58,"src": 236,"name": "time"},{"import": 58,"src": 237,"name": "Progress"},{"import": 58,"src": 238,"name": "Target","kind": "const","type": 33,"value": 105},{"import": 58,"src": 239,"name": "packed_int_array"},{"import": 58,"src": 240,"name": "valgrind"},{"import": 58,"src": 241,"name": "PackedIntSliceEndian"},{"import": 58,"src": 242,"name": "HashMap"},{"import": 58,"src": 243,"name": "zig"},{"import": 58,"src": 244,"name": "ArrayList"},{"import": 58,"src": 245,"name": "SpinLock"},{"import": 58,"src": 246,"name": "PackedIntSlice"},{"import": 58,"src": 247,"name": "process"},{"import": 58,"src": 248,"name": "macho"},{"import": 58,"src": 249,"name": "BloomFilter"},{"import": 58,"src": 250,"name": "StringHashMap"},{"import": 76,"src": 31,"name": "removeAfter","kind": "const","type": 26,"value": 31},{"import": 76,"src": 4,"name": "init","kind": "const","type": 4,"value": 4},{"import": 76,"src": 30,"name": "root","kind": "const","type": 25,"value": 30},{"import": 76,"src": 251,"name": "remove"},{"import": 76,"src": 33,"name": "prepend","kind": "const","type": 28,"value": 33},{"import": 76,"src": 252,"name": "builtin","kind": "const","type": 33,"value": 57},{"import": 76,"src": 253,"name": "page_index","kind": "const","type": 37,"value": null},{"import": 76,"src": 254,"name": "testAllocatorAligned"},{"import": 76,"src": 255,"name": "testAllocatorAlignedShrink"},{"import": 76,"src": 256,"name": "min_frame_size","kind": "const","type": 37,"value": null},{"import": 76,"src": 257,"name": "wasm_page_allocator","kind": "var","type": 83,"value": null},{"import": 76,"src": 258,"name": "std","kind": "const","type": 33,"value": 58},{"import": 76,"src": 259,"name": "testAllocator"},{"import": 76,"src": 260,"name": "testAllocatorLargeAlignment"},{"import": 76,"src": 261,"name": "llvm.wasm.memory.grow.i32","kind": "const","type": 112,"value": 55},{"import": 76,"src": 262,"name": "min_payload_size","kind": "const","type": 37,"value": null},{"import": 76,"src": 263,"name": "jumbo_index"},{"import": 76,"src": 264,"name": "testing"},{"import": 76,"src": 265,"name": "meta_size","kind": "const","type": 37,"value": null},{"import": 76,"src": 11,"name": "assertIf","kind": "const","type": 113,"value": 56},{"import": 76,"src": 266,"name": "Allocator","kind": "const","type": 33,"value": 83},{"import": 76,"src": 12,"name": "restorePayload","kind": "const","type": 10,"value": 12},{"import": 76,"src": 23,"name": "isAllocated","kind": "const","type": 21,"value": 23},{"import": 76,"src": 25,"name": "validate","kind": "const","type": 22,"value": 25},{"import": 76,"src": 267,"name": "restoreAddr"},{"import": 76,"src": 14,"name": "payloadSlice","kind": "const","type": 12,"value": 14},{"import": 76,"src": 18,"name": "init","kind": "const","type": 16,"value": 18},{"import": 76,"src": 19,"name": "markAllocated","kind": "const","type": 17,"value": 19},{"import": 76,"src": 13,"name": "payloadSize","kind": "const","type": 11,"value": 13},{"import": 76,"src": 26,"name": "isCorrectSize","kind": "const","type": 23,"value": 26},{"import": 76,"src": 268,"name": "alignment","kind": "const","type": 37,"value": null},{"import": 76,"src": 269,"name": "allocated_signal","kind": "const","type": 70,"value": null},{"import": 100,"src": 270,"name": "destroy"},{"import": 100,"src": 271,"name": "realloc"},{"import": 100,"src": 272,"name": "allocSentinel"},{"import": 100,"src": 273,"name": "shrink"},{"import": 100,"src": 274,"name": "Error","kind": "const","type": 33,"value": 107},{"import": 100,"src": 275,"name": "alignedShrink"},{"import": 100,"src": 276,"name": "alignedAlloc"},{"import": 100,"src": 277,"name": "alloc"},{"import": 100,"src": 278,"name": "alignedRealloc"},{"import": 100,"src": 279,"name": "dupe"},{"import": 100,"src": 280,"name": "dupeZ"},{"import": 100,"src": 281,"name": "free"},{"import": 100,"src": 282,"name": "allocWithOptions"},{"import": 100,"src": 283,"name": "create"},{"import": 100,"src": 284,"name": "AllocWithOptionsPayload"},{"import": 87,"src": 285,"name": "root","kind": "const","type": 33,"value": 56},{"import": 87,"src": 286,"name": "std","kind": "const","type": 33,"value": 58},{"import": 115,"src": 287,"name": "Tag","kind": "const","type": 33,"value": 116},{"import": 115,"src": 288,"name": "LinuxVersionRange","kind": "const","type": 33,"value": 117},{"import": 115,"src": 289,"name": "WindowsVersion","kind": "const","type": 33,"value": 118},{"import": 115,"src": 290,"name": "VersionRange","kind": "const","type": 33,"value": 119},{"import": 115,"src": 291,"name": "requiresLibC"},{"import": 115,"src": 292,"name": "defaultVersionRange"},{"import": 87,"src": 293,"name": "Modifier","kind": "const","type": 33,"value": 121},{"import": 87,"src": 294,"name": "Range","kind": "const","type": 33,"value": 123},{"import": 87,"src": 295,"name": "format"},{"import": 87,"src": 296,"name": "parse"},{"import": 87,"src": 297,"name": "order"},{"import": 87,"src": 298,"name": "Struct","kind": "const","type": 33,"value": 125},{"import": 87,"src": 299,"name": "Array","kind": "const","type": 33,"value": 126},{"import": 87,"src": 300,"name": "ErrorUnion","kind": "const","type": 33,"value": 127},{"import": 87,"src": 301,"name": "Pointer","kind": "const","type": 33,"value": 128},{"import": 87,"src": 302,"name": "EnumField","kind": "const","type": 33,"value": 129},{"import": 87,"src": 303,"name": "ContainerLayout","kind": "const","type": 33,"value": 130},{"import": 87,"src": 304,"name": "Declaration","kind": "const","type": 33,"value": 131},{"import": 87,"src": 305,"name": "Union","kind": "const","type": 33,"value": 132},{"import": 87,"src": 306,"name": "ErrorSet","kind": "const","type": 33,"value": 133},{"import": 87,"src": 307,"name": "Optional","kind": "const","type": 33,"value": 134},{"import": 87,"src": 308,"name": "Enum","kind": "const","type": 33,"value": 135},{"import": 87,"src": 309,"name": "Vector","kind": "const","type": 33,"value": 136},{"import": 87,"src": 310,"name": "Float","kind": "const","type": 33,"value": 137},{"import": 87,"src": 311,"name": "UnionField","kind": "const","type": 33,"value": 138},{"import": 87,"src": 312,"name": "StructField","kind": "const","type": 33,"value": 139},{"import": 87,"src": 313,"name": "AnyFrame","kind": "const","type": 33,"value": 140},{"import": 87,"src": 314,"name": "Error","kind": "const","type": 33,"value": 141},{"import": 87,"src": 315,"name": "Fn","kind": "const","type": 33,"value": 142},{"import": 87,"src": 316,"name": "FnArg","kind": "const","type": 33,"value": 143},{"import": 87,"src": 317,"name": "Int","kind": "const","type": 33,"value": 144},{"import": 115,"src": 318,"name": "genericName"},{"import": 115,"src": 319,"name": "isARM"},{"import": 115,"src": 320,"name": "allFeaturesList"},{"import": 115,"src": 321,"name": "ptrBitWidth"},{"import": 115,"src": 322,"name": "endian"},{"import": 115,"src": 323,"name": "isThumb"},{"import": 115,"src": 324,"name": "parseCpuModel"},{"import": 115,"src": 325,"name": "allCpuModels"},{"import": 115,"src": 326,"name": "toElfMachine"},{"import": 115,"src": 327,"name": "isRISCV"},{"import": 115,"src": 328,"name": "isWasm"},{"import": 115,"src": 329,"name": "isMIPS"},{"import": 100,"src": 330,"name": "toSlice"},{"import": 100,"src": 331,"name": "spanZ"},{"import": 100,"src": 332,"name": "set"},{"import": 100,"src": 333,"name": "writeIntSliceBig"},{"import": 100,"src": 334,"name": "reverse"},{"import": 100,"src": 335,"name": "readIntSliceNative"},{"import": 100,"src": 336,"name": "toBytes"},{"import": 100,"src": 337,"name": "rotate"},{"import": 100,"src": 338,"name": "len"},{"import": 100,"src": 339,"name": "sliceAsBytes"},{"import": 100,"src": 340,"name": "bytesToValue"},{"import": 100,"src": 341,"name": "writeIntForeign"},{"import": 100,"src": 342,"name": "toSliceConst"},{"import": 100,"src": 343,"name": "separate"},{"import": 100,"src": 344,"name": "dupeZ"},{"import": 100,"src": 345,"name": "SplitIterator"},{"import": 100,"src": 346,"name": "max"},{"import": 100,"src": 347,"name": "startsWith"},{"import": 100,"src": 348,"name": "bytesAsSlice"},{"import": 100,"src": 349,"name": "indexOfScalarPos"},{"import": 100,"src": 350,"name": "writeIntSliceNative"},{"import": 100,"src": 351,"name": "indexOf"},{"import": 100,"src": 21,"name": "copy","kind": "const","type": 146,"value": 57},{"import": 100,"src": 352,"name": "writeInt"},{"import": 100,"src": 353,"name": "alignForwardGeneric"},{"import": 100,"src": 354,"name": "swap"},{"import": 100,"src": 355,"name": "lastIndexOfScalar"},{"import": 100,"src": 356,"name": "writeIntSliceLittle"},{"import": 100,"src": 357,"name": "min"},{"import": 100,"src": 358,"name": "readIntNative"},{"import": 100,"src": 359,"name": "indexOfAnyPos"},{"import": 100,"src": 360,"name": "readIntSliceBig"},{"import": 100,"src": 361,"name": "writeIntLittle"},{"import": 100,"src": 362,"name": "lenZ"},{"import": 100,"src": 363,"name": "trimLeft"},{"import": 100,"src": 364,"name": "alignBackwardGeneric"},{"import": 100,"src": 365,"name": "asBytes"},{"import": 100,"src": 366,"name": "readVarInt"},{"import": 100,"src": 367,"name": "isAligned"},{"import": 100,"src": 368,"name": "writeIntSlice"},{"import": 100,"src": 369,"name": "dupe"},{"import": 100,"src": 370,"name": "join"},{"import": 100,"src": 371,"name": "concat"},{"import": 100,"src": 372,"name": "bytesAsValue"},{"import": 100,"src": 373,"name": "toNative"},{"import": 100,"src": 374,"name": "indexOfPos"},{"import": 100,"src": 375,"name": "nativeToLittle"},{"import": 100,"src": 376,"name": "alignBackward"},{"import": 100,"src": 377,"name": "readIntSlice"},{"import": 100,"src": 378,"name": "nativeTo"},{"import": 100,"src": 379,"name": "indexOfSentinel"},{"import": 100,"src": 380,"name": "zeroes"},{"import": 100,"src": 381,"name": "lastIndexOfAny"},{"import": 100,"src": 382,"name": "order"},{"import": 100,"src": 383,"name": "TokenIterator"},{"import": 100,"src": 384,"name": "littleToNative"},{"import": 100,"src": 385,"name": "bigToNative"},{"import": 100,"src": 386,"name": "alignForward"},{"import": 100,"src": 387,"name": "indexOfScalar"},{"import": 100,"src": 388,"name": "nativeToBig"},{"import": 100,"src": 389,"name": "writeIntNative"},{"import": 100,"src": 390,"name": "Allocator","kind": "const","type": 33,"value": 83},{"import": 100,"src": 391,"name": "indexOfAny"},{"import": 100,"src": 392,"name": "readIntBig"},{"import": 100,"src": 393,"name": "span"},{"import": 100,"src": 394,"name": "lessThan"},{"import": 100,"src": 395,"name": "endsWith"},{"import": 100,"src": 396,"name": "trim"},{"import": 100,"src": 397,"name": "tokenize"},{"import": 100,"src": 398,"name": "indexOfDiff"},{"import": 100,"src": 399,"name": "readIntForeign"},{"import": 100,"src": 400,"name": "writeIntSliceForeign"},{"import": 100,"src": 401,"name": "readIntSliceLittle"},{"import": 100,"src": 402,"name": "isAlignedGeneric"},{"import": 100,"src": 403,"name": "trimRight"},{"import": 100,"src": 404,"name": "secureZero"},{"import": 100,"src": 405,"name": "writeIntBig"},{"import": 100,"src": 406,"name": "zeroInit"},{"import": 100,"src": 407,"name": "Span"},{"import": 100,"src": 408,"name": "split"},{"import": 100,"src": 409,"name": "page_size","kind": "const","type": 37,"value": null},{"import": 100,"src": 410,"name": "lastIndexOf"},{"import": 100,"src": 411,"name": "readIntLittle"},{"import": 100,"src": 412,"name": "readIntSliceForeign"},{"import": 100,"src": 413,"name": "copyBackwards"},{"import": 100,"src": 414,"name": "allEqual"},{"import": 100,"src": 415,"name": "eql"},{"import": 100,"src": 416,"name": "readInt"},{"import": 100,"src": 417,"name": "failAllocator"},{"import": 100,"src": 418,"name": "failAllocatorRealloc"},{"import": 100,"src": 419,"name": "BytesAsSliceReturnType"},{"import": 100,"src": 420,"name": "BytesAsValueReturnType"},{"import": 100,"src": 421,"name": "testWriteIntImpl"},{"import": 100,"src": 422,"name": "meta"},{"import": 100,"src": 423,"name": "assert","kind": "const","type": 1,"value": 1},{"import": 100,"src": 424,"name": "builtin","kind": "const","type": 33,"value": 57},{"import": 100,"src": 425,"name": "AsBytesReturnType"},{"import": 100,"src": 426,"name": "math"},{"import": 100,"src": 427,"name": "debug","kind": "const","type": 33,"value": 102},{"import": 100,"src": 428,"name": "testing"},{"import": 100,"src": 429,"name": "SliceAsBytesReturnType"},{"import": 100,"src": 430,"name": "trait"},{"import": 100,"src": 431,"name": "testReadIntImpl"},{"import": 100,"src": 432,"name": "failAllocatorShrink"},{"import": 100,"src": 433,"name": "std","kind": "const","type": 33,"value": 58},{"import": 100,"src": 434,"name": "mem"},{"import": 101,"src": 435,"name": "ceil"},{"import": 101,"src": 436,"name": "isNan"},{"import": 101,"src": 437,"name": "isSignalNan"},{"import": 101,"src": 438,"name": "cosh"},{"import": 101,"src": 439,"name": "floor"},{"import": 101,"src": 440,"name": "nan_u128"},{"import": 101,"src": 441,"name": "modf64_result"},{"import": 101,"src": 442,"name": "hypot"},{"import": 101,"src": 443,"name": "inf_u16"},{"import": 101,"src": 444,"name": "absFloat"},{"import": 101,"src": 445,"name": "f64_true_min"},{"import": 101,"src": 446,"name": "rotr"},{"import": 101,"src": 447,"name": "absCast"},{"import": 101,"src": 448,"name": "cbrt"},{"import": 101,"src": 449,"name": "qnan_f64"},{"import": 101,"src": 450,"name": "Order"},{"import": 101,"src": 451,"name": "round"},{"import": 101,"src": 452,"name": "nan_f32"},{"import": 101,"src": 453,"name": "divFloor"},{"import": 101,"src": 454,"name": "ceilPowerOfTwo"},{"import": 101,"src": 455,"name": "mulWide"},{"import": 101,"src": 456,"name": "sinh"},{"import": 101,"src": 457,"name": "inf_u32"},{"import": 101,"src": 458,"name": "shr"},{"import": 101,"src": 459,"name": "asinh"},{"import": 101,"src": 40,"name": "maxInt","kind": "const","type": 36,"value": 41},{"import": 101,"src": 460,"name": "sin"},{"import": 101,"src": 461,"name": "f64_toint"},{"import": 101,"src": 462,"name": "cast"},{"import": 101,"src": 463,"name": "f128_true_min"},{"import": 101,"src": 464,"name": "two_sqrtpi"},{"import": 101,"src": 465,"name": "acosh"},{"import": 101,"src": 466,"name": "frexp32_result"},{"import": 101,"src": 467,"name": "Complex"},{"import": 101,"src": 468,"name": "raiseOverflow"},{"import": 101,"src": 469,"name": "inf_f128"},{"import": 101,"src": 470,"name": "inf"},{"import": 101,"src": 39,"name": "Log2Int","kind": "const","type": 32,"value": 40},{"import": 101,"src": 47,"name": "log2_int","kind": "const","type": 55,"value": 50},{"import": 101,"src": 471,"name": "add"},{"import": 101,"src": 472,"name": "atanh"},{"import": 101,"src": 473,"name": "lossyCast"},{"import": 101,"src": 474,"name": "modf"},{"import": 101,"src": 475,"name": "mod"},{"import": 101,"src": 476,"name": "f32_max"},{"import": 101,"src": 477,"name": "sqrt1_2"},{"import": 101,"src": 478,"name": "order"},{"import": 101,"src": 479,"name": "tan"},{"import": 101,"src": 480,"name": "ilogb"},{"import": 101,"src": 481,"name": "cos"},{"import": 101,"src": 482,"name": "f64_epsilon"},{"import": 101,"src": 483,"name": "inf_u64"},{"import": 101,"src": 484,"name": "asin"},{"import": 101,"src": 34,"name": "isPowerOfTwo","kind": "const","type": 53,"value": 48},{"import": 101,"src": 485,"name": "nan_u16"},{"import": 101,"src": 486,"name": "inf_f32"},{"import": 101,"src": 487,"name": "f32_true_min"},{"import": 101,"src": 488,"name": "fabs"},{"import": 101,"src": 489,"name": "complex"},{"import": 101,"src": 490,"name": "clamp"},{"import": 101,"src": 491,"name": "atan"},{"import": 101,"src": 492,"name": "raiseDivByZero"},{"import": 101,"src": 493,"name": "snan"},{"import": 101,"src": 494,"name": "f16_true_min"},{"import": 101,"src": 495,"name": "isNegativeInf"},{"import": 101,"src": 496,"name": "log10e"},{"import": 101,"src": 497,"name": "f32_toint"},{"import": 101,"src": 498,"name": "pow"},{"import": 101,"src": 499,"name": "log2"},{"import": 101,"src": 500,"name": "inf_f64"},{"import": 101,"src": 501,"name": "log2_int_ceil"},{"import": 101,"src": 502,"name": "scalbn"},{"import": 101,"src": 503,"name": "qnan_u64"},{"import": 101,"src": 504,"name": "e"},{"import": 101,"src": 505,"name": "ceilPowerOfTwoPromote"},{"import": 101,"src": 506,"name": "f16_min"},{"import": 101,"src": 507,"name": "expm1"},{"import": 101,"src": 508,"name": "signbit"},{"import": 101,"src": 509,"name": "shlExact"},{"import": 101,"src": 510,"name": "nan_f128"},{"import": 101,"src": 511,"name": "frexp"},{"import": 101,"src": 512,"name": "qnan_f32"},{"import": 101,"src": 513,"name": "qnan_u16"},{"import": 101,"src": 514,"name": "f32_min"},{"import": 101,"src": 515,"name": "frexp64_result"},{"import": 101,"src": 516,"name": "CompareOperator"},{"import": 101,"src": 517,"name": "f16_epsilon"},{"import": 101,"src": 518,"name": "rem"},{"import": 101,"src": 519,"name": "qnan_u32"},{"import": 101,"src": 520,"name": "ln10"},{"import": 101,"src": 521,"name": "qnan_u128"},{"import": 101,"src": 522,"name": "sub"},{"import": 101,"src": 523,"name": "floatMantissaBits"},{"import": 101,"src": 35,"name": "max","kind": "const","type": 41,"value": 42},{"import": 101,"src": 524,"name": "nan_u32"},{"import": 101,"src": 525,"name": "acos"},{"import": 101,"src": 526,"name": "f16_max"},{"import": 101,"src": 527,"name": "floorPowerOfTwo"},{"import": 101,"src": 528,"name": "exp"},{"import": 101,"src": 529,"name": "qnan_f16"},{"import": 101,"src": 530,"name": "f64_min"},{"import": 101,"src": 531,"name": "log10"},{"import": 101,"src": 532,"name": "nan_f16"},{"import": 101,"src": 533,"name": "f128_toint"},{"import": 101,"src": 534,"name": "IntFittingRange"},{"import": 101,"src": 535,"name": "nan_u64"},{"import": 101,"src": 536,"name": "rotl"},{"import": 101,"src": 537,"name": "sqrt2"},{"import": 101,"src": 538,"name": "log"},{"import": 101,"src": 539,"name": "raiseUnderflow"},{"import": 101,"src": 37,"name": "min","kind": "const","type": 147,"value": 58},{"import": 101,"src": 540,"name": "minInt"},{"import": 101,"src": 541,"name": "negate"},{"import": 101,"src": 542,"name": "qnan_f128"},{"import": 101,"src": 543,"name": "alignCast"},{"import": 101,"src": 544,"name": "f16_toint"},{"import": 101,"src": 545,"name": "isInf"},{"import": 101,"src": 546,"name": "modf32_result"},{"import": 101,"src": 547,"name": "f128_epsilon"},{"import": 101,"src": 548,"name": "mul"},{"import": 101,"src": 549,"name": "f128_min"},{"import": 101,"src": 550,"name": "divExact"},{"import": 101,"src": 551,"name": "negateCast"},{"import": 101,"src": 552,"name": "isFinite"},{"import": 101,"src": 553,"name": "nan_f64"},{"import": 101,"src": 554,"name": "f128_max"},{"import": 101,"src": 555,"name": "f32_epsilon"},{"import": 101,"src": 556,"name": "forceEval"},{"import": 101,"src": 557,"name": "isNormal"},{"import": 101,"src": 558,"name": "raiseInvalid"},{"import": 101,"src": 559,"name": "compare"},{"import": 101,"src": 560,"name": "shl"},{"import": 101,"src": 561,"name": "ln2"},{"import": 101,"src": 562,"name": "big"},{"import": 101,"src": 563,"name": "f64_max"},{"import": 101,"src": 564,"name": "inf_f16"},{"import": 101,"src": 565,"name": "nan"},{"import": 101,"src": 566,"name": "raiseInexact"},{"import": 101,"src": 567,"name": "inf_u128"},{"import": 101,"src": 568,"name": "copysign"},{"import": 101,"src": 569,"name": "fma"},{"import": 101,"src": 570,"name": "isPositiveInf"},{"import": 101,"src": 571,"name": "sqrt"},{"import": 101,"src": 572,"name": "tanh"},{"import": 101,"src": 573,"name": "approxEq"},{"import": 101,"src": 574,"name": "trunc"},{"import": 101,"src": 575,"name": "floatExponentBits"},{"import": 101,"src": 576,"name": "tau"},{"import": 101,"src": 577,"name": "exp2"},{"import": 101,"src": 578,"name": "log1p"},{"import": 101,"src": 579,"name": "AlignCastError"},{"import": 101,"src": 580,"name": "pi"},{"import": 101,"src": 581,"name": "log2e"},{"import": 101,"src": 582,"name": "powi"},{"import": 101,"src": 583,"name": "absInt"},{"import": 101,"src": 584,"name": "divTrunc"},{"import": 101,"src": 585,"name": "atan2"},{"import": 101,"src": 45,"name": "Min","kind": "const","type": 52,"value": 47},{"import": 101,"src": 586,"name": "ln"},{"import": 101,"src": 587,"name": "testAbsFloat"},{"import": 101,"src": 588,"name": "testDivFloor"},{"import": 101,"src": 589,"name": "testCeilPowerOfTwo"},{"import": 101,"src": 590,"name": "assert","kind": "const","type": 1,"value": 1},{"import": 101,"src": 591,"name": "testMod"},{"import": 101,"src": 592,"name": "testCeilPowerOfTwoPromote"},{"import": 101,"src": 593,"name": "testRem"},{"import": 101,"src": 594,"name": "testFloorPowerOfTwo"},{"import": 101,"src": 595,"name": "testOverflow"},{"import": 101,"src": 596,"name": "testDivExact"},{"import": 101,"src": 597,"name": "testing"},{"import": 101,"src": 598,"name": "std","kind": "const","type": 33,"value": 58},{"import": 101,"src": 599,"name": "testAbsInt"},{"import": 101,"src": 600,"name": "testDivTrunc"},{"import": 102,"src": 601,"name": "LineInfo"},{"import": 102,"src": 602,"name": "TTY"},{"import": 102,"src": 603,"name": "attachSegfaultHandler"},{"import": 102,"src": 604,"name": "captureStackTrace"},{"import": 102,"src": 605,"name": "writeCurrentStackTraceWindows"},{"import": 102,"src": 606,"name": "dumpCurrentStackTrace"},{"import": 102,"src": 607,"name": "getStderrStream"},{"import": 102,"src": 608,"name": "have_segfault_handling_support"},{"import": 102,"src": 609,"name": "detectTTYConfig"},{"import": 102,"src": 610,"name": "writeCurrentStackTrace"},{"import": 102,"src": 611,"name": "dumpStackTrace"},{"import": 102,"src": 612,"name": "DebugInfo"},{"import": 102,"src": 613,"name": "enable_segfault_handler"},{"import": 102,"src": 614,"name": "writeStackTrace"},{"import": 102,"src": 615,"name": "leb"},{"import": 102,"src": 616,"name": "ModuleDebugInfo"},{"import": 102,"src": 617,"name": "getSelfDebugInfo"},{"import": 102,"src": 618,"name": "panic"},{"import": 102,"src": 1,"name": "assert","kind": "const","type": 1,"value": 1},{"import": 102,"src": 619,"name": "printSourceAtAddress"},{"import": 102,"src": 620,"name": "StackIterator"},{"import": 102,"src": 621,"name": "readElfDebugInfo"},{"import": 102,"src": 622,"name": "OpenSelfDebugInfoError"},{"import": 102,"src": 623,"name": "panicExtra"},{"import": 102,"src": 624,"name": "maybeEnableSegfaultHandler"},{"import": 102,"src": 625,"name": "runtime_safety"},{"import": 102,"src": 626,"name": "dumpStackTraceFromBase"},{"import": 102,"src": 627,"name": "dumpStackPointerAddr"},{"import": 102,"src": 628,"name": "getStderrMutex"},{"import": 102,"src": 629,"name": "failing_allocator"},{"import": 102,"src": 630,"name": "openSelfDebugInfo"},{"import": 102,"src": 631,"name": "warn"},{"import": 102,"src": 632,"name": "global_allocator"},{"import": 102,"src": 633,"name": "WHITE"},{"import": 102,"src": 634,"name": "panic_mutex"},{"import": 102,"src": 635,"name": "handleSegfaultWindows"},{"import": 102,"src": 636,"name": "DW"},{"import": 102,"src": 637,"name": "panicking"},{"import": 102,"src": 638,"name": "os"},{"import": 102,"src": 639,"name": "readMachODebugInfo"},{"import": 102,"src": 640,"name": "readSparseBitVector"},{"import": 102,"src": 641,"name": "RESET"},{"import": 102,"src": 642,"name": "elf"},{"import": 102,"src": 643,"name": "MachoSymbol"},{"import": 102,"src": 644,"name": "SymbolInfo"},{"import": 102,"src": 645,"name": "mapWholeFile"},{"import": 102,"src": 646,"name": "io"},{"import": 102,"src": 647,"name": "CYAN"},{"import": 102,"src": 648,"name": "root"},{"import": 102,"src": 649,"name": "maxInt"},{"import": 102,"src": 650,"name": "coff"},{"import": 102,"src": 651,"name": "DIM"},{"import": 102,"src": 652,"name": "GREEN"},{"import": 102,"src": 653,"name": "fs"},{"import": 102,"src": 654,"name": "File"},{"import": 102,"src": 655,"name": "printLineFromFileAnyOs"},{"import": 102,"src": 656,"name": "panic_stage"},{"import": 102,"src": 657,"name": "printLineInfo"},{"import": 102,"src": 658,"name": "process"},{"import": 102,"src": 659,"name": "macho"},{"import": 102,"src": 660,"name": "getDebugInfoAllocator"},{"import": 102,"src": 661,"name": "builtin"},{"import": 102,"src": 662,"name": "windows_segfault_handle"},{"import": 102,"src": 663,"name": "debug_info_allocator"},{"import": 102,"src": 664,"name": "math"},{"import": 102,"src": 665,"name": "handleSegfaultWindowsExtra"},{"import": 102,"src": 666,"name": "stderr_file"},{"import": 102,"src": 667,"name": "Module"},{"import": 102,"src": 668,"name": "resetSegfaultHandler"},{"import": 102,"src": 669,"name": "stderr_stream"},{"import": 102,"src": 670,"name": "stderr_mutex"},{"import": 102,"src": 671,"name": "pdb"},{"import": 102,"src": 672,"name": "std"},{"import": 102,"src": 673,"name": "chopSlice"},{"import": 102,"src": 674,"name": "machoSearchSymbols"},{"import": 102,"src": 675,"name": "handleSegfaultLinux"},{"import": 102,"src": 676,"name": "windows"},{"import": 102,"src": 677,"name": "stderr_file_writer"},{"import": 102,"src": 678,"name": "self_debug_info"},{"import": 102,"src": 679,"name": "readCoffDebugInfo"},{"import": 102,"src": 680,"name": "ArrayList"},{"import": 102,"src": 681,"name": "debug_info_arena_allocator"},{"import": 102,"src": 682,"name": "RED"},{"import": 102,"src": 683,"name": "mem"},{"import": 102,"src": 684,"name": "populateModule"},{"import": 103,"src": 685,"name": "eql"},{"import": 103,"src": 686,"name": "Child"},{"import": 103,"src": 41,"name": "Int","kind": "const","type": 42,"value": 43},{"import": 103,"src": 687,"name": "bitCount"},{"import": 103,"src": 688,"name": "declarations"},{"import": 103,"src": 689,"name": "fieldIndex"},{"import": 103,"src": 690,"name": "refAllDecls"},{"import": 103,"src": 691,"name": "IntToEnumError"},{"import": 103,"src": 692,"name": "alignment"},{"import": 103,"src": 693,"name": "IntType"},{"import": 103,"src": 694,"name": "Vector"},{"import": 103,"src": 695,"name": "fieldInfo"},{"import": 103,"src": 696,"name": "activeTag"},{"import": 103,"src": 697,"name": "declarationInfo"},{"import": 103,"src": 698,"name": "declList"},{"import": 103,"src": 699,"name": "trait"},{"import": 103,"src": 700,"name": "TagType"},{"import": 103,"src": 701,"name": "sentinel"},{"import": 103,"src": 702,"name": "containerLayout"},{"import": 103,"src": 703,"name": "tagName"},{"import": 103,"src": 704,"name": "Elem"},{"import": 103,"src": 705,"name": "intToEnum"},{"import": 103,"src": 706,"name": "TagPayloadType"},{"import": 103,"src": 707,"name": "fields"},{"import": 103,"src": 708,"name": "stringToEnum"},{"import": 103,"src": 709,"name": "mem"},{"import": 103,"src": 710,"name": "builtin","kind": "const","type": 33,"value": 57},{"import": 103,"src": 711,"name": "math"},{"import": 103,"src": 712,"name": "std"},{"import": 103,"src": 713,"name": "debug"},{"import": 103,"src": 714,"name": "testing"},{"import": 103,"src": 715,"name": "testSentinel"},{"import": 103,"src": 716,"name": "TypeInfo","kind": "const","type": 33,"value": 96},{"import": 104,"src": 717,"name": "callMain"},{"import": 104,"src": 718,"name": "builtin","kind": "const","type": 33,"value": 87},{"import": 104,"src": 719,"name": "callMainAsync"},{"import": 104,"src": 720,"name": "EfiMain"},{"import": 104,"src": 721,"name": "root","kind": "const","type": 33,"value": 56},{"import": 104,"src": 722,"name": "uefi"},{"import": 104,"src": 723,"name": "main"},{"import": 104,"src": 724,"name": "callMainWithArgs"},{"import": 104,"src": 725,"name": "start_sym_name"},{"import": 104,"src": 726,"name": "WinMainCRTStartup"},{"import": 104,"src": 727,"name": "posixCallMainAndExit"},{"import": 104,"src": 728,"name": "_DllMainCRTStartup"},{"import": 104,"src": 729,"name": "std","kind": "const","type": 33,"value": 58},{"import": 104,"src": 730,"name": "starting_stack_ptr"},{"import": 104,"src": 731,"name": "wasm_freestanding_start"},{"import": 104,"src": 732,"name": "initEventLoopAndCallMain"},{"import": 104,"src": 733,"name": "assert"},{"import": 104,"src": 734,"name": "bad_main_ret"},{"import": 104,"src": 735,"name": "_start"},{"import": 115,"src": 736,"name": "exeFileExt"},{"import": 115,"src": 737,"name": "x86"},{"import": 115,"src": 738,"name": "amdgpu"},{"import": 115,"src": 739,"name": "getObjectFormat"},{"import": 115,"src": 740,"name": "zigTriple"},{"import": 115,"src": 741,"name": "stack_align","kind": "const","type": 37,"value": null},{"import": 115,"src": 742,"name": "getFloatAbi"},{"import": 115,"src": 743,"name": "isMusl"},{"import": 115,"src": 744,"name": "systemz"},{"import": 115,"src": 745,"name": "isDarwin"},{"import": 115,"src": 746,"name": "isMinGW"},{"import": 115,"src": 747,"name": "linuxTripleSimple"},{"import": 115,"src": 748,"name": "staticLibSuffix"},{"import": 115,"src": 749,"name": "staticLibSuffix_cpu_arch_abi"},{"import": 115,"src": 750,"name": "oFileExt"},{"import": 115,"src": 751,"name": "getObjectFormatSimple"},{"import": 115,"src": 752,"name": "libPrefix_cpu_arch_abi"},{"import": 115,"src": 753,"name": "isGnu"},{"import": 115,"src": 754,"name": "Cpu","kind": "const","type": 33,"value": 148},{"import": 115,"src": 755,"name": "riscv"},{"import": 115,"src": 756,"name": "hasDynamicLinker"},{"import": 115,"src": 757,"name": "DynamicLinker"},{"import": 115,"src": 758,"name": "powerpc"},{"import": 115,"src": 759,"name": "dynamicLibSuffix"},{"import": 115,"src": 760,"name": "arm"},{"import": 115,"src": 761,"name": "standardDynamicLinkerPath"},{"import": 115,"src": 762,"name": "Os","kind": "const","type": 33,"value": 90},{"import": 115,"src": 763,"name": "supportsNewStackCall"},{"import": 115,"src": 764,"name": "Abi","kind": "const","type": 33,"value": 149},{"import": 115,"src": 765,"name": "exeFileExtSimple"},{"import": 115,"src": 766,"name": "bpf"},{"import": 115,"src": 767,"name": "wasm"},{"import": 115,"src": 768,"name": "linuxTriple"},{"import": 115,"src": 769,"name": "mips"},{"import": 115,"src": 770,"name": "sparc"},{"import": 115,"src": 771,"name": "avr"},{"import": 115,"src": 772,"name": "isGnuLibC_os_tag_abi"},{"import": 115,"src": 773,"name": "ObjectFormat"},{"import": 115,"src": 774,"name": "FloatAbi"},{"import": 115,"src": 775,"name": "current"},{"import": 115,"src": 776,"name": "hexagon"},{"import": 115,"src": 777,"name": "isAndroid"},{"import": 115,"src": 778,"name": "isGnuLibC"},{"import": 115,"src": 779,"name": "libPrefix"},{"import": 115,"src": 780,"name": "SubSystem"},{"import": 115,"src": 781,"name": "msp430"},{"import": 115,"src": 782,"name": "aarch64"},{"import": 115,"src": 783,"name": "nvptx"},{"import": 115,"src": 784,"name": "isWasm"},{"import": 115,"src": 785,"name": "Target","kind": "const","type": 33,"value": 105},{"import": 115,"src": 786,"name": "builtin"},{"import": 115,"src": 787,"name": "std","kind": "const","type": 33,"value": 58},{"import": 115,"src": 788,"name": "Version","kind": "const","type": 33,"value": 94},{"import": 115,"src": 789,"name": "mem"},{"import": 115,"src": 790,"name": "dynamicLibSuffix"},{"import": 115,"src": 791,"name": "isDarwin"},{"import": 115,"src": 792,"name": "includesVersion"},{"import": 115,"src": 793,"name": "Range","kind": "const","type": 33,"value": 152},{"import": 115,"src": 794,"name": "default"},{"import": 87,"src": 795,"name": "includesVersion"},{"import": 87,"src": 796,"name": "Size","kind": "const","type": 33,"value": 157},{"import": 87,"src": 797,"name": "Data","kind": "const","type": 33,"value": 158},{"import": 115,"src": 798,"name": "Arch","kind": "const","type": 33,"value": 99},{"import": 115,"src": 799,"name": "Model","kind": "const","type": 33,"value": 166},{"import": 115,"src": 800,"name": "baseline"},{"import": 115,"src": 801,"name": "Feature","kind": "const","type": 33,"value": 167},{"import": 115,"src": 802,"name": "isMusl"},{"import": 115,"src": 803,"name": "oFileExt"},{"import": 115,"src": 804,"name": "default"},{"import": 115,"src": 805,"name": "isGnu"},{"import": 115,"src": 806,"name": "includesVersion"},{"import": 87,"src": 807,"name": "FnDecl","kind": "const","type": 33,"value": 170},{"import": 115,"src": 808,"name": "baseline"},{"import": 115,"src": 809,"name": "generic"},{"import": 115,"src": 810,"name": "toCpu"},{"import": 115,"src": 811,"name": "feature_set_fns"},{"import": 115,"src": 812,"name": "Set","kind": "const","type": 33,"value": 169},{"import": 115,"src": 813,"name": "needed_bit_count","kind": "const","type": 37,"value": null},{"import": 115,"src": 814,"name": "addFeatureSet"},{"import": 115,"src": 815,"name": "removeFeatureSet"},{"import": 115,"src": 816,"name": "removeFeature"},{"import": 115,"src": 817,"name": "ShiftInt"},{"import": 115,"src": 818,"name": "Index","kind": "const","type": 33,"value": 34},{"import": 115,"src": 819,"name": "asBytes"},{"import": 115,"src": 820,"name": "isEnabled"},{"import": 115,"src": 821,"name": "empty"},{"import": 115,"src": 822,"name": "byte_count","kind": "const","type": 37,"value": null},{"import": 115,"src": 823,"name": "usize_count","kind": "const","type": 37,"value": null},{"import": 115,"src": 824,"name": "addFeature"},{"import": 115,"src": 825,"name": "empty_workaround"},{"import": 115,"src": 826,"name": "eql"},{"import": 115,"src": 827,"name": "isEmpty"},{"import": 115,"src": 828,"name": "populateDependencies"},{"import": 87,"src": 829,"name": "Inline","kind": "const","type": 33,"value": 173}],"fns": [{"src": 0,"type": 0},{"src": 1,"type": 1},{"src": 2,"type": 2},{"src": 3,"type": 3},{"src": 4,"type": 4},{"src": 5,"type": 3},{"src": 6,"type": 5},{"src": 7,"type": 6},{"src": 8,"type": 7},{"src": 9,"type": 8},{"src": 10,"type": 9},{"src": 11,"type": 1},{"src": 12,"type": 10},{"src": 13,"type": 11},{"src": 14,"type": 12},{"src": 15,"type": 13},{"src": 16,"type": 14},{"src": 17,"type": 15},{"src": 18,"type": 16},{"src": 19,"type": 17},{"src": 20,"type": 18},{"src": 21,"type": 19},{"src": 22,"type": 20},{"src": 23,"type": 21},{"src": 24,"type": 1},{"src": 25,"type": 22},{"src": 26,"type": 23},{"src": 27,"type": 1},{"src": 28,"type": 24},{"src": 29,"type": 24},{"src": 30,"type": 25},{"src": 31,"type": 26},{"src": 32,"type": 27},{"src": 33,"type": 28},{"src": 34,"type": 23},{"src": 35,"type": 15},{"src": 36,"type": 15},{"src": 37,"type": 29},{"src": 38,"type": 30},{"src": 37,"type": 31},{"src": 39,"type": 32},{"src": 40,"type": 36},{"src": 35,"type": 41},{"src": 41,"type": 42},{"src": 42,"type": 45},{"src": 43,"type": 47},{"src": 44,"type": 50},{"src": 45,"type": 52},{"src": 34,"type": 53},{"src": 46,"type": 54},{"src": 47,"type": 55},{"src": 24,"type": 77},{"src": 27,"type": 78},{"src": 36,"type": 79},{"src": 38,"type": 81},{"src": 261,"type": 112},{"src": 11,"type": 113},{"src": 21,"type": 146},{"src": 37,"type": 147}],"errors": [{"src": 830,"name": "OutOfMemory"},{"src": 831,"name": "UnalignedMemory"}],"astNodes": [{"file": 4,"line": 525,"col": 4,"docs": " This function is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n","fields": [832,833]},{"file": 7,"line": 232,"col": 4,"docs": " This function invokes undefined behavior when `ok` is `false`.\n In Debug and ReleaseSafe modes, calls to this function are always\n generated, and the `unreachable` statement triggers a panic.\n In ReleaseFast and ReleaseSmall modes, calls to this function are\n optimized away, and in fact the optimizer is able to use the assertion\n in its heuristics.\n Inside a test block, it is best to use the `std.testing` module rather\n than this function, because this function may not detect a test failure\n in ReleaseFast and ReleaseSmall mode. Outside of a test block, this assert\n function is the correct function to use.\n","fields": [834]},{"file": 3,"line": 234,"col": 12,"fields": [835]},{"file": 3,"line": 485,"col": 12,"fields": [836,837,838,839,840]},{"file": 3,"line": 186,"col": 16,"fields": []},{"file": 3,"line": 392,"col": 8,"fields": [841,842,843,844,845]},{"file": 3,"line": 430,"col": 8,"fields": [846,847,848,849,850]},{"file": 3,"line": 518,"col": 12,"fields": [851]},{"file": 3,"line": 526,"col": 12,"fields": [852,853]},{"file": 3,"line": 535,"col": 12,"fields": [854,855]},{"file": 3,"line": 549,"col": 12,"fields": [856]},{"file": 3,"line": 470,"col": 0,"fields": [857,858]},{"file": 3,"line": 145,"col": 16,"fields": [859]},{"file": 3,"line": 169,"col": 16,"fields": [860]},{"file": 3,"line": 174,"col": 16,"fields": [861,862,863]},{"file": 3,"line": 245,"col": 8,"fields": [864,865]},{"file": 3,"line": 238,"col": 8,"fields": [866,867]},{"file": 3,"line": 351,"col": 8,"fields": [868]},{"file": 3,"line": 130,"col": 16,"fields": [869]},{"file": 3,"line": 165,"col": 16,"fields": [870]},{"file": 3,"line": 290,"col": 8,"fields": [871,872,873]},{"file": 5,"line": 317,"col": 4,"docs": " Copy all of source into dest at position 0.\n dest.len must be >= source.len.\n dest.ptr must be <= src.ptr.\n","fields": [874,875,876]},{"file": 3,"line": 311,"col": 8,"fields": [877,878]},{"file": 3,"line": 161,"col": 16,"fields": [879]},{"file": 3,"line": 97,"col": 8,"fields": [880,881]},{"file": 3,"line": 152,"col": 16,"fields": [882]},{"file": 3,"line": 126,"col": 12,"fields": [883]},{"file": 3,"line": 92,"col": 8,"fields": [884,885]},{"file": 3,"line": 357,"col": 8,"fields": [886,887]},{"file": 3,"line": 378,"col": 8,"fields": [888,889]},{"file": 3,"line": 190,"col": 16,"fields": [890]},{"file": 3,"line": 215,"col": 16,"fields": [891,892]},{"file": 3,"line": 372,"col": 8,"fields": [893,894]},{"file": 3,"line": 198,"col": 16,"fields": [895,896]},{"file": 6,"line": 777,"col": 4,"fields": [897]},{"file": 6,"line": 307,"col": 4,"fields": [898,899]},{"file": 3,"line": 338,"col": 8,"fields": [900,901]},{"file": 6,"line": 256,"col": 4,"docs": " Returns the smaller number. When one of the parameter's type's full range fits in the other,\n the return type is the smaller type.\n","fields": [902,903]},{"file": 3,"line": 345,"col": 8,"fields": [904,905]},{"file": 6,"line": 452,"col": 4,"fields": [906]},{"file": 6,"line": 910,"col": 4,"fields": [907]},{"file": 8,"line": 678,"col": 4,"fields": [908,909]},{"file": 3,"line": 84,"col": 8,"fields": [910]},{"file": 3,"line": 104,"col": 4,"fields": [911]},{"file": 3,"line": 516,"col": 8,"fields": [912]},{"file": 6,"line": 237,"col": 4,"docs": " Given two types, returns the smallest one which is capable of holding the\n full range of the minimum value.\n","fields": [913,914]},{"file": 3,"line": 77,"col": 8,"fields": [915]},{"file": 6,"line": 868,"col": 4,"fields": [916,917]},{"file": 3,"line": 67,"col": 27,"fields": [918,919,920]},{"file": 3,"line": 111,"col": 11,"fields": [921,922,923]},{"file": 3,"line": 13,"col": 19,"fields": [924,925,926,927,928]},{"file": 3,"line": 509,"col": 20,"fields": [929,930,931,932,933]},{"file": 0,"line": 0,"col": 0,"fields": []},{"file": 1,"line": 0,"col": 0,"fields": []},{"file": 2,"line": 0,"col": 0,"fields": []},{"file": 3,"line": 183,"col": 25,"fields": [934]},{"file": 3,"line": 0,"col": 0,"fields": []},{"file": 3,"line": 117,"col": 22,"fields": [935,936,937]},{"file": 5,"line": 15,"col": 22,"fields": [938,939]},{"file": 3,"line": 23,"col": 35,"fields": [940,941,942]},{"file": 3,"line": 51,"col": 31,"fields": [943,944,945]},{"file": 3,"line": 39,"col": 30,"fields": [946,947]},{"file": 4,"line": 0,"col": 0,"fields": []},{"file": 4,"line": 384,"col": 23,"fields": [948,949,950]},{"file": 4,"line": 107,"col": 17,"fields": [951,952,953,954]},{"file": 10,"line": 13,"col": 19,"fields": [955,956]},{"file": 4,"line": 51,"col": 23,"fields": [957,958]},{"file": 4,"line": 116,"col": 30,"fields": [959,960,961,962,963,964,965,966,967,968,969,970,971,972]},{"file": 4,"line": 458,"col": 24,"fields": [973,974]},{"file": 4,"line": 399,"col": 20,"fields": [975,976,977]},{"file": 4,"line": 58,"col": 26,"fields": [978,979,980,981]},{"file": 4,"line": 137,"col": 21,"fields": [982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006]},{"file": 4,"line": 392,"col": 21,"fields": [1007,1008]},{"file": 4,"line": 501,"col": 26,"fields": [1009,1010,1011]},{"file": 10,"line": 552,"col": 25,"fields": [1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062]},{"file": 5,"line": 0,"col": 0,"fields": []},{"file": 6,"line": 0,"col": 0,"fields": []},{"file": 7,"line": 0,"col": 0,"fields": []},{"file": 8,"line": 0,"col": 0,"fields": []},{"file": 9,"line": 2,"col": 0,"fields": []},{"file": 10,"line": 8,"col": 19,"fields": [1063,1064,1065]},{"file": 10,"line": 0,"col": 0,"fields": []},{"file": 10,"line": 17,"col": 24,"fields": [1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102]},{"file": 10,"line": 105,"col": 38,"fields": [1103,1104]},{"file": 10,"line": 76,"col": 35,"fields": [1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121]},{"file": 10,"line": 135,"col": 33,"fields": [1122,1123,1124,1125]},{"file": 4,"line": 464,"col": 25,"fields": [1126,1127,1128,1129,1130,1131,1132,1133]},{"file": 4,"line": 404,"col": 22,"fields": [1134,1135]},{"file": 4,"line": 235,"col": 23,"fields": [1136,1137,1138]},{"file": 4,"line": 205,"col": 22,"fields": [1139,1140,1141]},{"file": 4,"line": 249,"col": 27,"fields": [1142,1143]},{"file": 4,"line": 179,"col": 24,"fields": [1144,1145,1146,1147,1148,1149,1150]},{"file": 4,"line": 267,"col": 26,"fields": [1151,1152]},{"file": 4,"line": 218,"col": 32,"fields": [1153,1154,1155]},{"file": 4,"line": 332,"col": 28,"fields": [1156,1157,1158]},{"file": 4,"line": 292,"col": 22,"fields": [1159,1160,1161,1162]},{"file": 4,"line": 243,"col": 25,"fields": [1163]},{"file": 4,"line": 274,"col": 21,"fields": [1164,1165,1166,1167,1168]},{"file": 4,"line": 325,"col": 23,"fields": [1169,1170]},{"file": 4,"line": 173,"col": 22,"fields": [1171]},{"file": 4,"line": 284,"col": 27,"fields": [1172,1173,1174]},{"file": 4,"line": 226,"col": 28,"fields": [1175,1176,1177,1178]},{"file": 4,"line": 319,"col": 25,"fields": [1179]},{"file": 4,"line": 256,"col": 22,"fields": [1180,1181]},{"file": 4,"line": 309,"col": 19,"fields": [1182,1183,1184,1185,1186]},{"file": 4,"line": 301,"col": 22,"fields": [1187,1188,1189]},{"file": 4,"line": 166,"col": 20,"fields": [1190,1191]},{"file": 10,"line": 425,"col": 20,"fields": [1192,1193,1194]},{"file": 10,"line": 312,"col": 20,"fields": [1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214]},{"file": 10,"line": 95,"col": 30,"fields": [1215,1216]},{"file": 4,"line": 195,"col": 25,"fields": [1217,1218,1219,1220]},{"file": 4,"line": 339,"col": 25,"fields": [1221,1222,1223]},{"file": 10,"line": 894,"col": 26,"fields": [1224,1225,1226]},{"file": 10,"line": 436,"col": 28,"fields": [1227,1228,1229,1230,1231]},{"file": 10,"line": 456,"col": 28,"fields": [1232]},{"file": 4,"line": 346,"col": 31,"fields": [1233,1234,1235,1236,1237,1238,1239,1240]},{"file": 4,"line": 358,"col": 35,"fields": [1241,1242,1243]},{"file": 3,"line": 223,"col": 12,"docs": " The definitive™ way of using `ZeeAlloc`\n"},{"file": 3,"line": 117,"col": 8},{"file": 3,"line": 114,"col": 8},{"file": 3,"line": 454,"col": 8,"fields": [1244]},{"file": 3,"line": 112,"col": 8},{"file": 3,"line": 445,"col": 8,"fields": [1245,1246]},{"file": 3,"line": 224,"col": 8},{"file": 3,"line": 183,"col": 8},{"file": 3,"line": 462,"col": 8,"fields": [1247]},{"file": 3,"line": 23,"col": 8},{"file": 3,"line": 67,"col": 8},{"file": 3,"line": 51,"col": 8},{"file": 3,"line": 39,"col": 8},{"file": 3,"line": 509,"col": 4},{"file": 3,"line": 11,"col": 4},{"file": 3,"line": 13,"col": 4},{"file": 0,"line": 0,"col": 0},{"file": 0,"line": 1,"col": 0},{"file": 0,"line": 2,"col": 0},{"file": 4,"line": 96,"col": 4,"docs": " The code model puts constraints on the location of symbols and the size of code and data.\n The selection of a code model is a trade off on speed and restrictions that needs to be selected on a per application basis to meet its requirements.\n A slightly more detailed explanation can be found in (for example) the [System V Application Binary Interface (x86_64)](https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf) 3.5.1.\n\n This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 28,"col": 4},{"file": 4,"line": 384,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 10,"col": 4},{"file": 1,"line": 21,"col": 4},{"file": 1,"line": 16,"col": 4},{"file": 1,"line": 9,"col": 4},{"file": 4,"line": 51,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 3,"col": 4},{"file": 4,"line": 116,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 21,"col": 4,"docs": " Deprecated: use `std.Target.Cpu`.\n"},{"file": 4,"line": 458,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 107,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 509,"col": 4,"docs": " This function type is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 6,"col": 4,"docs": " Deprecated: use `std.Target.Os`.\n"},{"file": 4,"line": 399,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 58,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 12,"col": 4,"docs": " Deprecated: use `std.Target.Abi`.\n"},{"file": 1,"line": 24,"col": 4},{"file": 4,"line": 137,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 26,"col": 4},{"file": 4,"line": 78,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 22,"col": 4},{"file": 4,"line": 392,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 501,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 20,"col": 4},{"file": 1,"line": 8,"col": 4,"docs": " Deprecated: use `std.Target.cpu.arch`\n"},{"file": 1,"line": 2,"col": 4},{"file": 4,"line": 370,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 67,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 133,"col": 4},{"file": 4,"line": 15,"col": 4,"docs": " Deprecated: use `std.Target.ObjectFormat`.\n"},{"file": 1,"line": 5,"col": 4},{"file": 4,"line": 3,"col": 4,"docs": " Deprecated: use `std.Target`.\n"},{"file": 4,"line": 517,"col": 4,"docs": " This function type is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 4,"col": 4},{"file": 4,"line": 9,"col": 4,"docs": " Deprecated: use `std.Target.Cpu.Arch`.\n"},{"file": 1,"line": 25,"col": 4},{"file": 4,"line": 18,"col": 4,"docs": " Deprecated: use `std.Target.SubSystem`.\n"},{"file": 4,"line": 27,"col": 4,"docs": " `explicit_subsystem` is missing when the subsystem is automatically detected,\n so Zig standard library has the subsystem detection logic here. This should generally be\n used rather than `explicit_subsystem`.\n On non-Windows targets, this is `null`.\n"},{"file": 4,"line": 377,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 521,"col": 4,"docs": " This function is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 23,"col": 4},{"file": 1,"line": 27,"col": 4},{"file": 1,"line": 6,"col": 4},{"file": 2,"line": 53,"col": 4},{"file": 2,"line": 11,"col": 4},{"file": 2,"line": 32,"col": 4},{"file": 2,"line": 22,"col": 4},{"file": 2,"line": 15,"col": 4},{"file": 2,"line": 14,"col": 4},{"file": 2,"line": 52,"col": 4},{"file": 2,"line": 27,"col": 4},{"file": 2,"line": 2,"col": 4},{"file": 2,"line": 8,"col": 4},{"file": 2,"line": 3,"col": 4},{"file": 2,"line": 42,"col": 4},{"file": 2,"line": 56,"col": 4},{"file": 2,"line": 38,"col": 4},{"file": 2,"line": 39,"col": 4},{"file": 2,"line": 65,"col": 4},{"file": 2,"line": 41,"col": 4},{"file": 2,"line": 67,"col": 4},{"file": 2,"line": 4,"col": 4},{"file": 2,"line": 31,"col": 4},{"file": 2,"line": 48,"col": 4},{"file": 2,"line": 40,"col": 4},{"file": 2,"line": 10,"col": 4},{"file": 2,"line": 21,"col": 4},{"file": 2,"line": 64,"col": 4},{"file": 2,"line": 49,"col": 4},{"file": 2,"line": 9,"col": 4},{"file": 2,"line": 46,"col": 4},{"file": 2,"line": 43,"col": 4},{"file": 2,"line": 30,"col": 4},{"file": 2,"line": 29,"col": 4},{"file": 2,"line": 25,"col": 4},{"file": 2,"line": 50,"col": 4},{"file": 2,"line": 57,"col": 4},{"file": 2,"line": 20,"col": 4},{"file": 2,"line": 59,"col": 4},{"file": 2,"line": 7,"col": 4},{"file": 2,"line": 35,"col": 4},{"file": 2,"line": 36,"col": 4},{"file": 2,"line": 45,"col": 4},{"file": 2,"line": 63,"col": 4},{"file": 2,"line": 34,"col": 4},{"file": 2,"line": 33,"col": 4},{"file": 2,"line": 37,"col": 4},{"file": 2,"line": 62,"col": 4},{"file": 2,"line": 61,"col": 4},{"file": 2,"line": 54,"col": 4},{"file": 2,"line": 55,"col": 4},{"file": 2,"line": 44,"col": 4},{"file": 2,"line": 47,"col": 4},{"file": 2,"line": 70,"col": 4},{"file": 2,"line": 1,"col": 4},{"file": 2,"line": 5,"col": 4},{"file": 2,"line": 18,"col": 4},{"file": 2,"line": 13,"col": 4},{"file": 2,"line": 66,"col": 4},{"file": 2,"line": 19,"col": 4},{"file": 2,"line": 26,"col": 4},{"file": 2,"line": 58,"col": 4},{"file": 2,"line": 68,"col": 4},{"file": 2,"line": 17,"col": 4},{"file": 2,"line": 12,"col": 4},{"file": 2,"line": 69,"col": 4},{"file": 2,"line": 0,"col": 4},{"file": 2,"line": 23,"col": 4},{"file": 2,"line": 16,"col": 4},{"file": 2,"line": 60,"col": 4},{"file": 2,"line": 51,"col": 4},{"file": 2,"line": 6,"col": 4},{"file": 2,"line": 24,"col": 4},{"file": 3,"line": 203,"col": 16,"fields": [1248,1249]},{"file": 3,"line": 1,"col": 0},{"file": 3,"line": 9,"col": 0},{"file": 3,"line": 689,"col": 0,"fields": [1250,1251]},{"file": 3,"line": 746,"col": 0,"fields": [1252]},{"file": 3,"line": 6,"col": 0},{"file": 3,"line": 477,"col": 0},{"file": 3,"line": 0,"col": 0},{"file": 3,"line": 661,"col": 0,"fields": [1253]},{"file": 3,"line": 713,"col": 0,"fields": [1254]},{"file": 3,"line": 476,"col": 0,"fields": [1255,1256]},{"file": 3,"line": 5,"col": 0},{"file": 3,"line": 8,"col": 0},{"file": 3,"line": 576,"col": 0},{"file": 3,"line": 4,"col": 0},{"file": 3,"line": 2,"col": 0},{"file": 3,"line": 138,"col": 16,"fields": [1257]},{"file": 3,"line": 118,"col": 12},{"file": 3,"line": 119,"col": 12},{"file": 5,"line": 87,"col": 8,"docs": " `ptr` should be the return value of `create`, or otherwise\n have the same address and alignment property.\n","fields": [1258,1259]},{"file": 5,"line": 187,"col": 8,"docs": " This function requests a new byte size for an existing allocation,\n which can be larger, smaller, or the same size as the old memory\n allocation.\n This function is preferred over `shrink`, because it can fail, even\n when shrinking. This gives the allocator a chance to perform a\n cheap shrink operation if possible, or otherwise return OutOfMemory,\n indicating that the caller should keep their capacity, for example\n in `std.ArrayList.shrink`.\n If you need guaranteed success, call `shrink`.\n If `new_n` is 0, this is the same as `free` and it always succeeds.\n","fields": [1260,1261,1262]},{"file": 5,"line": 142,"col": 8,"docs": " Allocates an array of `n + 1` items of type `T` and sets the first `n`\n items to `undefined` and the last item to `sentinel`. Depending on the\n Allocator implementation, it may be required to call `free` once the\n memory is no longer needed, to avoid a resource leak. If the\n `Allocator` implementation is unknown, then correct code will\n call `free` when done.\n\n For allocating a single item, see `create`.\n\n Deprecated; use `allocWithOptions`.\n","fields": [1263,1264,1265,1266]},{"file": 5,"line": 230,"col": 8,"docs": " Prefer calling realloc to shrink if you can tolerate failure, such as\n in an ArrayList data structure with a storage capacity.\n Shrink always succeeds, and `new_n` must be <= `old_mem.len`.\n Returned slice has same alignment as old_mem.\n Shrinking to 0 is the same as calling `free`.\n","fields": [1267,1268,1269]},{"file": 5,"line": 16,"col": 8},{"file": 5,"line": 241,"col": 8,"docs": " This is the same as `shrink`, except caller may additionally request\n a new alignment, which must be smaller or the same as the old\n allocation.\n","fields": [1270,1271,1272,1273]},{"file": 5,"line": 146,"col": 8,"fields": [1274,1275,1276,1277]},{"file": 5,"line": 103,"col": 8,"docs": " Allocates an array of `n` items of type `T` and sets all the\n items to `undefined`. Depending on the Allocator\n implementation, it may be required to call `free` once the\n memory is no longer needed, to avoid a resource leak. If the\n `Allocator` implementation is unknown, then correct code will\n call `free` when done.\n\n For allocating a single item, see `create`.\n","fields": [1278,1279,1280]},{"file": 5,"line": 198,"col": 8,"docs": " This is the same as `realloc`, except caller may additionally request\n a new alignment, which can be larger, smaller, or the same as the old\n allocation.\n","fields": [1281,1282,1283,1284]},{"file": 5,"line": 283,"col": 8,"docs": " Copies `m` to newly allocated memory. Caller owns the memory.\n","fields": [1285,1286,1287]},{"file": 5,"line": 290,"col": 8,"docs": " Copies `m` to newly allocated memory, with a null-terminated element. Caller owns the memory.\n","fields": [1288,1289,1290]},{"file": 5,"line": 271,"col": 8,"docs": " Free an array allocated with `alloc`. To free a single item,\n see `destroy`.\n","fields": [1291,1292]},{"file": 5,"line": 107,"col": 8,"fields": [1293,1294,1295,1296,1297]},{"file": 5,"line": 79,"col": 8,"docs": " Returns a pointer to undefined memory.\n Call `destroy` with the result to free the memory.\n","fields": [1298,1299]},{"file": 5,"line": 124,"col": 4,"fields": [1300,1301,1302]},{"file": 4,"line": 553,"col": 0},{"file": 4,"line": 552,"col": 0},{"file": 10,"line": 17,"col": 12},{"file": 10,"line": 105,"col": 12},{"file": 10,"line": 76,"col": 12,"docs": " Based on NTDDI version constants from\n https://docs.microsoft.com/en-us/cpp/porting/modifying-winver-and-win32-winnt\n"},{"file": 10,"line": 135,"col": 12,"docs": " The version ranges here represent the minimum OS version to be supported\n and the maximum OS version to be supported. The default values represent\n the range that the Zig Standard Library bases its abstractions on.\n\n The minimum version of the range is the main setting to tweak for a target.\n Usually, the maximum target OS version will remain the default, which is\n the latest released version of the OS.\n\n To test at compile time if the target is guaranteed to support a given OS feature,\n one should check that the minimum version of the range is greater than or equal to\n the version the feature was introduced in.\n\n To test at compile time if the target certainly will not support a given OS feature,\n one should check that the maximum version of the range is less than the version the\n feature was introduced in.\n\n If neither of these cases apply, a runtime check should be used to determine if the\n target supports a given OS feature.\n\n Binaries built with a given maximum version will continue to function on newer operating system\n versions. However, such a binary may not take full advantage of the newer operating system APIs.\n"},{"file": 10,"line": 250,"col": 12,"fields": [1303]},{"file": 10,"line": 243,"col": 12,"fields": [1304]},{"file": 4,"line": 464,"col": 8},{"file": 4,"line": 404,"col": 8},{"file": 4,"line": 434,"col": 8,"fields": [1305,1306,1307,1308]},{"file": 4,"line": 425,"col": 8,"fields": [1309]},{"file": 4,"line": 415,"col": 8,"fields": [1310,1311]},{"file": 4,"line": 235,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 205,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 249,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 179,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 267,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 218,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 332,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 292,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 263,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 243,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 274,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 325,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 173,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 284,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 226,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 319,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 256,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 309,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 301,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 166,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 10,"line": 826,"col": 16,"docs": " Returns a name that matches the lib/std/target/* directory name.\n","fields": [1312]},{"file": 10,"line": 605,"col": 16,"fields": [1313]},{"file": 10,"line": 848,"col": 16,"docs": " All CPU features Zig is aware of, sorted lexicographically by name.\n","fields": [1314]},{"file": 10,"line": 764,"col": 16,"fields": [1315]},{"file": 10,"line": 705,"col": 16,"fields": [1316]},{"file": 10,"line": 612,"col": 16,"fields": [1317]},{"file": 10,"line": 640,"col": 16,"fields": [1318,1319]},{"file": 10,"line": 871,"col": 16,"docs": " All processors Zig is aware of, sorted lexicographically by name.\n","fields": [1320]},{"file": 10,"line": 649,"col": 16,"fields": [1321]},{"file": 10,"line": 626,"col": 16,"fields": [1322]},{"file": 10,"line": 619,"col": 16,"fields": [1323]},{"file": 10,"line": 633,"col": 16,"fields": [1324]},{"file": 5,"line": 656,"col": 4},{"file": 5,"line": 749,"col": 4,"docs": " Same as `span`, except when there is both a sentinel and an array\n length or slice length, scans the memory for the sentinel value\n rather than using the length.\n","fields": [1325]},{"file": 5,"line": 343,"col": 4,"fields": [1326,1327,1328]},{"file": 5,"line": 1219,"col": 4,"docs": " Writes a twos-complement big-endian integer to memory.\n Asserts that buffer.len >= T.bit_count / 8.\n The bit count of T must be divisible by 8.\n Any extra bytes in buffer before writing the integer are set to zero. To\n avoid the branch to check for extra buffer bytes, use writeIntBig instead.\n","fields": [1329,1330,1331]},{"file": 5,"line": 1760,"col": 4,"docs": " In-place order reversal of a slice\n","fields": [1332,1333]},{"file": 5,"line": 1076,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n Assumes the endianness of memory is native. This means the function can\n simply pointer cast memory.\n","fields": [1334,1335]},{"file": 5,"line": 1897,"col": 4,"docs": "Given any value, returns a copy of its bytes in an array.\n","fields": [1336]},{"file": 5,"line": 1777,"col": 4,"docs": " In-place rotation of the values in an array ([0 1 2 3] becomes [1 2 3 0] if we rotate by 1)\n Assumes 0 <= amount <= items.len\n","fields": [1337,1338,1339]},{"file": 5,"line": 778,"col": 4,"docs": " Takes a pointer to an array, an array, a vector, a sentinel-terminated pointer,\n or a slice, and returns the length.\n In the case of a sentinel-terminated array, it uses the array length.\n For C pointers it assumes it is a pointer-to-many with a 0 sentinel.\n","fields": [1340]},{"file": 5,"line": 2082,"col": 4,"fields": [1341]},{"file": 5,"line": 1975,"col": 4,"docs": "Given a pointer to an array of bytes, returns a value of the specified type backed by a\n copy of those bytes.\n","fields": [1342,1343]},{"file": 5,"line": 1168,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, but\n the integer bit width must be divisible by 8.\n This function stores in foreign endian, which means it does a @byteSwap first.\n","fields": [1344,1345,1346]},{"file": 5,"line": 655,"col": 4},{"file": 5,"line": 1374,"col": 4},{"file": 5,"line": 895,"col": 4,"docs": " Deprecated, use `Allocator.dupeZ`.\n","fields": [1347,1348,1349]},{"file": 5,"line": 1465,"col": 4},{"file": 5,"line": 1741,"col": 4,"fields": [1350,1351]},{"file": 5,"line": 1408,"col": 4,"fields": [1352,1353,1354]},{"file": 5,"line": 2003,"col": 4,"fields": [1355,1356]},{"file": 5,"line": 944,"col": 4,"fields": [1357,1358,1359,1360]},{"file": 5,"line": 1236,"col": 4},{"file": 5,"line": 977,"col": 4,"fields": [1361,1362,1363]},{"file": 5,"line": 1185,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, but\n the integer bit width must be divisible by 8.\n","fields": [1364,1365,1366,1367]},{"file": 5,"line": 2173,"col": 4,"docs": " Round an address up to the nearest aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [1368,1369,1370]},{"file": 5,"line": 1753,"col": 4,"fields": [1371,1372,1373]},{"file": 5,"line": 935,"col": 4,"docs": " Linear search for the last index of a scalar value inside a slice.\n","fields": [1374,1375,1376]},{"file": 5,"line": 1199,"col": 4,"docs": " Writes a twos-complement little-endian integer to memory.\n Asserts that buf.len >= T.bit_count / 8.\n The bit count of T must be divisible by 8.\n Any extra bytes in buffer after writing the integer are set to zero. To\n avoid the branch to check for extra buffer bytes, use writeIntLittle\n instead.\n","fields": [1377,1378,1379]},{"file": 5,"line": 1729,"col": 4,"fields": [1380,1381]},{"file": 5,"line": 1049,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n Assumes the endianness of memory is native. This means the function can\n simply pointer cast memory.\n","fields": [1382,1383]},{"file": 5,"line": 967,"col": 4,"fields": [1384,1385,1386,1387]},{"file": 5,"line": 1095,"col": 4},{"file": 5,"line": 1172,"col": 4},{"file": 5,"line": 826,"col": 4,"docs": " Takes a pointer to an array, an array, a sentinel-terminated pointer,\n or a slice, and returns the length.\n In the case of a sentinel-terminated array, it scans the array\n for a sentinel and uses that for the length, rather than using the array length.\n For C pointers it assumes it is a pointer-to-many with a 0 sentinel.\n","fields": [1388]},{"file": 5,"line": 900,"col": 4,"docs": " Remove values from the beginning of a slice.\n","fields": [1389,1390,1391]},{"file": 5,"line": 2200,"col": 4,"docs": " Round an address up to the previous aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [1392,1393,1394]},{"file": 5,"line": 1857,"col": 4,"docs": " Given a pointer to a single item, returns a slice of the underlying bytes, preserving constness.\n","fields": [1395]},{"file": 5,"line": 1026,"col": 4,"docs": " Reads an integer from memory with size equal to bytes.len.\n T specifies the return type, which must be large enough to store\n the result.\n","fields": [1396,1397,1398]},{"file": 5,"line": 2210,"col": 4,"docs": " Given an address and an alignment, return true if the address is a multiple of the alignment\n The alignment must be a power of 2 and greater than 0.\n","fields": [1399,1400]},{"file": 5,"line": 1252,"col": 4,"docs": " Writes a twos-complement integer to memory, with the specified endianness.\n Asserts that buf.len >= T.bit_count / 8.\n The bit count of T must be evenly divisible by 8.\n Any extra bytes in buffer not part of the integer are set to zero, with\n respect to endianness. To avoid the branch to check for extra buffer bytes,\n use writeInt instead.\n","fields": [1401,1402,1403,1404]},{"file": 5,"line": 890,"col": 4,"docs": " Deprecated, use `Allocator.dupe`.\n","fields": [1405,1406,1407]},{"file": 5,"line": 1493,"col": 4,"docs": " Naively combines a series of slices with a separator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [1408,1409,1410]},{"file": 5,"line": 1538,"col": 4,"docs": " Copies each T from slices into a new slice that exactly holds all the elements.\n","fields": [1411,1412,1413]},{"file": 5,"line": 1932,"col": 4,"docs": "Given a pointer to an array of bytes, returns a pointer to a value of the specified type\n backed by those bytes, preserving constness.\n","fields": [1414,1415]},{"file": 5,"line": 1807,"col": 4,"docs": " Converts an integer from specified endianness to host endianness.\n","fields": [1416,1417,1418]},{"file": 5,"line": 995,"col": 4,"fields": [1419,1420,1421,1422]},{"file": 5,"line": 1823,"col": 4,"docs": " Converts an integer which has host endianness to little endian.\n","fields": [1423,1424]},{"file": 5,"line": 2194,"col": 4,"docs": " Round an address up to the previous aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [1425,1426]},{"file": 5,"line": 1114,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n","fields": [1427,1428,1429]},{"file": 5,"line": 1815,"col": 4,"docs": " Converts an integer which has host endianness to the desired endianness.\n","fields": [1430,1431,1432]},{"file": 5,"line": 873,"col": 4,"fields": [1433,1434,1435]},{"file": 5,"line": 354,"col": 4,"docs": " Generally, Zig users are encouraged to explicitly initialize all fields of a struct explicitly rather than using this function.\n However, it is recognized that there are sometimes use cases for initializing all fields to a \"zero\" value. For example, when\n interfacing with a C API where this practice is more common and relied upon. If you are performing code review and see this\n function used, examine closely - it may be a code smell.\n Zero initializes the type.\n This can be used to zero initialize a any type for which it makes sense. Structs will be initialized recursively.\n","fields": [1436]},{"file": 5,"line": 956,"col": 4,"fields": [1437,1438,1439]},{"file": 5,"line": 592,"col": 4,"fields": [1440,1441,1442]},{"file": 5,"line": 1426,"col": 4},{"file": 5,"line": 1791,"col": 4,"docs": " Converts a little-endian integer to host endianness.\n","fields": [1443,1444]},{"file": 5,"line": 1799,"col": 4,"docs": " Converts a big-endian integer to host endianness.\n","fields": [1445,1446]},{"file": 5,"line": 2167,"col": 4,"docs": " Round an address up to the nearest aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [1447,1448]},{"file": 5,"line": 930,"col": 4,"docs": " Linear search for the index of a scalar value inside a slice.\n","fields": [1449,1450,1451]},{"file": 5,"line": 1831,"col": 4,"docs": " Converts an integer which has host endianness to big endian.\n","fields": [1452,1453]},{"file": 5,"line": 1160,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, and\n accepts any integer bit width.\n This function stores in native endian, which means it is implemented as a simple\n memory store.\n","fields": [1454,1455,1456]},{"file": 5,"line": 15,"col": 4},{"file": 5,"line": 952,"col": 4,"fields": [1457,1458,1459]},{"file": 5,"line": 1066,"col": 4},{"file": 5,"line": 721,"col": 4,"docs": " Takes a pointer to an array, a sentinel-terminated pointer, or a slice, and\n returns a slice. If there is a sentinel on the input type, there will be a\n sentinel on the output type. The constness of the output type matches\n the constness of the input type.\n\n When there is both a sentinel and an array length or slice length, the\n length value is used instead of the sentinel.\n","fields": [1460]},{"file": 5,"line": 614,"col": 4,"docs": " Returns true if lhs < rhs, false otherwise\n","fields": [1461,1462,1463]},{"file": 5,"line": 1417,"col": 4,"fields": [1464,1465,1466]},{"file": 5,"line": 914,"col": 4,"docs": " Remove values from the beginning and end of a slice.\n","fields": [1467,1468,1469]},{"file": 5,"line": 1305,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that are not\n any of the bytes in `delimiter_bytes`.\n tokenize(\"   abc def    ghi  \", \" \")\n Will return slices for \"abc\", \"def\", \"ghi\", null, in that order.\n If `buffer` is empty, the iterator will return null.\n If `delimiter_bytes` does not exist in buffer,\n the iterator will return `buffer`, null, in that order.\n See also the related function `split`.\n","fields": [1470,1471]},{"file": 5,"line": 638,"col": 4,"docs": " Compares two slices and returns the index of the first inequality.\n Returns null if the slices are equal.\n","fields": [1472,1473,1474]},{"file": 5,"line": 1057,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n Assumes the endianness of memory is foreign, so it must byte-swap.\n","fields": [1475,1476]},{"file": 5,"line": 1241,"col": 4},{"file": 5,"line": 1090,"col": 4},{"file": 5,"line": 2214,"col": 4,"fields": [1477,1478,1479]},{"file": 5,"line": 907,"col": 4,"docs": " Remove values from the end of a slice.\n","fields": [1480,1481,1482]},{"file": 5,"line": 500,"col": 4,"fields": [1483,1484]},{"file": 5,"line": 1177,"col": 4},{"file": 5,"line": 521,"col": 4,"docs": " Initializes all fields of the struct with their default value, or zero values if no default value is present.\n If the field is present in the provided initial values, it will have that value instead.\n Structs are initialized recursively.\n","fields": [1485,1486]},{"file": 5,"line": 663,"col": 4,"docs": " Takes a pointer to an array, a sentinel-terminated pointer, or a slice, and\n returns a slice. If there is a sentinel on the input type, there will be a\n sentinel on the output type. The constness of the output type matches\n the constness of the input type. `[*c]` pointers are assumed to be 0-terminated,\n and assumed to not allow null.\n","fields": [1487]},{"file": 5,"line": 1365,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that\n are separated by bytes in `delimiter`.\n split(\"abc|def||ghi\", \"|\")\n will return slices for \"abc\", \"def\", \"\", \"ghi\", null, in that order.\n If `delimiter` does not exist in buffer,\n the iterator will return `buffer`, null, in that order.\n The delimiter length must not be zero.\n See also the related function `tokenize`.\n","fields": [1488,1489]},{"file": 5,"line": 10,"col": 4},{"file": 5,"line": 984,"col": 4,"docs": " Find the index in a slice of a sub-slice, searching from the end backwards.\n To start looking at a different index, slice the haystack first.\n TODO is there even a better algorithm for this?\n","fields": [1490,1491,1492]},{"file": 5,"line": 1061,"col": 4},{"file": 5,"line": 1086,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n Assumes the endianness of memory is foreign, so it must byte-swap.\n","fields": [1493,1494]},{"file": 5,"line": 330,"col": 4,"docs": " Copy all of source into dest at position 0.\n dest.len must be >= source.len.\n dest.ptr must be >= src.ptr.\n","fields": [1495,1496,1497]},{"file": 5,"line": 882,"col": 4,"docs": " Returns true if all elements in a slice are equal to the scalar value provided\n","fields": [1498,1499,1500]},{"file": 5,"line": 627,"col": 4,"docs": " Compares two slices and returns whether they are equal.\n","fields": [1501,1502,1503]},{"file": 5,"line": 1103,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n","fields": [1504,1505,1506]},{"file": 5,"line": 298,"col": 0},{"file": 5,"line": 302,"col": 0,"fields": [1507,1508,1509,1510,1511]},{"file": 5,"line": 1989,"col": 0,"fields": [1512,1513]},{"file": 5,"line": 1915,"col": 0,"fields": [1514,1515]},{"file": 5,"line": 1641,"col": 0,"fields": []},{"file": 5,"line": 6,"col": 0},{"file": 5,"line": 2,"col": 0},{"file": 5,"line": 4,"col": 0},{"file": 5,"line": 1838,"col": 0,"fields": [1516]},{"file": 5,"line": 3,"col": 0},{"file": 5,"line": 1,"col": 0},{"file": 5,"line": 8,"col": 0},{"file": 5,"line": 2072,"col": 0,"fields": [1517]},{"file": 5,"line": 7,"col": 0},{"file": 5,"line": 1590,"col": 0,"fields": []},{"file": 5,"line": 305,"col": 0,"fields": [1518,1519,1520,1521,1522]},{"file": 5,"line": 0,"col": 0},{"file": 5,"line": 5,"col": 0},{"file": 6,"line": 153,"col": 4},{"file": 6,"line": 150,"col": 4},{"file": 6,"line": 151,"col": 4},{"file": 6,"line": 194,"col": 4},{"file": 6,"line": 154,"col": 4},{"file": 6,"line": 87,"col": 4},{"file": 6,"line": 162,"col": 4},{"file": 6,"line": 179,"col": 4},{"file": 6,"line": 66,"col": 4},{"file": 6,"line": 560,"col": 4},{"file": 6,"line": 42,"col": 4},{"file": 6,"line": 416,"col": 4,"docs": " Rotates right. Only unsigned values can be rotated.\n Negative shift values results in shift modulo the bit count.\n","fields": [1523,1524,1525]},{"file": 6,"line": 686,"col": 4,"docs": " Returns the absolute value of the integer parameter.\n Result is an unsigned integer.\n","fields": [1526]},{"file": 6,"line": 174,"col": 4},{"file": 6,"line": 82,"col": 4},{"file": 6,"line": 979,"col": 4,"docs": " See also `CompareOperator`.\n"},{"file": 6,"line": 156,"col": 4},{"file": 6,"line": 70,"col": 4},{"file": 6,"line": 592,"col": 4,"fields": [1527,1528,1529]},{"file": 6,"line": 822,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two).\n Only unsigned integers can be used. Zero is not an allowed input.\n If the value doesn't fit, returns an error.\n","fields": [1530,1531]},{"file": 6,"line": 967,"col": 4,"fields": [1532,1533,1534]},{"file": 6,"line": 193,"col": 4},{"file": 6,"line": 75,"col": 4},{"file": 6,"line": 388,"col": 4,"docs": " Shifts right. Overflowed bits are truncated.\n A negative shift amount results in a left shift.\n","fields": [1535,1536,1537]},{"file": 6,"line": 190,"col": 4},{"file": 6,"line": 197,"col": 4},{"file": 6,"line": 46,"col": 4},{"file": 6,"line": 744,"col": 4,"docs": " Cast an integer to a different integer type. If the value doesn't fit,\n return an error.\n","fields": [1538,1539]},{"file": 6,"line": 35,"col": 4},{"file": 6,"line": 26,"col": 4,"docs": " 2/sqrt(π)\n"},{"file": 6,"line": 191,"col": 4},{"file": 6,"line": 158,"col": 4},{"file": 6,"line": 201,"col": 4},{"file": 6,"line": 138,"col": 4,"fields": []},{"file": 6,"line": 94,"col": 4},{"file": 6,"line": 98,"col": 4},{"file": 6,"line": 341,"col": 4,"fields": [1540,1541,1542]},{"file": 6,"line": 192,"col": 4},{"file": 6,"line": 894,"col": 4,"fields": [1543,1544]},{"file": 6,"line": 160,"col": 4},{"file": 6,"line": 638,"col": 4,"fields": [1545,1546,1547]},{"file": 6,"line": 50,"col": 4},{"file": 6,"line": 32,"col": 4,"docs": " 1/sqrt(2)\n"},{"file": 6,"line": 1028,"col": 4,"docs": " Given two numbers, this function returns the order they are with respect to each other.\n","fields": [1548,1549]},{"file": 6,"line": 198,"col": 4},{"file": 6,"line": 183,"col": 4},{"file": 6,"line": 196,"col": 4},{"file": 6,"line": 45,"col": 4},{"file": 6,"line": 84,"col": 4},{"file": 6,"line": 176,"col": 4},{"file": 6,"line": 60,"col": 4},{"file": 6,"line": 76,"col": 4},{"file": 6,"line": 48,"col": 4},{"file": 6,"line": 152,"col": 4},{"file": 6,"line": 200,"col": 4},{"file": 6,"line": 315,"col": 4,"fields": [1550,1551,1552]},{"file": 6,"line": 177,"col": 4},{"file": 6,"line": 146,"col": 4,"fields": []},{"file": 6,"line": 97,"col": 4},{"file": 6,"line": 54,"col": 4},{"file": 6,"line": 167,"col": 4},{"file": 6,"line": 17,"col": 4,"docs": " log10(e)\n"},{"file": 6,"line": 52,"col": 4},{"file": 6,"line": 171,"col": 4},{"file": 6,"line": 186,"col": 4},{"file": 6,"line": 85,"col": 4},{"file": 6,"line": 873,"col": 4,"fields": [1553,1554]},{"file": 6,"line": 170,"col": 4},{"file": 6,"line": 81,"col": 4},{"file": 6,"line": 5,"col": 4,"docs": " Euler's number (e)\n"},{"file": 6,"line": 810,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two).\n Only unsigned integers can be used. Zero is not an allowed input.\n Result is a type with 1 more bit than the input type.\n","fields": [1555,1556]},{"file": 6,"line": 55,"col": 4},{"file": 6,"line": 182,"col": 4},{"file": 6,"line": 169,"col": 4},{"file": 6,"line": 355,"col": 4,"fields": [1557,1558,1559]},{"file": 6,"line": 88,"col": 4},{"file": 6,"line": 157,"col": 4},{"file": 6,"line": 73,"col": 4},{"file": 6,"line": 63,"col": 4},{"file": 6,"line": 49,"col": 4},{"file": 6,"line": 159,"col": 4},{"file": 6,"line": 1041,"col": 4,"docs": " See also `Order`.\n"},{"file": 6,"line": 57,"col": 4},{"file": 6,"line": 661,"col": 4,"fields": [1560,1561,1562]},{"file": 6,"line": 72,"col": 4},{"file": 6,"line": 23,"col": 4,"docs": " ln(10)\n"},{"file": 6,"line": 90,"col": 4},{"file": 6,"line": 346,"col": 4,"fields": [1563,1564,1565]},{"file": 6,"line": 209,"col": 4,"fields": [1566]},{"file": 6,"line": 69,"col": 4},{"file": 6,"line": 175,"col": 4},{"file": 6,"line": 56,"col": 4},{"file": 6,"line": 782,"col": 4,"fields": [1567,1568]},{"file": 6,"line": 180,"col": 4},{"file": 6,"line": 64,"col": 4},{"file": 6,"line": 43,"col": 4},{"file": 6,"line": 187,"col": 4},{"file": 6,"line": 61,"col": 4},{"file": 6,"line": 39,"col": 4},{"file": 6,"line": 463,"col": 4,"fields": [1569,1570]},{"file": 6,"line": 78,"col": 4},{"file": 6,"line": 435,"col": 4,"docs": " Rotates left. Only unsigned values can be rotated.\n Negative shift values results in shift modulo the bit count.\n","fields": [1571,1572,1573]},{"file": 6,"line": 29,"col": 4,"docs": " sqrt(2)\n"},{"file": 6,"line": 185,"col": 4},{"file": 6,"line": 134,"col": 4,"fields": []},{"file": 6,"line": 917,"col": 4,"fields": [1574]},{"file": 6,"line": 351,"col": 4,"fields": [1575]},{"file": 6,"line": 91,"col": 4},{"file": 6,"line": 769,"col": 4,"docs": " Align cast a pointer but return an error if it's the wrong alignment\n","fields": [1576,1577]},{"file": 6,"line": 58,"col": 4},{"file": 6,"line": 165,"col": 4},{"file": 6,"line": 161,"col": 4},{"file": 6,"line": 38,"col": 4},{"file": 6,"line": 336,"col": 4,"fields": [1578,1579,1580]},{"file": 6,"line": 36,"col": 4},{"file": 6,"line": 613,"col": 4,"fields": [1581,1582,1583]},{"file": 6,"line": 721,"col": 4,"docs": " Returns the negation of the integer parameter.\n Result is a signed integer.\n","fields": [1584]},{"file": 6,"line": 164,"col": 4},{"file": 6,"line": 79,"col": 4},{"file": 6,"line": 37,"col": 4},{"file": 6,"line": 51,"col": 4},{"file": 6,"line": 106,"col": 4,"fields": [1585]},{"file": 6,"line": 168,"col": 4},{"file": 6,"line": 130,"col": 4,"fields": []},{"file": 6,"line": 1064,"col": 4,"docs": " This function does the same thing as comparison operators, however the\n operator is a runtime-known enum value. Works on any operands that\n support comparison operators.\n","fields": [1586,1587,1588]},{"file": 6,"line": 362,"col": 4,"docs": " Shifts left. Overflowed bits are truncated.\n A negative shift amount results in a right shift.\n","fields": [1589,1590,1591]},{"file": 6,"line": 20,"col": 4,"docs": " ln(2)\n"},{"file": 6,"line": 203,"col": 4},{"file": 6,"line": 44,"col": 4},{"file": 6,"line": 67,"col": 4},{"file": 6,"line": 96,"col": 4},{"file": 6,"line": 142,"col": 4,"fields": []},{"file": 6,"line": 93,"col": 4},{"file": 6,"line": 163,"col": 4},{"file": 6,"line": 189,"col": 4},{"file": 6,"line": 166,"col": 4},{"file": 6,"line": 173,"col": 4},{"file": 6,"line": 195,"col": 4},{"file": 6,"line": 100,"col": 4,"fields": [1592,1593,1594,1595]},{"file": 6,"line": 155,"col": 4},{"file": 6,"line": 222,"col": 4,"fields": [1596]},{"file": 6,"line": 11,"col": 4,"docs": " Circle constant (τ)\n"},{"file": 6,"line": 181,"col": 4},{"file": 6,"line": 188,"col": 4},{"file": 6,"line": 766,"col": 4},{"file": 6,"line": 8,"col": 4,"docs": " Archimedes' constant (π)\n"},{"file": 6,"line": 14,"col": 4,"docs": " log2(e)\n"},{"file": 6,"line": 172,"col": 4},{"file": 6,"line": 538,"col": 4,"fields": [1597]},{"file": 6,"line": 571,"col": 4,"fields": [1598,1599,1600]},{"file": 6,"line": 178,"col": 4},{"file": 6,"line": 184,"col": 4},{"file": 6,"line": 566,"col": 0,"fields": []},{"file": 6,"line": 603,"col": 0,"fields": []},{"file": 6,"line": 856,"col": 0,"fields": []},{"file": 6,"line": 1,"col": 0},{"file": 6,"line": 649,"col": 0,"fields": []},{"file": 6,"line": 839,"col": 0,"fields": []},{"file": 6,"line": 672,"col": 0,"fields": []},{"file": 6,"line": 798,"col": 0,"fields": []},{"file": 6,"line": 531,"col": 0,"fields": []},{"file": 6,"line": 626,"col": 0,"fields": []},{"file": 6,"line": 2,"col": 0},{"file": 6,"line": 0,"col": 0},{"file": 6,"line": 555,"col": 0,"fields": []},{"file": 6,"line": 582,"col": 0,"fields": []},{"file": 7,"line": 40,"col": 4},{"file": 7,"line": 431,"col": 4},{"file": 7,"line": 1715,"col": 4,"docs": " Attaches a global SIGSEGV handler which calls @panic(\"segmentation fault\");\n","fields": []},{"file": 7,"line": 160,"col": 4,"docs": " Returns a slice with the same pointer as addresses, with a potentially smaller len.\n On Windows, when first_address is not null, we ask for at least 32 stack frames,\n and then try to find the first address. If addresses.len is more than 32, we\n capture that many stack frames exactly, and then look for the first address,\n chopping off the irrelevant frames and shifting so that the returned addresses pointer\n equals the passed in addresses pointer.\n","fields": [1601,1602]},{"file": 7,"line": 411,"col": 4,"fields": [1603,1604,1605,1606]},{"file": 7,"line": 113,"col": 4,"docs": " Tries to print the current stack trace to stderr, unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [1607]},{"file": 7,"line": 67,"col": 4,"fields": []},{"file": 7,"line": 1696,"col": 4,"docs": " Whether or not the current target can print useful debug information when a segfault occurs.\n"},{"file": 7,"line": 95,"col": 4,"fields": []},{"file": 7,"line": 396,"col": 4,"fields": [1608,1609,1610,1611]},{"file": 7,"line": 204,"col": 4,"docs": " Tries to print a stack trace to stderr, unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [1612]},{"file": 7,"line": 1087,"col": 4},{"file": 7,"line": 1701,"col": 4},{"file": 7,"line": 317,"col": 4,"fields": [1613,1614,1615,1616,1617]},{"file": 7,"line": 19,"col": 4},{"file": 7,"line": 1329,"col": 4},{"file": 7,"line": 86,"col": 4,"fields": []},{"file": 7,"line": 236,"col": 4,"fields": [1618,1619]},{"file": 7,"line": 567,"col": 4,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353\n","fields": [1620,1621,1622,1623]},{"file": 7,"line": 337,"col": 4},{"file": 7,"line": 859,"col": 4,"docs": " This takes ownership of elf_file: users of this function should not close\n it themselves, even on error.\n TODO resources https://github.com/ziglang/zig/issues/4353\n TODO it's weird to take ownership even on error, rework this code.\n","fields": [1624,1625]},{"file": 7,"line": 645,"col": 4},{"file": 7,"line": 254,"col": 4,"fields": [1626,1627,1628,1629]},{"file": 7,"line": 1706,"col": 4,"fields": []},{"file": 7,"line": 24,"col": 4},{"file": 7,"line": 134,"col": 4,"docs": " Tries to print the stack trace starting from the supplied base pointer to stderr,\n unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [1630,1631]},{"file": 7,"line": 1838,"col": 4,"fields": [1632]},{"file": 7,"line": 79,"col": 4,"fields": []},{"file": 7,"line": 22,"col": 4},{"file": 7,"line": 652,"col": 4,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353\n","fields": [1633]},{"file": 7,"line": 60,"col": 4,"fields": [1634,1635]},{"file": 7,"line": 21,"col": 4},{"file": 7,"line": 313,"col": 0},{"file": 7,"line": 248,"col": 0},{"file": 7,"line": 1804,"col": 0,"fields": [1636]},{"file": 7,"line": 9,"col": 0},{"file": 7,"line": 245,"col": 0,"docs": " Non-zero whenever the program triggered a panic.\n The counter is incremented/decremented atomically.\n"},{"file": 7,"line": 5,"col": 0},{"file": 7,"line": 931,"col": 0,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353\n This takes ownership of coff_file: users of this function should not close\n it themselves, even on error.\n TODO it's weird to take ownership even on error, rework this code.\n","fields": [1637,1638]},{"file": 7,"line": 832,"col": 0,"fields": [1639,1640]},{"file": 7,"line": 315,"col": 0},{"file": 7,"line": 8,"col": 0},{"file": 7,"line": 1050,"col": 0},{"file": 7,"line": 1317,"col": 0},{"file": 7,"line": 1068,"col": 0,"docs": " `file` is expected to have been opened with .intended_io_mode == .blocking.\n Takes ownership of file, even on error.\n TODO it's weird to take ownership even on error, rework this code.\n","fields": [1641]},{"file": 7,"line": 4,"col": 0},{"file": 7,"line": 312,"col": 0},{"file": 7,"line": 14,"col": 0},{"file": 7,"line": 15,"col": 0},{"file": 7,"line": 11,"col": 0},{"file": 7,"line": 314,"col": 0},{"file": 7,"line": 311,"col": 0},{"file": 7,"line": 6,"col": 0},{"file": 7,"line": 16,"col": 0},{"file": 7,"line": 1016,"col": 0,"fields": [1642,1643]},{"file": 7,"line": 252,"col": 12,"docs": " Counts how many times the panic handler is invoked by this thread.\n This is used to catch and handle panics triggered by the panic handler.\n"},{"file": 7,"line": 597,"col": 0,"fields": [1644,1645,1646,1647,1648,1649,1650]},{"file": 7,"line": 7,"col": 0},{"file": 7,"line": 10,"col": 0},{"file": 7,"line": 1687,"col": 0,"fields": []},{"file": 7,"line": 1,"col": 0},{"file": 7,"line": 1712,"col": 0},{"file": 7,"line": 1685,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 7,"line": 2,"col": 0},{"file": 7,"line": 1815,"col": 0,"fields": [1651,1652,1653]},{"file": 7,"line": 54,"col": 0,"docs": " Tries to write to stderr, unbuffered, and ignores any error returned.\n Does not append a newline.\n"},{"file": 7,"line": 29,"col": 0},{"file": 7,"line": 1734,"col": 0,"fields": []},{"file": 7,"line": 57,"col": 0},{"file": 7,"line": 58,"col": 0},{"file": 7,"line": 12,"col": 0},{"file": 7,"line": 0,"col": 0},{"file": 7,"line": 849,"col": 0,"fields": [1654,1655,1656]},{"file": 7,"line": 548,"col": 0,"fields": [1657,1658]},{"file": 7,"line": 1752,"col": 0,"fields": [1659,1660,1661]},{"file": 7,"line": 17,"col": 0},{"file": 7,"line": 55,"col": 0},{"file": 7,"line": 84,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 7,"line": 676,"col": 0,"docs": " This takes ownership of coff_file: users of this function should not close\n it themselves, even on error.\n TODO resources https://github.com/ziglang/zig/issues/4353\n TODO it's weird to take ownership even on error, rework this code.\n","fields": [1662,1663]},{"file": 7,"line": 13,"col": 0},{"file": 7,"line": 1686,"col": 0},{"file": 7,"line": 310,"col": 0},{"file": 7,"line": 3,"col": 0},{"file": 7,"line": 502,"col": 0,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353\n","fields": [1664,1665]},{"file": 8,"line": 482,"col": 4,"docs": " Compares two of any type for equality. Containers are compared on a field-by-field basis,\n where possible. Pointers are not followed.\n","fields": [1666,1667]},{"file": 8,"line": 126,"col": 4,"fields": [1668]},{"file": 8,"line": 98,"col": 4,"fields": [1669]},{"file": 8,"line": 252,"col": 4,"fields": [1670]},{"file": 8,"line": 641,"col": 4,"docs": " Given a type and a name, return the field index according to source order.\n Returns `null` if the field is not found.\n","fields": [1671,1672]},{"file": 8,"line": 650,"col": 4,"docs": " Given a type, reference all the declarations inside, so that the semantic analyzer sees them.\n","fields": [1673]},{"file": 8,"line": 627,"col": 4},{"file": 8,"line": 112,"col": 4,"fields": [1674]},{"file": 8,"line": 676,"col": 4,"docs": " Deprecated: use Int\n"},{"file": 8,"line": 687,"col": 4,"fields": [1675,1676]},{"file": 8,"line": 369,"col": 4,"fields": [1677,1678]},{"file": 8,"line": 432,"col": 4,"docs": "Returns the active tag of a tagged union\n","fields": [1679]},{"file": 8,"line": 288,"col": 4,"fields": [1680,1681]},{"file": 8,"line": 658,"col": 4,"docs": " Returns a slice of pointers to public declarations of a namespace.\n","fields": [1682,1683]},{"file": 8,"line": 7,"col": 4},{"file": 8,"line": 409,"col": 4,"fields": [1684]},{"file": 8,"line": 174,"col": 4,"docs": " Given a type which can have a sentinel e.g. `[:0]u8`, returns the sentinel value,\n or `null` if there is not one.\n Types which cannot possibly have a sentinel will be a compile error.\n","fields": [1685]},{"file": 8,"line": 209,"col": 4,"fields": [1686]},{"file": 8,"line": 11,"col": 4,"fields": [1687]},{"file": 8,"line": 145,"col": 4,"docs": " Given a \"memory span\" type, returns the \"element type\".\n","fields": [1688]},{"file": 8,"line": 629,"col": 4,"fields": [1689,1690]},{"file": 8,"line": 457,"col": 4,"docs": "Given a tagged union type, and an enum, return the type of the union\n field corresponding to the enum tag.\n","fields": [1691,1692]},{"file": 8,"line": 324,"col": 4,"fields": [1693]},{"file": 8,"line": 54,"col": 4,"fields": [1694,1695]},{"file": 8,"line": 3,"col": 0},{"file": 8,"line": 1,"col": 0},{"file": 8,"line": 4,"col": 0},{"file": 8,"line": 0,"col": 0},{"file": 8,"line": 2,"col": 0},{"file": 8,"line": 5,"col": 0},{"file": 8,"line": 197,"col": 0,"fields": []},{"file": 8,"line": 9,"col": 0},{"file": 9,"line": 235,"col": 4,"fields": []},{"file": 9,"line": 4,"col": 0},{"file": 9,"line": 226,"col": 0,"fields": [1696]},{"file": 9,"line": 60,"col": 0,"fields": [1697,1698]},{"file": 9,"line": 2,"col": 0},{"file": 9,"line": 6,"col": 0},{"file": 9,"line": 190,"col": 0,"fields": [1699,1700,1701]},{"file": 9,"line": 181,"col": 0,"fields": [1702,1703,1704]},{"file": 9,"line": 10,"col": 0},{"file": 9,"line": 125,"col": 0,"fields": []},{"file": 9,"line": 137,"col": 0,"fields": []},{"file": 9,"line": 38,"col": 0,"fields": [1705,1706,1707]},{"file": 9,"line": 3,"col": 0},{"file": 9,"line": 8,"col": 0},{"file": 9,"line": 54,"col": 0,"fields": []},{"file": 9,"line": 202,"col": 0,"fields": []},{"file": 9,"line": 5,"col": 0},{"file": 9,"line": 198,"col": 0},{"file": 9,"line": 82,"col": 0,"fields": []},{"file": 10,"line": 997,"col": 8,"fields": [1708]},{"file": 10,"line": 310,"col": 8},{"file": 10,"line": 297,"col": 8},{"file": 10,"line": 1045,"col": 8,"fields": [1709]},{"file": 10,"line": 969,"col": 8,"fields": [1710,1711]},{"file": 10,"line": 967,"col": 8},{"file": 10,"line": 1094,"col": 8,"fields": [1712]},{"file": 10,"line": 1057,"col": 8,"fields": [1713]},{"file": 10,"line": 308,"col": 8},{"file": 10,"line": 1072,"col": 8,"fields": [1714]},{"file": 10,"line": 1049,"col": 8,"fields": [1715]},{"file": 10,"line": 973,"col": 8,"fields": [1716,1717,1718,1719]},{"file": 10,"line": 1011,"col": 8,"fields": [1720]},{"file": 10,"line": 1001,"col": 8,"fields": [1721,1722]},{"file": 10,"line": 981,"col": 8,"fields": [1723]},{"file": 10,"line": 1033,"col": 8,"fields": [1724,1725]},{"file": 10,"line": 1019,"col": 8,"fields": [1726,1727]},{"file": 10,"line": 1053,"col": 8,"fields": [1728]},{"file": 10,"line": 425,"col": 8},{"file": 10,"line": 306,"col": 8},{"file": 10,"line": 1104,"col": 8,"fields": [1729]},{"file": 10,"line": 1123,"col": 8},{"file": 10,"line": 305,"col": 8},{"file": 10,"line": 1015,"col": 8,"fields": [1730]},{"file": 10,"line": 298,"col": 8},{"file": 10,"line": 1156,"col": 8,"fields": [1731]},{"file": 10,"line": 13,"col": 8},{"file": 10,"line": 1084,"col": 8,"fields": [1732]},{"file": 10,"line": 312,"col": 8},{"file": 10,"line": 985,"col": 8,"fields": [1733,1734]},{"file": 10,"line": 300,"col": 8},{"file": 10,"line": 309,"col": 8},{"file": 10,"line": 977,"col": 8,"fields": [1735,1736]},{"file": 10,"line": 302,"col": 8},{"file": 10,"line": 307,"col": 8},{"file": 10,"line": 299,"col": 8},{"file": 10,"line": 1076,"col": 8,"fields": [1737,1738]},{"file": 10,"line": 405,"col": 8},{"file": 10,"line": 1088,"col": 8},{"file": 10,"line": 961,"col": 8},{"file": 10,"line": 301,"col": 8},{"file": 10,"line": 1061,"col": 8,"fields": [1739]},{"file": 10,"line": 1080,"col": 8,"fields": [1740]},{"file": 10,"line": 1029,"col": 8,"fields": [1741]},{"file": 10,"line": 414,"col": 8},{"file": 10,"line": 303,"col": 8},{"file": 10,"line": 296,"col": 8},{"file": 10,"line": 304,"col": 8},{"file": 10,"line": 1068,"col": 8,"fields": [1742]},{"file": 10,"line": 8,"col": 4,"docs": " TODO Nearly all the functions in this namespace would be\n better off if https://github.com/ziglang/zig/issues/425\n was solved.\n"},{"file": 10,"line": 2,"col": 0},{"file": 10,"line": 0,"col": 0},{"file": 10,"line": 3,"col": 0},{"file": 10,"line": 1,"col": 0},{"file": 10,"line": 63,"col": 16,"fields": [1743]},{"file": 10,"line": 56,"col": 16,"fields": [1744]},{"file": 10,"line": 109,"col": 16,"fields": [1745,1746]},{"file": 10,"line": 95,"col": 16},{"file": 10,"line": 143,"col": 16,"docs": " The default `VersionRange` represents the range that the Zig Standard Library\n bases its abstractions on.\n","fields": [1747]},{"file": 4,"line": 408,"col": 12,"fields": [1748,1749]},{"file": 4,"line": 195,"col": 12,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 4,"line": 339,"col": 12,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 10,"line": 552,"col": 12},{"file": 10,"line": 894,"col": 12},{"file": 10,"line": 956,"col": 12,"docs": " The \"default\" set of CPU features for cross-compiling. A conservative set\n of features that is expected to be supported on most available hardware.\n","fields": [1750]},{"file": 10,"line": 436,"col": 12},{"file": 10,"line": 390,"col": 12,"fields": [1751]},{"file": 10,"line": 397,"col": 12,"fields": [1752]},{"file": 10,"line": 334,"col": 12,"fields": [1753,1754]},{"file": 10,"line": 383,"col": 12,"fields": [1755]},{"file": 10,"line": 99,"col": 20,"fields": [1756,1757]},{"file": 4,"line": 346,"col": 16,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 10,"line": 941,"col": 16,"fields": [1758]},{"file": 10,"line": 909,"col": 16,"fields": [1759]},{"file": 10,"line": 899,"col": 16,"fields": [1760,1761]},{"file": 10,"line": 534,"col": 16,"fields": [1762]},{"file": 10,"line": 456,"col": 16,"docs": " A bit set of all the features.\n"},{"file": 10,"line": 459,"col": 20},{"file": 10,"line": 490,"col": 20,"docs": " Adds the specified feature set but not its dependencies.\n","fields": [1763,1764]},{"file": 10,"line": 503,"col": 20,"docs": " Removes the specified feature but not its dependents.\n","fields": [1765,1766]},{"file": 10,"line": 496,"col": 20,"docs": " Removes the specified feature but not its dependents.\n","fields": [1767,1768]},{"file": 10,"line": 463,"col": 20},{"file": 10,"line": 462,"col": 20},{"file": 10,"line": 525,"col": 20,"fields": [1769]},{"file": 10,"line": 476,"col": 20,"fields": [1770,1771]},{"file": 10,"line": 465,"col": 20},{"file": 10,"line": 460,"col": 20},{"file": 10,"line": 461,"col": 20},{"file": 10,"line": 483,"col": 20,"docs": " Adds the specified feature but not its dependencies.\n","fields": [1772,1773]},{"file": 10,"line": 466,"col": 20,"fields": []},{"file": 10,"line": 529,"col": 20,"fields": [1774,1775]},{"file": 10,"line": 470,"col": 20,"fields": [1776]},{"file": 10,"line": 508,"col": 20,"fields": [1777,1778]},{"file": 4,"line": 358,"col": 20,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 5,"line": 16,"col": 28},{"file": 3,"line": 154,"col": 32},{"file": 4,"line": 525,"col": 21,"name": "msg"},{"file": 4,"line": 525,"col": 38,"name": "error_return_trace"},{"file": 7,"line": 232,"col": 14,"name": "ok"},{"file": 3,"line": 234,"col": 20,"name": "backing_allocator"},{"file": 3,"line": 485,"col": 23,"name": "allocator"},{"file": 3,"line": 485,"col": 46,"name": "old_mem"},{"file": 3,"line": 485,"col": 61,"name": "old_align"},{"file": 3,"line": 485,"col": 77,"name": "new_size"},{"file": 3,"line": 485,"col": 94,"name": "new_align"},{"file": 3,"line": 392,"col": 19,"name": "allocator"},{"file": 3,"line": 392,"col": 42,"name": "old_mem"},{"file": 3,"line": 392,"col": 57,"name": "old_align"},{"file": 3,"line": 392,"col": 73,"name": "new_size"},{"file": 3,"line": 392,"col": 90,"name": "new_align"},{"file": 3,"line": 430,"col": 18,"name": "allocator"},{"file": 3,"line": 430,"col": 41,"name": "old_mem"},{"file": 3,"line": 430,"col": 56,"name": "old_align"},{"file": 3,"line": 430,"col": 72,"name": "new_size"},{"file": 3,"line": 430,"col": 89,"name": "new_align"},{"file": 3,"line": 518,"col": 22,"name": "size"},{"file": 3,"line": 526,"col": 22,"name": "num_elements"},{"file": 3,"line": 526,"col": 43,"name": "element_size"},{"file": 3,"line": 535,"col": 23,"name": "c_ptr"},{"file": 3,"line": 535,"col": 40,"name": "new_size"},{"file": 3,"line": 549,"col": 20,"name": "c_ptr"},{"file": 3,"line": 470,"col": 12,"name": "run_assert","comptime": true},{"file": 3,"line": 470,"col": 39,"name": "ok"},{"file": 3,"line": 145,"col": 34,"name": "payload"},{"file": 3,"line": 169,"col": 31,"name": "self"},{"file": 3,"line": 174,"col": 32,"name": "self"},{"file": 3,"line": 174,"col": 46,"name": "start"},{"file": 3,"line": 174,"col": 60,"name": "end"},{"file": 3,"line": 245,"col": 24,"name": "self"},{"file": 3,"line": 245,"col": 37,"name": "memsize"},{"file": 3,"line": 238,"col": 21,"name": "self"},{"file": 3,"line": 238,"col": 34,"name": "memsize"},{"file": 3,"line": 351,"col": 30,"name": "size"},{"file": 3,"line": 130,"col": 24,"name": "raw_bytes"},{"file": 3,"line": 165,"col": 33,"name": "self"},{"file": 3,"line": 290,"col": 20,"name": "self"},{"file": 3,"line": 290,"col": 33,"name": "node"},{"file": 3,"line": 290,"col": 47,"name": "target_size"},{"file": 5,"line": 317,"col": 12,"name": "T","comptime": true},{"file": 5,"line": 317,"col": 30,"name": "dest"},{"file": 5,"line": 317,"col": 41,"name": "source"},{"file": 3,"line": 311,"col": 16,"name": "self"},{"file": 3,"line": 311,"col": 29,"name": "target"},{"file": 3,"line": 161,"col": 31,"name": "self"},{"file": 3,"line": 97,"col": 26,"name": "self","comptime": true},{"file": 3,"line": 97,"col": 53,"name": "ok"},{"file": 3,"line": 152,"col": 28,"name": "self"},{"file": 3,"line": 126,"col": 29,"name": "memsize"},{"file": 3,"line": 92,"col": 26,"name": "self","comptime": true},{"file": 3,"line": 92,"col": 53,"name": "ok"},{"file": 3,"line": 357,"col": 26,"name": "self"},{"file": 3,"line": 357,"col": 39,"name": "memsize"},{"file": 3,"line": 378,"col": 25,"name": "self"},{"file": 3,"line": 378,"col": 38,"name": "frame_size"},{"file": 3,"line": 190,"col": 24,"name": "self"},{"file": 3,"line": 215,"col": 31,"name": "self"},{"file": 3,"line": 215,"col": 48,"name": "ref"},{"file": 3,"line": 372,"col": 26,"name": "self"},{"file": 3,"line": 372,"col": 39,"name": "frame_size"},{"file": 3,"line": 198,"col": 27,"name": "self"},{"file": 3,"line": 198,"col": 44,"name": "node"},{"file": 6,"line": 777,"col": 20,"name": "v"},{"file": 6,"line": 307,"col": 11,"name": "x"},{"file": 6,"line": 307,"col": 19,"name": "y"},{"file": 3,"line": 338,"col": 32,"name": "T","comptime": true},{"file": 3,"line": 338,"col": 50,"name": "value"},{"file": 6,"line": 256,"col": 11,"name": "x"},{"file": 6,"line": 256,"col": 19,"name": "y"},{"file": 3,"line": 345,"col": 25,"name": "T","comptime": true},{"file": 3,"line": 345,"col": 43,"name": "x"},{"file": 6,"line": 452,"col": 15,"name": "T","comptime": true},{"file": 6,"line": 910,"col": 14,"name": "T","comptime": true},{"file": 8,"line": 678,"col": 11,"name": "is_signed","comptime": true},{"file": 8,"line": 678,"col": 37,"name": "bit_count","comptime": true},{"file": 3,"line": 84,"col": 23,"name": "self","comptime": true},{"file": 3,"line": 104,"col": 16,"name": "conf","comptime": true},{"file": 3,"line": 516,"col": 15,"name": "conf","comptime": true},{"file": 6,"line": 237,"col": 11,"name": "A","comptime": true},{"file": 6,"line": 237,"col": 29,"name": "B","comptime": true},{"file": 3,"line": 77,"col": 23,"name": "self","comptime": true},{"file": 6,"line": 868,"col": 16,"name": "T","comptime": true},{"file": 6,"line": 868,"col": 34,"name": "x"},{"file": 3,"line": 69,"col": 8,"docs": " Enable all validations, including library internals\n","name": "Dev"},{"file": 3,"line": 72,"col": 8,"docs": " Only validate external boundaries — e.g. `realloc` or `free`\n","name": "External"},{"file": 3,"line": 75,"col": 8,"docs": " Turn off all validations — pretend this library is `--release-small`\n","name": "Unsafe"},{"file": 3,"line": 226,"col": 8,"name": "backing_allocator"},{"file": 3,"line": 228,"col": 8,"name": "free_lists"},{"file": 3,"line": 229,"col": 8,"name": "allocator"},{"file": 3,"line": 16,"col": 4,"docs": " ZeeAlloc will request a multiple of `page_size` from the backing allocator.\n **Must** be a power of two.\n","name": "page_size"},{"file": 3,"line": 17,"col": 4,"name": "validation"},{"file": 3,"line": 19,"col": 4,"name": "jumbo_match_strategy"},{"file": 3,"line": 20,"col": 4,"name": "buddy_strategy"},{"file": 3,"line": 21,"col": 4,"name": "shrink_strategy"},{"file": 3,"line": 510,"col": 4,"name": "allocator"},{"file": 3,"line": 511,"col": 4,"name": "malloc"},{"file": 3,"line": 512,"col": 4,"name": "free"},{"file": 3,"line": 513,"col": 4,"name": "calloc"},{"file": 3,"line": 514,"col": 4,"name": "realloc"},{"file": 3,"line": 184,"col": 12,"name": "first"},{"file": 3,"line": 121,"col": 12,"name": "next"},{"file": 3,"line": 122,"col": 12,"name": "frame_size"},{"file": 3,"line": 124,"col": 12,"name": "payload"},{"file": 5,"line": 39,"col": 4,"docs": " Realloc is used to modify the size or alignment of an existing allocation,\n as well as to provide the allocator with an opportunity to move an allocation\n to a better location.\n When the size/alignment is greater than the previous allocation, this function\n returns `error.OutOfMemory` when the requested new allocation could not be granted.\n When the size/alignment is less than or equal to the previous allocation,\n this function returns `error.OutOfMemory` when the allocator decides the client\n would be better off keeping the extra alignment/size. Clients will call\n `shrinkFn` when they require the allocator to track a new alignment/size,\n and so this function should only return success when the allocator considers\n the reallocation desirable from the allocator's perspective.\n As an example, `std.ArrayList` tracks a \"capacity\", and therefore can handle\n reallocation failure, even when `new_n` <= `old_mem.len`. A `FixedBufferAllocator`\n would always return `error.OutOfMemory` for `reallocFn` when the size/alignment\n is less than or equal to the old allocation, because it cannot reclaim the memory,\n and thus the `std.ArrayList` would be better off retaining its capacity.\n When `reallocFn` returns,\n `return_value[0..min(old_mem.len, new_byte_count)]` must be the same\n as `old_mem` was when `reallocFn` is called. The bytes of\n `return_value[old_mem.len..]` have undefined values.\n The returned slice must have its pointer aligned at least to `new_alignment` bytes.\n","name": "reallocFn"},{"file": 5,"line": 62,"col": 4,"docs": " This function deallocates memory. It must succeed.\n","name": "shrinkFn"},{"file": 3,"line": 26,"col": 8,"docs": " Use the frame that wastes the least space\n Scans the entire jumbo freelist, which is slower but keeps memory pretty tidy\n","name": "Closest"},{"file": 3,"line": 31,"col": 8,"docs": " Use only exact matches\n -75 bytes vs `.Closest`\n Similar performance to Closest if allocation sizes are consistent throughout lifetime\n","name": "Exact"},{"file": 3,"line": 36,"col": 8,"docs": " Use the first frame that fits\n -75 bytes vs `.Closest`\n Initially faster to allocate but causes major fragmentation issues\n","name": "First"},{"file": 3,"line": 54,"col": 8,"docs": " Return a smaller view into the same frame\n Faster because it ignores shrink, but never reclaims space until freed\n","name": "Defer"},{"file": 3,"line": 59,"col": 8,"docs": " Split the frame into smallest usable chunk\n +112 bytes vs `.Defer`\n Better at reclaiming non-jumbo memory, but never reclaims jumbo until freed\n","name": "Chunkify"},{"file": 3,"line": 64,"col": 8,"docs": " Find and swap a replacement frame\n +295 bytes vs `.Defer`\n Reclaims all memory, but generally slower\n","name": "Swap"},{"file": 3,"line": 43,"col": 8,"docs": " Return the raw free frame immediately\n Generally faster because it does not recombine or resplit frames,\n but it also requires more underlying memory\n","name": "Fast"},{"file": 3,"line": 48,"col": 8,"docs": " Recombine with free buddies to reclaim storage\n +153 bytes vs `.Fast`\n More efficient use of existing memory at the cost of cycles and bytes\n","name": "Coalesce"},{"file": 4,"line": 385,"col": 4,"name": "Exe"},{"file": 4,"line": 386,"col": 4,"name": "Lib"},{"file": 4,"line": 387,"col": 4,"name": "Obj"},{"file": 4,"line": 108,"col": 4,"name": "Debug"},{"file": 4,"line": 109,"col": 4,"name": "ReleaseSafe"},{"file": 4,"line": 110,"col": 4,"name": "ReleaseFast"},{"file": 4,"line": 111,"col": 4,"name": "ReleaseSmall"},{"file": 10,"line": 14,"col": 8,"name": "tag"},{"file": 10,"line": 15,"col": 8,"name": "version_range"},{"file": 4,"line": 52,"col": 4,"name": "index"},{"file": 4,"line": 53,"col": 4,"name": "instruction_addresses"},{"file": 4,"line": 117,"col": 4,"name": "Unspecified"},{"file": 4,"line": 118,"col": 4,"name": "C"},{"file": 4,"line": 119,"col": 4,"name": "Cold"},{"file": 4,"line": 120,"col": 4,"name": "Naked"},{"file": 4,"line": 121,"col": 4,"name": "Async"},{"file": 4,"line": 122,"col": 4,"name": "Interrupt"},{"file": 4,"line": 123,"col": 4,"name": "Signal"},{"file": 4,"line": 124,"col": 4,"name": "Stdcall"},{"file": 4,"line": 125,"col": 4,"name": "Fastcall"},{"file": 4,"line": 126,"col": 4,"name": "Vectorcall"},{"file": 4,"line": 127,"col": 4,"name": "Thiscall"},{"file": 4,"line": 128,"col": 4,"name": "APCS"},{"file": 4,"line": 129,"col": 4,"name": "AAPCS"},{"file": 4,"line": 130,"col": 4,"name": "AAPCSVFP"},{"file": 4,"line": 459,"col": 4,"name": "modifier"},{"file": 4,"line": 462,"col": 4,"docs": " Only valid when `Modifier` is `Modifier.async_kw`.\n","name": "stack"},{"file": 4,"line": 400,"col": 4,"name": "major"},{"file": 4,"line": 401,"col": 4,"name": "minor"},{"file": 4,"line": 402,"col": 4,"name": "patch"},{"file": 4,"line": 59,"col": 4,"name": "Internal"},{"file": 4,"line": 60,"col": 4,"name": "Strong"},{"file": 4,"line": 61,"col": 4,"name": "Weak"},{"file": 4,"line": 62,"col": 4,"name": "LinkOnce"},{"file": 4,"line": 138,"col": 4,"name": "Type"},{"file": 4,"line": 139,"col": 4,"name": "Void"},{"file": 4,"line": 140,"col": 4,"name": "Bool"},{"file": 4,"line": 141,"col": 4,"name": "NoReturn"},{"file": 4,"line": 142,"col": 4,"name": "Int"},{"file": 4,"line": 143,"col": 4,"name": "Float"},{"file": 4,"line": 144,"col": 4,"name": "Pointer"},{"file": 4,"line": 145,"col": 4,"name": "Array"},{"file": 4,"line": 146,"col": 4,"name": "Struct"},{"file": 4,"line": 147,"col": 4,"name": "ComptimeFloat"},{"file": 4,"line": 148,"col": 4,"name": "ComptimeInt"},{"file": 4,"line": 149,"col": 4,"name": "Undefined"},{"file": 4,"line": 150,"col": 4,"name": "Null"},{"file": 4,"line": 151,"col": 4,"name": "Optional"},{"file": 4,"line": 152,"col": 4,"name": "ErrorUnion"},{"file": 4,"line": 153,"col": 4,"name": "ErrorSet"},{"file": 4,"line": 154,"col": 4,"name": "Enum"},{"file": 4,"line": 155,"col": 4,"name": "Union"},{"file": 4,"line": 156,"col": 4,"name": "Fn"},{"file": 4,"line": 157,"col": 4,"name": "BoundFn"},{"file": 4,"line": 158,"col": 4,"name": "Opaque"},{"file": 4,"line": 159,"col": 4,"name": "Frame"},{"file": 4,"line": 160,"col": 4,"name": "AnyFrame"},{"file": 4,"line": 161,"col": 4,"name": "Vector"},{"file": 4,"line": 162,"col": 4,"name": "EnumLiteral"},{"file": 4,"line": 393,"col": 4,"name": "Static"},{"file": 4,"line": 394,"col": 4,"name": "Dynamic"},{"file": 4,"line": 502,"col": 4,"name": "name"},{"file": 4,"line": 503,"col": 4,"name": "linkage"},{"file": 4,"line": 504,"col": 4,"name": "section"},{"file": 10,"line": 553,"col": 12,"name": "arm"},{"file": 10,"line": 554,"col": 12,"name": "armeb"},{"file": 10,"line": 555,"col": 12,"name": "aarch64"},{"file": 10,"line": 556,"col": 12,"name": "aarch64_be"},{"file": 10,"line": 557,"col": 12,"name": "aarch64_32"},{"file": 10,"line": 558,"col": 12,"name": "arc"},{"file": 10,"line": 559,"col": 12,"name": "avr"},{"file": 10,"line": 560,"col": 12,"name": "bpfel"},{"file": 10,"line": 561,"col": 12,"name": "bpfeb"},{"file": 10,"line": 562,"col": 12,"name": "hexagon"},{"file": 10,"line": 563,"col": 12,"name": "mips"},{"file": 10,"line": 564,"col": 12,"name": "mipsel"},{"file": 10,"line": 565,"col": 12,"name": "mips64"},{"file": 10,"line": 566,"col": 12,"name": "mips64el"},{"file": 10,"line": 567,"col": 12,"name": "msp430"},{"file": 10,"line": 568,"col": 12,"name": "powerpc"},{"file": 10,"line": 569,"col": 12,"name": "powerpc64"},{"file": 10,"line": 570,"col": 12,"name": "powerpc64le"},{"file": 10,"line": 571,"col": 12,"name": "r600"},{"file": 10,"line": 572,"col": 12,"name": "amdgcn"},{"file": 10,"line": 573,"col": 12,"name": "riscv32"},{"file": 10,"line": 574,"col": 12,"name": "riscv64"},{"file": 10,"line": 575,"col": 12,"name": "sparc"},{"file": 10,"line": 576,"col": 12,"name": "sparcv9"},{"file": 10,"line": 577,"col": 12,"name": "sparcel"},{"file": 10,"line": 578,"col": 12,"name": "s390x"},{"file": 10,"line": 579,"col": 12,"name": "tce"},{"file": 10,"line": 580,"col": 12,"name": "tcele"},{"file": 10,"line": 581,"col": 12,"name": "thumb"},{"file": 10,"line": 582,"col": 12,"name": "thumbeb"},{"file": 10,"line": 583,"col": 12,"name": "i386"},{"file": 10,"line": 584,"col": 12,"name": "x86_64"},{"file": 10,"line": 585,"col": 12,"name": "xcore"},{"file": 10,"line": 586,"col": 12,"name": "nvptx"},{"file": 10,"line": 587,"col": 12,"name": "nvptx64"},{"file": 10,"line": 588,"col": 12,"name": "le32"},{"file": 10,"line": 589,"col": 12,"name": "le64"},{"file": 10,"line": 590,"col": 12,"name": "amdil"},{"file": 10,"line": 591,"col": 12,"name": "amdil64"},{"file": 10,"line": 592,"col": 12,"name": "hsail"},{"file": 10,"line": 593,"col": 12,"name": "hsail64"},{"file": 10,"line": 594,"col": 12,"name": "spir"},{"file": 10,"line": 595,"col": 12,"name": "spir64"},{"file": 10,"line": 596,"col": 12,"name": "kalimba"},{"file": 10,"line": 597,"col": 12,"name": "shave"},{"file": 10,"line": 598,"col": 12,"name": "lanai"},{"file": 10,"line": 599,"col": 12,"name": "wasm32"},{"file": 10,"line": 600,"col": 12,"name": "wasm64"},{"file": 10,"line": 601,"col": 12,"name": "renderscript32"},{"file": 10,"line": 602,"col": 12,"name": "renderscript64"},{"file": 10,"line": 603,"col": 12,"name": "ve"},{"file": 10,"line": 9,"col": 4,"name": "cpu"},{"file": 10,"line": 10,"col": 4,"name": "os"},{"file": 10,"line": 11,"col": 4,"name": "abi"},{"file": 10,"line": 18,"col": 12,"name": "freestanding"},{"file": 10,"line": 19,"col": 12,"name": "ananas"},{"file": 10,"line": 20,"col": 12,"name": "cloudabi"},{"file": 10,"line": 21,"col": 12,"name": "dragonfly"},{"file": 10,"line": 22,"col": 12,"name": "freebsd"},{"file": 10,"line": 23,"col": 12,"name": "fuchsia"},{"file": 10,"line": 24,"col": 12,"name": "ios"},{"file": 10,"line": 25,"col": 12,"name": "kfreebsd"},{"file": 10,"line": 26,"col": 12,"name": "linux"},{"file": 10,"line": 27,"col": 12,"name": "lv2"},{"file": 10,"line": 28,"col": 12,"name": "macosx"},{"file": 10,"line": 29,"col": 12,"name": "netbsd"},{"file": 10,"line": 30,"col": 12,"name": "openbsd"},{"file": 10,"line": 31,"col": 12,"name": "solaris"},{"file": 10,"line": 32,"col": 12,"name": "windows"},{"file": 10,"line": 33,"col": 12,"name": "haiku"},{"file": 10,"line": 34,"col": 12,"name": "minix"},{"file": 10,"line": 35,"col": 12,"name": "rtems"},{"file": 10,"line": 36,"col": 12,"name": "nacl"},{"file": 10,"line": 37,"col": 12,"name": "cnk"},{"file": 10,"line": 38,"col": 12,"name": "aix"},{"file": 10,"line": 39,"col": 12,"name": "cuda"},{"file": 10,"line": 40,"col": 12,"name": "nvcl"},{"file": 10,"line": 41,"col": 12,"name": "amdhsa"},{"file": 10,"line": 42,"col": 12,"name": "ps4"},{"file": 10,"line": 43,"col": 12,"name": "elfiamcu"},{"file": 10,"line": 44,"col": 12,"name": "tvos"},{"file": 10,"line": 45,"col": 12,"name": "watchos"},{"file": 10,"line": 46,"col": 12,"name": "mesa3d"},{"file": 10,"line": 47,"col": 12,"name": "contiki"},{"file": 10,"line": 48,"col": 12,"name": "amdpal"},{"file": 10,"line": 49,"col": 12,"name": "hermit"},{"file": 10,"line": 50,"col": 12,"name": "hurd"},{"file": 10,"line": 51,"col": 12,"name": "wasi"},{"file": 10,"line": 52,"col": 12,"name": "emscripten"},{"file": 10,"line": 53,"col": 12,"name": "uefi"},{"file": 10,"line": 54,"col": 12,"name": "other"},{"file": 10,"line": 106,"col": 12,"name": "range"},{"file": 10,"line": 107,"col": 12,"name": "glibc"},{"file": 10,"line": 77,"col": 12,"name": "nt4"},{"file": 10,"line": 78,"col": 12,"name": "win2k"},{"file": 10,"line": 79,"col": 12,"name": "xp"},{"file": 10,"line": 80,"col": 12,"name": "ws2003"},{"file": 10,"line": 81,"col": 12,"name": "vista"},{"file": 10,"line": 82,"col": 12,"name": "win7"},{"file": 10,"line": 83,"col": 12,"name": "win8"},{"file": 10,"line": 84,"col": 12,"name": "win8_1"},{"file": 10,"line": 85,"col": 12,"name": "win10"},{"file": 10,"line": 86,"col": 12,"name": "win10_th2"},{"file": 10,"line": 87,"col": 12,"name": "win10_rs1"},{"file": 10,"line": 88,"col": 12,"name": "win10_rs2"},{"file": 10,"line": 89,"col": 12,"name": "win10_rs3"},{"file": 10,"line": 90,"col": 12,"name": "win10_rs4"},{"file": 10,"line": 91,"col": 12,"name": "win10_rs5"},{"file": 10,"line": 92,"col": 12,"name": "win10_19h1"},{"file": 10,"line": 93,"col": 12,"name": "_"},{"file": 10,"line": 136,"col": 12,"name": "none"},{"file": 10,"line": 137,"col": 12,"name": "semver"},{"file": 10,"line": 138,"col": 12,"name": "linux"},{"file": 10,"line": 139,"col": 12,"name": "windows"},{"file": 4,"line": 466,"col": 8,"docs": " Equivalent to function call syntax.\n","name": "auto"},{"file": 4,"line": 469,"col": 8,"docs": " Equivalent to async keyword used with function call syntax.\n","name": "async_kw"},{"file": 4,"line": 475,"col": 8,"docs": " Prevents tail call optimization. This guarantees that the return\n address will point to the callsite, as opposed to the callsite's\n callsite. If the call is otherwise required to be tail-called\n or inlined, a compile error is emitted instead.\n","name": "never_tail"},{"file": 4,"line": 479,"col": 8,"docs": " Guarantees that the call will not be inlined. If the call is\n otherwise required to be inlined, a compile error is emitted instead.\n","name": "never_inline"},{"file": 4,"line": 483,"col": 8,"docs": " Asserts that the function call will not suspend. This allows a\n non-async function to call an async function.\n","name": "no_async"},{"file": 4,"line": 487,"col": 8,"docs": " Guarantees that the call will be generated with tail call optimization.\n If this is not possible, a compile error is emitted instead.\n","name": "always_tail"},{"file": 4,"line": 491,"col": 8,"docs": " Guarantees that the call will inlined at the callsite.\n If this is not possible, a compile error is emitted instead.\n","name": "always_inline"},{"file": 4,"line": 495,"col": 8,"docs": " Evaluates the call at compile-time. If the call cannot be completed at\n compile-time, a compile error is emitted instead.\n","name": "compile_time"},{"file": 4,"line": 405,"col": 8,"name": "min"},{"file": 4,"line": 406,"col": 8,"name": "max"},{"file": 4,"line": 236,"col": 8,"name": "layout"},{"file": 4,"line": 237,"col": 8,"name": "fields"},{"file": 4,"line": 238,"col": 8,"name": "decls"},{"file": 4,"line": 206,"col": 8,"name": "len"},{"file": 4,"line": 207,"col": 8,"name": "child"},{"file": 4,"line": 213,"col": 8,"docs": " This field is an optional type.\n The type of the sentinel is the element type of the array, which is\n the value of the `child` field in this struct. However there is no way\n to refer to that type here, so we use `var`.\n","name": "sentinel"},{"file": 4,"line": 250,"col": 8,"name": "error_set"},{"file": 4,"line": 251,"col": 8,"name": "payload"},{"file": 4,"line": 180,"col": 8,"name": "size"},{"file": 4,"line": 181,"col": 8,"name": "is_const"},{"file": 4,"line": 182,"col": 8,"name": "is_volatile"},{"file": 4,"line": 183,"col": 8,"name": "alignment"},{"file": 4,"line": 184,"col": 8,"name": "child"},{"file": 4,"line": 185,"col": 8,"name": "is_allowzero"},{"file": 4,"line": 191,"col": 8,"docs": " This field is an optional type.\n The type of the sentinel is the element type of the pointer, which is\n the value of the `child` field in this struct. However there is no way\n to refer to that type here, so we use `var`.\n","name": "sentinel"},{"file": 4,"line": 268,"col": 8,"name": "name"},{"file": 4,"line": 269,"col": 8,"name": "value"},{"file": 4,"line": 219,"col": 8,"name": "Auto"},{"file": 4,"line": 220,"col": 8,"name": "Extern"},{"file": 4,"line": 221,"col": 8,"name": "Packed"},{"file": 4,"line": 333,"col": 8,"name": "name"},{"file": 4,"line": 334,"col": 8,"name": "is_pub"},{"file": 4,"line": 335,"col": 8,"name": "data"},{"file": 4,"line": 293,"col": 8,"name": "layout"},{"file": 4,"line": 294,"col": 8,"name": "tag_type"},{"file": 4,"line": 295,"col": 8,"name": "fields"},{"file": 4,"line": 296,"col": 8,"name": "decls"},{"file": 4,"line": 244,"col": 8,"name": "child"},{"file": 4,"line": 275,"col": 8,"name": "layout"},{"file": 4,"line": 276,"col": 8,"name": "tag_type"},{"file": 4,"line": 277,"col": 8,"name": "fields"},{"file": 4,"line": 278,"col": 8,"name": "decls"},{"file": 4,"line": 279,"col": 8,"name": "is_exhaustive"},{"file": 4,"line": 326,"col": 8,"name": "len"},{"file": 4,"line": 327,"col": 8,"name": "child"},{"file": 4,"line": 174,"col": 8,"name": "bits"},{"file": 4,"line": 285,"col": 8,"name": "name"},{"file": 4,"line": 286,"col": 8,"name": "enum_field"},{"file": 4,"line": 287,"col": 8,"name": "field_type"},{"file": 4,"line": 227,"col": 8,"name": "name"},{"file": 4,"line": 228,"col": 8,"name": "offset"},{"file": 4,"line": 229,"col": 8,"name": "field_type"},{"file": 4,"line": 230,"col": 8,"name": "default_value"},{"file": 4,"line": 320,"col": 8,"name": "child"},{"file": 4,"line": 257,"col": 8,"name": "name"},{"file": 4,"line": 258,"col": 8,"name": "value"},{"file": 4,"line": 310,"col": 8,"name": "calling_convention"},{"file": 4,"line": 311,"col": 8,"name": "is_generic"},{"file": 4,"line": 312,"col": 8,"name": "is_var_args"},{"file": 4,"line": 313,"col": 8,"name": "return_type"},{"file": 4,"line": 314,"col": 8,"name": "args"},{"file": 4,"line": 302,"col": 8,"name": "is_generic"},{"file": 4,"line": 303,"col": 8,"name": "is_noalias"},{"file": 4,"line": 304,"col": 8,"name": "arg_type"},{"file": 4,"line": 167,"col": 8,"name": "is_signed"},{"file": 4,"line": 168,"col": 8,"name": "bits"},{"file": 10,"line": 427,"col": 8,"docs": " Architecture\n","name": "arch"},{"file": 10,"line": 431,"col": 8,"docs": " The CPU model to target. It has a set of features\n which are overridden with the `features` field.\n","name": "model"},{"file": 10,"line": 434,"col": 8,"docs": " An explicit list of the entire CPU feature set. It may differ from the specific CPU model's features.\n","name": "features"},{"file": 10,"line": 313,"col": 8,"name": "none"},{"file": 10,"line": 314,"col": 8,"name": "gnu"},{"file": 10,"line": 315,"col": 8,"name": "gnuabin32"},{"file": 10,"line": 316,"col": 8,"name": "gnuabi64"},{"file": 10,"line": 317,"col": 8,"name": "gnueabi"},{"file": 10,"line": 318,"col": 8,"name": "gnueabihf"},{"file": 10,"line": 319,"col": 8,"name": "gnux32"},{"file": 10,"line": 320,"col": 8,"name": "code16"},{"file": 10,"line": 321,"col": 8,"name": "eabi"},{"file": 10,"line": 322,"col": 8,"name": "eabihf"},{"file": 10,"line": 323,"col": 8,"name": "android"},{"file": 10,"line": 324,"col": 8,"name": "musl"},{"file": 10,"line": 325,"col": 8,"name": "musleabi"},{"file": 10,"line": 326,"col": 8,"name": "musleabihf"},{"file": 10,"line": 327,"col": 8,"name": "msvc"},{"file": 10,"line": 328,"col": 8,"name": "itanium"},{"file": 10,"line": 329,"col": 8,"name": "cygnus"},{"file": 10,"line": 330,"col": 8,"name": "coreclr"},{"file": 10,"line": 331,"col": 8,"name": "simulator"},{"file": 10,"line": 332,"col": 8,"name": "macabi"},{"file": 10,"line": 96,"col": 16,"name": "min"},{"file": 10,"line": 97,"col": 16,"name": "max"},{"file": 4,"line": 196,"col": 12,"name": "One"},{"file": 4,"line": 197,"col": 12,"name": "Many"},{"file": 4,"line": 198,"col": 12,"name": "Slice"},{"file": 4,"line": 199,"col": 12,"name": "C"},{"file": 4,"line": 340,"col": 12,"name": "Type"},{"file": 4,"line": 341,"col": 12,"name": "Var"},{"file": 4,"line": 342,"col": 12,"name": "Fn"},{"file": 10,"line": 895,"col": 12,"name": "name"},{"file": 10,"line": 896,"col": 12,"name": "llvm_name"},{"file": 10,"line": 897,"col": 12,"name": "features"},{"file": 10,"line": 439,"col": 12,"docs": " The bit index into `Set`. Has a default value of `undefined` because the canonical\n structures are populated via comptime logic.\n","name": "index"},{"file": 10,"line": 443,"col": 12,"docs": " Has a default value of `undefined` because the canonical\n structures are populated via comptime logic.\n","name": "name"},{"file": 10,"line": 447,"col": 12,"docs": " If this corresponds to an LLVM-recognized feature, this will be populated;\n otherwise null.\n","name": "llvm_name"},{"file": 10,"line": 450,"col": 12,"docs": " Human-friendly UTF-8 text.\n","name": "description"},{"file": 10,"line": 453,"col": 12,"docs": " Sparse `Set` of features this depends on.\n","name": "dependencies"},{"file": 10,"line": 457,"col": 16,"name": "ints"},{"file": 4,"line": 347,"col": 16,"name": "fn_type"},{"file": 4,"line": 348,"col": 16,"name": "inline_type"},{"file": 4,"line": 349,"col": 16,"name": "is_var_args"},{"file": 4,"line": 350,"col": 16,"name": "is_extern"},{"file": 4,"line": 351,"col": 16,"name": "is_export"},{"file": 4,"line": 352,"col": 16,"name": "lib_name"},{"file": 4,"line": 353,"col": 16,"name": "return_type"},{"file": 4,"line": 354,"col": 16,"name": "arg_names"},{"file": 4,"line": 359,"col": 20,"name": "Auto"},{"file": 4,"line": 360,"col": 20,"name": "Always"},{"file": 4,"line": 361,"col": 20,"name": "Never"},{"file": 3,"line": 454,"col": 25,"name": "self"},{"file": 3,"line": 445,"col": 22,"name": "self"},{"file": 3,"line": 445,"col": 35,"name": "index"},{"file": 3,"line": 462,"col": 21,"name": "self"},{"file": 3,"line": 203,"col": 26,"name": "self"},{"file": 3,"line": 203,"col": 43,"name": "target"},{"file": 3,"line": 689,"col": 24,"name": "allocator"},{"file": 3,"line": 689,"col": 47,"name": "alignment","comptime": true},{"file": 3,"line": 746,"col": 30,"name": "allocator"},{"file": 3,"line": 661,"col": 17,"name": "allocator"},{"file": 3,"line": 713,"col": 31,"name": "allocator"},{"file": 3,"line": 476,"col": 39},{"file": 3,"line": 476,"col": 44},{"file": 3,"line": 138,"col": 31,"name": "addr"},{"file": 5,"line": 87,"col": 19,"name": "self"},{"file": 5,"line": 87,"col": 37,"name": "ptr"},{"file": 5,"line": 187,"col": 19,"name": "self"},{"file": 5,"line": 187,"col": 37,"name": "old_mem"},{"file": 5,"line": 187,"col": 51,"name": "new_n"},{"file": 5,"line": 142,"col": 25,"name": "self"},{"file": 5,"line": 142,"col": 43,"name": "Elem","comptime": true},{"file": 5,"line": 142,"col": 64,"name": "n"},{"file": 5,"line": 142,"col": 74,"name": "sentinel","comptime": true},{"file": 5,"line": 230,"col": 18,"name": "self"},{"file": 5,"line": 230,"col": 36,"name": "old_mem"},{"file": 5,"line": 230,"col": 50,"name": "new_n"},{"file": 5,"line": 242,"col": 8,"name": "self"},{"file": 5,"line": 243,"col": 8,"name": "old_mem"},{"file": 5,"line": 244,"col": 8,"name": "new_alignment","comptime": true},{"file": 5,"line": 245,"col": 8,"name": "new_n"},{"file": 5,"line": 147,"col": 8,"name": "self"},{"file": 5,"line": 148,"col": 8,"name": "T","comptime": true},{"file": 5,"line": 150,"col": 8,"docs": " null means naturally aligned\n","name": "alignment","comptime": true},{"file": 5,"line": 151,"col": 8,"name": "n"},{"file": 5,"line": 103,"col": 17,"name": "self"},{"file": 5,"line": 103,"col": 35,"name": "T","comptime": true},{"file": 5,"line": 103,"col": 53,"name": "n"},{"file": 5,"line": 199,"col": 8,"name": "self"},{"file": 5,"line": 200,"col": 8,"name": "old_mem"},{"file": 5,"line": 201,"col": 8,"name": "new_alignment","comptime": true},{"file": 5,"line": 202,"col": 8,"name": "new_n"},{"file": 5,"line": 283,"col": 16,"name": "allocator"},{"file": 5,"line": 283,"col": 39,"name": "T","comptime": true},{"file": 5,"line": 283,"col": 57,"name": "m"},{"file": 5,"line": 290,"col": 17,"name": "allocator"},{"file": 5,"line": 290,"col": 40,"name": "T","comptime": true},{"file": 5,"line": 290,"col": 58,"name": "m"},{"file": 5,"line": 271,"col": 16,"name": "self"},{"file": 5,"line": 271,"col": 34,"name": "memory"},{"file": 5,"line": 108,"col": 8,"name": "self"},{"file": 5,"line": 109,"col": 8,"name": "Elem","comptime": true},{"file": 5,"line": 110,"col": 8,"name": "n"},{"file": 5,"line": 112,"col": 8,"docs": " null means naturally aligned\n","name": "optional_alignment","comptime": true},{"file": 5,"line": 113,"col": 8,"name": "optional_sentinel","comptime": true},{"file": 5,"line": 79,"col": 18,"name": "self"},{"file": 5,"line": 79,"col": 36,"name": "T","comptime": true},{"file": 5,"line": 124,"col": 31,"name": "Elem","comptime": true},{"file": 5,"line": 124,"col": 52,"name": "alignment","comptime": true},{"file": 5,"line": 124,"col": 78,"name": "sentinel","comptime": true},{"file": 10,"line": 250,"col": 28,"name": "os"},{"file": 10,"line": 243,"col": 35,"name": "tag"},{"file": 4,"line": 435,"col": 8,"name": "self"},{"file": 4,"line": 436,"col": 8,"name": "fmt","comptime": true},{"file": 4,"line": 437,"col": 8,"name": "options"},{"file": 4,"line": 438,"col": 8,"name": "out_stream"},{"file": 4,"line": 425,"col": 17,"name": "text"},{"file": 4,"line": 415,"col": 17,"name": "lhs"},{"file": 4,"line": 415,"col": 31,"name": "rhs"},{"file": 10,"line": 826,"col": 31,"name": "arch"},{"file": 10,"line": 605,"col": 25,"name": "arch"},{"file": 10,"line": 848,"col": 35,"name": "arch"},{"file": 10,"line": 764,"col": 31,"name": "arch"},{"file": 10,"line": 705,"col": 26,"name": "arch"},{"file": 10,"line": 612,"col": 27,"name": "arch"},{"file": 10,"line": 640,"col": 33,"name": "arch"},{"file": 10,"line": 640,"col": 45,"name": "cpu_name"},{"file": 10,"line": 871,"col": 32,"name": "arch"},{"file": 10,"line": 649,"col": 32,"name": "arch"},{"file": 10,"line": 626,"col": 27,"name": "arch"},{"file": 10,"line": 619,"col": 26,"name": "arch"},{"file": 10,"line": 633,"col": 26,"name": "arch"},{"file": 5,"line": 749,"col": 13,"name": "ptr"},{"file": 5,"line": 343,"col": 11,"name": "T","comptime": true},{"file": 5,"line": 343,"col": 29,"name": "dest"},{"file": 5,"line": 343,"col": 40,"name": "value"},{"file": 5,"line": 1219,"col": 24,"name": "T","comptime": true},{"file": 5,"line": 1219,"col": 42,"name": "buffer"},{"file": 5,"line": 1219,"col": 56,"name": "value"},{"file": 5,"line": 1760,"col": 15,"name": "T","comptime": true},{"file": 5,"line": 1760,"col": 33,"name": "items"},{"file": 5,"line": 1076,"col": 26,"name": "T","comptime": true},{"file": 5,"line": 1076,"col": 44,"name": "bytes"},{"file": 5,"line": 1897,"col": 15,"name": "value"},{"file": 5,"line": 1777,"col": 14,"name": "T","comptime": true},{"file": 5,"line": 1777,"col": 32,"name": "items"},{"file": 5,"line": 1777,"col": 44,"name": "amount"},{"file": 5,"line": 778,"col": 11,"name": "value"},{"file": 5,"line": 2082,"col": 20,"name": "slice"},{"file": 5,"line": 1975,"col": 20,"name": "T","comptime": true},{"file": 5,"line": 1975,"col": 38,"name": "bytes"},{"file": 5,"line": 1168,"col": 23,"name": "T","comptime": true},{"file": 5,"line": 1168,"col": 41,"name": "buf"},{"file": 5,"line": 1168,"col": 78,"name": "value"},{"file": 5,"line": 895,"col": 13,"name": "allocator"},{"file": 5,"line": 895,"col": 36,"name": "T","comptime": true},{"file": 5,"line": 895,"col": 54,"name": "m"},{"file": 5,"line": 1741,"col": 11,"name": "T","comptime": true},{"file": 5,"line": 1741,"col": 29,"name": "slice"},{"file": 5,"line": 1408,"col": 18,"name": "T","comptime": true},{"file": 5,"line": 1408,"col": 36,"name": "haystack"},{"file": 5,"line": 1408,"col": 57,"name": "needle"},{"file": 5,"line": 2003,"col": 20,"name": "T","comptime": true},{"file": 5,"line": 2003,"col": 38,"name": "bytes"},{"file": 5,"line": 944,"col": 24,"name": "T","comptime": true},{"file": 5,"line": 944,"col": 42,"name": "slice"},{"file": 5,"line": 944,"col": 60,"name": "start_index"},{"file": 5,"line": 944,"col": 80,"name": "value"},{"file": 5,"line": 977,"col": 15,"name": "T","comptime": true},{"file": 5,"line": 977,"col": 33,"name": "haystack"},{"file": 5,"line": 977,"col": 54,"name": "needle"},{"file": 5,"line": 1185,"col": 16,"name": "T","comptime": true},{"file": 5,"line": 1185,"col": 34,"name": "buffer"},{"file": 5,"line": 1185,"col": 74,"name": "value"},{"file": 5,"line": 1185,"col": 84,"name": "endian"},{"file": 5,"line": 2173,"col": 27,"name": "T","comptime": true},{"file": 5,"line": 2173,"col": 45,"name": "addr"},{"file": 5,"line": 2173,"col": 54,"name": "alignment"},{"file": 5,"line": 1753,"col": 12,"name": "T","comptime": true},{"file": 5,"line": 1753,"col": 30,"name": "a"},{"file": 5,"line": 1753,"col": 37,"name": "b"},{"file": 5,"line": 935,"col": 25,"name": "T","comptime": true},{"file": 5,"line": 935,"col": 43,"name": "slice"},{"file": 5,"line": 935,"col": 61,"name": "value"},{"file": 5,"line": 1199,"col": 27,"name": "T","comptime": true},{"file": 5,"line": 1199,"col": 45,"name": "buffer"},{"file": 5,"line": 1199,"col": 59,"name": "value"},{"file": 5,"line": 1729,"col": 11,"name": "T","comptime": true},{"file": 5,"line": 1729,"col": 29,"name": "slice"},{"file": 5,"line": 1049,"col": 21,"name": "T","comptime": true},{"file": 5,"line": 1049,"col": 39,"name": "bytes"},{"file": 5,"line": 967,"col": 21,"name": "T","comptime": true},{"file": 5,"line": 967,"col": 39,"name": "slice"},{"file": 5,"line": 967,"col": 57,"name": "start_index"},{"file": 5,"line": 967,"col": 77,"name": "values"},{"file": 5,"line": 826,"col": 12,"name": "ptr"},{"file": 5,"line": 900,"col": 16,"name": "T","comptime": true},{"file": 5,"line": 900,"col": 34,"name": "slice"},{"file": 5,"line": 900,"col": 52,"name": "values_to_strip"},{"file": 5,"line": 2200,"col": 28,"name": "T","comptime": true},{"file": 5,"line": 2200,"col": 46,"name": "addr"},{"file": 5,"line": 2200,"col": 55,"name": "alignment"},{"file": 5,"line": 1857,"col": 15,"name": "ptr"},{"file": 5,"line": 1026,"col": 18,"name": "ReturnType","comptime": true},{"file": 5,"line": 1026,"col": 45,"name": "bytes"},{"file": 5,"line": 1026,"col": 64,"name": "endian"},{"file": 5,"line": 2210,"col": 17,"name": "addr"},{"file": 5,"line": 2210,"col": 30,"name": "alignment"},{"file": 5,"line": 1252,"col": 21,"name": "T","comptime": true},{"file": 5,"line": 1252,"col": 39,"name": "buffer"},{"file": 5,"line": 1252,"col": 53,"name": "value"},{"file": 5,"line": 1252,"col": 63,"name": "endian"},{"file": 5,"line": 890,"col": 12,"name": "allocator"},{"file": 5,"line": 890,"col": 35,"name": "T","comptime": true},{"file": 5,"line": 890,"col": 53,"name": "m"},{"file": 5,"line": 1493,"col": 12,"name": "allocator"},{"file": 5,"line": 1493,"col": 35,"name": "separator"},{"file": 5,"line": 1493,"col": 58,"name": "slices"},{"file": 5,"line": 1538,"col": 14,"name": "allocator"},{"file": 5,"line": 1538,"col": 37,"name": "T","comptime": true},{"file": 5,"line": 1538,"col": 55,"name": "slices"},{"file": 5,"line": 1932,"col": 20,"name": "T","comptime": true},{"file": 5,"line": 1932,"col": 38,"name": "bytes"},{"file": 5,"line": 1807,"col": 16,"name": "T","comptime": true},{"file": 5,"line": 1807,"col": 34,"name": "x"},{"file": 5,"line": 1807,"col": 40,"name": "endianness_of_x"},{"file": 5,"line": 995,"col": 18,"name": "T","comptime": true},{"file": 5,"line": 995,"col": 36,"name": "haystack"},{"file": 5,"line": 995,"col": 57,"name": "start_index"},{"file": 5,"line": 995,"col": 77,"name": "needle"},{"file": 5,"line": 1823,"col": 22,"name": "T","comptime": true},{"file": 5,"line": 1823,"col": 40,"name": "x"},{"file": 5,"line": 2194,"col": 21,"name": "addr"},{"file": 5,"line": 2194,"col": 34,"name": "alignment"},{"file": 5,"line": 1114,"col": 20,"name": "T","comptime": true},{"file": 5,"line": 1114,"col": 38,"name": "bytes"},{"file": 5,"line": 1114,"col": 57,"name": "endian"},{"file": 5,"line": 1815,"col": 16,"name": "T","comptime": true},{"file": 5,"line": 1815,"col": 34,"name": "x"},{"file": 5,"line": 1815,"col": 40,"name": "desired_endianness"},{"file": 5,"line": 873,"col": 23,"name": "Elem","comptime": true},{"file": 5,"line": 873,"col": 44,"name": "sentinel","comptime": true},{"file": 5,"line": 873,"col": 69,"name": "ptr"},{"file": 5,"line": 354,"col": 14,"name": "T","comptime": true},{"file": 5,"line": 956,"col": 22,"name": "T","comptime": true},{"file": 5,"line": 956,"col": 40,"name": "slice"},{"file": 5,"line": 956,"col": 58,"name": "values"},{"file": 5,"line": 592,"col": 13,"name": "T","comptime": true},{"file": 5,"line": 592,"col": 31,"name": "lhs"},{"file": 5,"line": 592,"col": 47,"name": "rhs"},{"file": 5,"line": 1791,"col": 22,"name": "T","comptime": true},{"file": 5,"line": 1791,"col": 40,"name": "x"},{"file": 5,"line": 1799,"col": 19,"name": "T","comptime": true},{"file": 5,"line": 1799,"col": 37,"name": "x"},{"file": 5,"line": 2167,"col": 20,"name": "addr"},{"file": 5,"line": 2167,"col": 33,"name": "alignment"},{"file": 5,"line": 930,"col": 21,"name": "T","comptime": true},{"file": 5,"line": 930,"col": 39,"name": "slice"},{"file": 5,"line": 930,"col": 57,"name": "value"},{"file": 5,"line": 1831,"col": 19,"name": "T","comptime": true},{"file": 5,"line": 1831,"col": 37,"name": "x"},{"file": 5,"line": 1160,"col": 22,"name": "T","comptime": true},{"file": 5,"line": 1160,"col": 40,"name": "buf"},{"file": 5,"line": 1160,"col": 73,"name": "value"},{"file": 5,"line": 952,"col": 18,"name": "T","comptime": true},{"file": 5,"line": 952,"col": 36,"name": "slice"},{"file": 5,"line": 952,"col": 54,"name": "values"},{"file": 5,"line": 721,"col": 12,"name": "ptr"},{"file": 5,"line": 614,"col": 16,"name": "T","comptime": true},{"file": 5,"line": 614,"col": 34,"name": "lhs"},{"file": 5,"line": 614,"col": 50,"name": "rhs"},{"file": 5,"line": 1417,"col": 16,"name": "T","comptime": true},{"file": 5,"line": 1417,"col": 34,"name": "haystack"},{"file": 5,"line": 1417,"col": 55,"name": "needle"},{"file": 5,"line": 914,"col": 12,"name": "T","comptime": true},{"file": 5,"line": 914,"col": 30,"name": "slice"},{"file": 5,"line": 914,"col": 48,"name": "values_to_strip"},{"file": 5,"line": 1305,"col": 16,"name": "buffer"},{"file": 5,"line": 1305,"col": 36,"name": "delimiter_bytes"},{"file": 5,"line": 638,"col": 19,"name": "T","comptime": true},{"file": 5,"line": 638,"col": 37,"name": "a"},{"file": 5,"line": 638,"col": 51,"name": "b"},{"file": 5,"line": 1057,"col": 22,"name": "T","comptime": true},{"file": 5,"line": 1057,"col": 40,"name": "bytes"},{"file": 5,"line": 2214,"col": 24,"name": "T","comptime": true},{"file": 5,"line": 2214,"col": 42,"name": "addr"},{"file": 5,"line": 2214,"col": 51,"name": "alignment"},{"file": 5,"line": 907,"col": 17,"name": "T","comptime": true},{"file": 5,"line": 907,"col": 35,"name": "slice"},{"file": 5,"line": 907,"col": 53,"name": "values_to_strip"},{"file": 5,"line": 500,"col": 18,"name": "T","comptime": true},{"file": 5,"line": 500,"col": 36,"name": "s"},{"file": 5,"line": 521,"col": 16,"name": "T","comptime": true},{"file": 5,"line": 521,"col": 34,"name": "init"},{"file": 5,"line": 663,"col": 12,"name": "T","comptime": true},{"file": 5,"line": 1365,"col": 13,"name": "buffer"},{"file": 5,"line": 1365,"col": 33,"name": "delimiter"},{"file": 5,"line": 984,"col": 19,"name": "T","comptime": true},{"file": 5,"line": 984,"col": 37,"name": "haystack"},{"file": 5,"line": 984,"col": 58,"name": "needle"},{"file": 5,"line": 1086,"col": 27,"name": "T","comptime": true},{"file": 5,"line": 1086,"col": 45,"name": "bytes"},{"file": 5,"line": 330,"col": 21,"name": "T","comptime": true},{"file": 5,"line": 330,"col": 39,"name": "dest"},{"file": 5,"line": 330,"col": 50,"name": "source"},{"file": 5,"line": 882,"col": 16,"name": "T","comptime": true},{"file": 5,"line": 882,"col": 34,"name": "slice"},{"file": 5,"line": 882,"col": 52,"name": "scalar"},{"file": 5,"line": 627,"col": 11,"name": "T","comptime": true},{"file": 5,"line": 627,"col": 29,"name": "a"},{"file": 5,"line": 627,"col": 43,"name": "b"},{"file": 5,"line": 1103,"col": 15,"name": "T","comptime": true},{"file": 5,"line": 1103,"col": 33,"name": "bytes"},{"file": 5,"line": 1103,"col": 78,"name": "endian"},{"file": 5,"line": 302,"col": 24,"name": "self"},{"file": 5,"line": 302,"col": 42,"name": "old_mem"},{"file": 5,"line": 302,"col": 57,"name": "old_align"},{"file": 5,"line": 302,"col": 73,"name": "new_size"},{"file": 5,"line": 302,"col": 90,"name": "new_align"},{"file": 5,"line": 1989,"col": 26,"name": "T","comptime": true},{"file": 5,"line": 1989,"col": 44,"name": "bytesType","comptime": true},{"file": 5,"line": 1915,"col": 26,"name": "T","comptime": true},{"file": 5,"line": 1915,"col": 44,"name": "B","comptime": true},{"file": 5,"line": 1838,"col": 21,"name": "P","comptime": true},{"file": 5,"line": 2072,"col": 26,"name": "sliceType","comptime": true},{"file": 5,"line": 305,"col": 23,"name": "self"},{"file": 5,"line": 305,"col": 41,"name": "old_mem"},{"file": 5,"line": 305,"col": 56,"name": "old_align"},{"file": 5,"line": 305,"col": 72,"name": "new_size"},{"file": 5,"line": 305,"col": 89,"name": "new_align"},{"file": 6,"line": 416,"col": 12,"name": "T","comptime": true},{"file": 6,"line": 416,"col": 30,"name": "x"},{"file": 6,"line": 416,"col": 36,"name": "r"},{"file": 6,"line": 686,"col": 15,"name": "x"},{"file": 6,"line": 592,"col": 16,"name": "T","comptime": true},{"file": 6,"line": 592,"col": 34,"name": "numerator"},{"file": 6,"line": 592,"col": 48,"name": "denominator"},{"file": 6,"line": 822,"col": 22,"name": "T","comptime": true},{"file": 6,"line": 822,"col": 40,"name": "value"},{"file": 6,"line": 967,"col": 15,"name": "T","comptime": true},{"file": 6,"line": 967,"col": 33,"name": "a"},{"file": 6,"line": 967,"col": 39,"name": "b"},{"file": 6,"line": 388,"col": 11,"name": "T","comptime": true},{"file": 6,"line": 388,"col": 29,"name": "a"},{"file": 6,"line": 388,"col": 35,"name": "shift_amt"},{"file": 6,"line": 744,"col": 12,"name": "T","comptime": true},{"file": 6,"line": 744,"col": 30,"name": "x"},{"file": 6,"line": 341,"col": 11,"name": "T","comptime": true},{"file": 6,"line": 341,"col": 29,"name": "a"},{"file": 6,"line": 341,"col": 35,"name": "b"},{"file": 6,"line": 894,"col": 17,"name": "T","comptime": true},{"file": 6,"line": 894,"col": 35,"name": "value"},{"file": 6,"line": 638,"col": 11,"name": "T","comptime": true},{"file": 6,"line": 638,"col": 29,"name": "numerator"},{"file": 6,"line": 638,"col": 43,"name": "denominator"},{"file": 6,"line": 1028,"col": 13,"name": "a"},{"file": 6,"line": 1028,"col": 21,"name": "b"},{"file": 6,"line": 315,"col": 13,"name": "val"},{"file": 6,"line": 315,"col": 23,"name": "lower"},{"file": 6,"line": 315,"col": 35,"name": "upper"},{"file": 6,"line": 873,"col": 21,"name": "T","comptime": true},{"file": 6,"line": 873,"col": 39,"name": "x"},{"file": 6,"line": 810,"col": 29,"name": "T","comptime": true},{"file": 6,"line": 810,"col": 47,"name": "value"},{"file": 6,"line": 355,"col": 16,"name": "T","comptime": true},{"file": 6,"line": 355,"col": 34,"name": "a"},{"file": 6,"line": 355,"col": 40,"name": "shift_amt"},{"file": 6,"line": 661,"col": 11,"name": "T","comptime": true},{"file": 6,"line": 661,"col": 29,"name": "numerator"},{"file": 6,"line": 661,"col": 43,"name": "denominator"},{"file": 6,"line": 346,"col": 11,"name": "T","comptime": true},{"file": 6,"line": 346,"col": 29,"name": "a"},{"file": 6,"line": 346,"col": 35,"name": "b"},{"file": 6,"line": 209,"col": 25,"name": "T","comptime": true},{"file": 6,"line": 782,"col": 23,"name": "T","comptime": true},{"file": 6,"line": 782,"col": 41,"name": "value"},{"file": 6,"line": 463,"col": 23,"name": "from","comptime": true},{"file": 6,"line": 463,"col": 52,"name": "to","comptime": true},{"file": 6,"line": 435,"col": 12,"name": "T","comptime": true},{"file": 6,"line": 435,"col": 30,"name": "x"},{"file": 6,"line": 435,"col": 36,"name": "r"},{"file": 6,"line": 917,"col": 14,"name": "T","comptime": true},{"file": 6,"line": 351,"col": 14,"name": "x"},{"file": 6,"line": 769,"col": 17,"name": "alignment","comptime": true},{"file": 6,"line": 769,"col": 42,"name": "ptr"},{"file": 6,"line": 336,"col": 11,"name": "T","comptime": true},{"file": 6,"line": 336,"col": 29,"name": "a"},{"file": 6,"line": 336,"col": 35,"name": "b"},{"file": 6,"line": 613,"col": 16,"name": "T","comptime": true},{"file": 6,"line": 613,"col": 34,"name": "numerator"},{"file": 6,"line": 613,"col": 48,"name": "denominator"},{"file": 6,"line": 721,"col": 18,"name": "x"},{"file": 6,"line": 106,"col": 17,"name": "value"},{"file": 6,"line": 1064,"col": 15,"name": "a"},{"file": 6,"line": 1064,"col": 23,"name": "op"},{"file": 6,"line": 1064,"col": 44,"name": "b"},{"file": 6,"line": 362,"col": 11,"name": "T","comptime": true},{"file": 6,"line": 362,"col": 29,"name": "a"},{"file": 6,"line": 362,"col": 35,"name": "shift_amt"},{"file": 6,"line": 100,"col": 16,"name": "T","comptime": true},{"file": 6,"line": 100,"col": 34,"name": "x"},{"file": 6,"line": 100,"col": 40,"name": "y"},{"file": 6,"line": 100,"col": 46,"name": "epsilon"},{"file": 6,"line": 222,"col": 25,"name": "T","comptime": true},{"file": 6,"line": 538,"col": 14,"name": "x"},{"file": 6,"line": 571,"col": 16,"name": "T","comptime": true},{"file": 6,"line": 571,"col": 34,"name": "numerator"},{"file": 6,"line": 571,"col": 48,"name": "denominator"},{"file": 7,"line": 160,"col": 25,"name": "first_address"},{"file": 7,"line": 160,"col": 48,"name": "stack_trace"},{"file": 7,"line": 412,"col": 4,"name": "out_stream"},{"file": 7,"line": 413,"col": 4,"name": "debug_info"},{"file": 7,"line": 414,"col": 4,"name": "tty_config"},{"file": 7,"line": 415,"col": 4,"name": "start_addr"},{"file": 7,"line": 113,"col": 29,"name": "start_addr"},{"file": 7,"line": 397,"col": 4,"name": "out_stream"},{"file": 7,"line": 398,"col": 4,"name": "debug_info"},{"file": 7,"line": 399,"col": 4,"name": "tty_config"},{"file": 7,"line": 400,"col": 4,"name": "start_addr"},{"file": 7,"line": 204,"col": 22,"name": "stack_trace"},{"file": 7,"line": 318,"col": 4,"name": "stack_trace"},{"file": 7,"line": 319,"col": 4,"name": "out_stream"},{"file": 7,"line": 320,"col": 4,"name": "allocator"},{"file": 7,"line": 321,"col": 4,"name": "debug_info"},{"file": 7,"line": 322,"col": 4,"name": "tty_config"},{"file": 7,"line": 236,"col": 13,"name": "format","comptime": true},{"file": 7,"line": 236,"col": 42,"name": "args"},{"file": 7,"line": 567,"col": 28,"name": "debug_info"},{"file": 7,"line": 567,"col": 52,"name": "out_stream"},{"file": 7,"line": 567,"col": 69,"name": "address"},{"file": 7,"line": 567,"col": 85,"name": "tty_config"},{"file": 7,"line": 859,"col": 24,"name": "allocator"},{"file": 7,"line": 859,"col": 51,"name": "elf_file"},{"file": 7,"line": 254,"col": 18,"name": "trace"},{"file": 7,"line": 254,"col": 53,"name": "first_trace_addr"},{"file": 7,"line": 254,"col": 79,"name": "format","comptime": true},{"file": 7,"line": 254,"col": 108,"name": "args"},{"file": 7,"line": 134,"col": 30,"name": "bp"},{"file": 7,"line": 134,"col": 41,"name": "ip"},{"file": 7,"line": 1838,"col": 28,"name": "prefix"},{"file": 7,"line": 652,"col": 25,"name": "allocator"},{"file": 7,"line": 60,"col": 12,"name": "fmt","comptime": true},{"file": 7,"line": 60,"col": 38,"name": "args"},{"file": 7,"line": 1804,"col": 25,"name": "info"},{"file": 7,"line": 931,"col": 22,"name": "allocator"},{"file": 7,"line": 931,"col": 49,"name": "macho_file"},{"file": 7,"line": 832,"col": 23,"name": "stream"},{"file": 7,"line": 832,"col": 36,"name": "allocator"},{"file": 7,"line": 1068,"col": 16,"name": "file"},{"file": 7,"line": 1016,"col": 26,"name": "out_stream"},{"file": 7,"line": 1016,"col": 43,"name": "line_info"},{"file": 7,"line": 598,"col": 4,"name": "out_stream"},{"file": 7,"line": 599,"col": 4,"name": "line_info"},{"file": 7,"line": 600,"col": 4,"name": "address"},{"file": 7,"line": 601,"col": 4,"name": "symbol_name"},{"file": 7,"line": 602,"col": 4,"name": "compile_unit_name"},{"file": 7,"line": 603,"col": 4,"name": "tty_config"},{"file": 7,"line": 604,"col": 4,"name": "printLineFromFile","comptime": true},{"file": 7,"line": 1815,"col": 30,"name": "info"},{"file": 7,"line": 1815,"col": 65,"name": "msg","comptime": true},{"file": 7,"line": 1815,"col": 83,"name": "format","comptime": true},{"file": 7,"line": 849,"col": 13,"name": "ptr"},{"file": 7,"line": 849,"col": 30,"name": "offset"},{"file": 7,"line": 849,"col": 43,"name": "size"},{"file": 7,"line": 548,"col": 22,"name": "symbols"},{"file": 7,"line": 548,"col": 52,"name": "address"},{"file": 7,"line": 1752,"col": 23,"name": "sig"},{"file": 7,"line": 1752,"col": 33,"name": "info"},{"file": 7,"line": 1752,"col": 60,"name": "ctx_ptr"},{"file": 7,"line": 676,"col": 21,"name": "allocator"},{"file": 7,"line": 676,"col": 48,"name": "coff_file"},{"file": 7,"line": 502,"col": 18,"name": "di"},{"file": 7,"line": 502,"col": 40,"name": "mod"},{"file": 8,"line": 482,"col": 11,"name": "a"},{"file": 8,"line": 482,"col": 19,"name": "b"},{"file": 8,"line": 126,"col": 13,"name": "T","comptime": true},{"file": 8,"line": 98,"col": 16,"name": "T","comptime": true},{"file": 8,"line": 252,"col": 20,"name": "T","comptime": true},{"file": 8,"line": 641,"col": 18,"name": "T","comptime": true},{"file": 8,"line": 641,"col": 36,"name": "name","comptime": true},{"file": 8,"line": 650,"col": 19,"name": "T","comptime": true},{"file": 8,"line": 112,"col": 17,"name": "T","comptime": true},{"file": 8,"line": 687,"col": 14,"name": "len","comptime": true},{"file": 8,"line": 687,"col": 33,"name": "child","comptime": true},{"file": 8,"line": 369,"col": 17,"name": "T","comptime": true},{"file": 8,"line": 369,"col": 35,"name": "field_name","comptime": true},{"file": 8,"line": 432,"col": 17,"name": "u"},{"file": 8,"line": 288,"col": 23,"name": "T","comptime": true},{"file": 8,"line": 288,"col": 41,"name": "decl_name","comptime": true},{"file": 8,"line": 658,"col": 16,"name": "Namespace","comptime": true},{"file": 8,"line": 658,"col": 42,"name": "Decl","comptime": true},{"file": 8,"line": 409,"col": 15,"name": "T","comptime": true},{"file": 8,"line": 174,"col": 16,"name": "T","comptime": true},{"file": 8,"line": 209,"col": 23,"name": "T","comptime": true},{"file": 8,"line": 11,"col": 15,"name": "v"},{"file": 8,"line": 145,"col": 12,"name": "T","comptime": true},{"file": 8,"line": 629,"col": 17,"name": "Tag","comptime": true},{"file": 8,"line": 629,"col": 37,"name": "tag_int"},{"file": 8,"line": 457,"col": 22,"name": "U","comptime": true},{"file": 8,"line": 457,"col": 40,"name": "tag"},{"file": 8,"line": 324,"col": 14,"name": "T","comptime": true},{"file": 8,"line": 54,"col": 20,"name": "T","comptime": true},{"file": 8,"line": 54,"col": 38,"name": "str"},{"file": 9,"line": 226,"col": 17,"name": "loop"},{"file": 9,"line": 60,"col": 11,"name": "handle"},{"file": 9,"line": 60,"col": 32,"name": "system_table"},{"file": 9,"line": 190,"col": 8,"name": "c_argc"},{"file": 9,"line": 190,"col": 21,"name": "c_argv"},{"file": 9,"line": 190,"col": 41,"name": "c_envp"},{"file": 9,"line": 181,"col": 20,"name": "argc"},{"file": 9,"line": 181,"col": 33,"name": "argv"},{"file": 9,"line": 181,"col": 51,"name": "envp"},{"file": 9,"line": 39,"col": 4,"name": "hinstDLL"},{"file": 9,"line": 40,"col": 4,"name": "fdwReason"},{"file": 9,"line": 41,"col": 4,"name": "lpReserved"},{"file": 10,"line": 997,"col": 22,"name": "self"},{"file": 10,"line": 1045,"col": 27,"name": "self"},{"file": 10,"line": 969,"col": 21,"name": "self"},{"file": 10,"line": 969,"col": 35,"name": "allocator"},{"file": 10,"line": 1094,"col": 23,"name": "self"},{"file": 10,"line": 1057,"col": 18,"name": "self"},{"file": 10,"line": 1072,"col": 20,"name": "self"},{"file": 10,"line": 1049,"col": 19,"name": "self"},{"file": 10,"line": 973,"col": 29,"name": "allocator"},{"file": 10,"line": 973,"col": 56,"name": "cpu_arch"},{"file": 10,"line": 973,"col": 76,"name": "os_tag"},{"file": 10,"line": 973,"col": 92,"name": "abi"},{"file": 10,"line": 1011,"col": 27,"name": "self"},{"file": 10,"line": 1001,"col": 40,"name": "cpu_arch"},{"file": 10,"line": 1001,"col": 60,"name": "abi"},{"file": 10,"line": 981,"col": 20,"name": "self"},{"file": 10,"line": 1033,"col": 33,"name": "os_tag"},{"file": 10,"line": 1033,"col": 49,"name": "cpu_arch"},{"file": 10,"line": 1019,"col": 34,"name": "cpu_arch"},{"file": 10,"line": 1019,"col": 54,"name": "abi"},{"file": 10,"line": 1053,"col": 17,"name": "self"},{"file": 10,"line": 1104,"col": 28,"name": "self"},{"file": 10,"line": 1015,"col": 28,"name": "self"},{"file": 10,"line": 1156,"col": 37,"name": "self"},{"file": 10,"line": 1084,"col": 32,"name": "self"},{"file": 10,"line": 985,"col": 28,"name": "cpu_arch"},{"file": 10,"line": 985,"col": 48,"name": "os_tag"},{"file": 10,"line": 977,"col": 23,"name": "self"},{"file": 10,"line": 977,"col": 37,"name": "allocator"},{"file": 10,"line": 1076,"col": 32,"name": "os_tag"},{"file": 10,"line": 1076,"col": 48,"name": "abi"},{"file": 10,"line": 1061,"col": 21,"name": "self"},{"file": 10,"line": 1080,"col": 21,"name": "self"},{"file": 10,"line": 1029,"col": 21,"name": "self"},{"file": 10,"line": 1068,"col": 18,"name": "self"},{"file": 10,"line": 63,"col": 36,"name": "tag"},{"file": 10,"line": 56,"col": 28,"name": "tag"},{"file": 10,"line": 109,"col": 35,"name": "self"},{"file": 10,"line": 109,"col": 60,"name": "ver"},{"file": 10,"line": 143,"col": 27,"name": "tag"},{"file": 4,"line": 408,"col": 31,"name": "self"},{"file": 4,"line": 408,"col": 44,"name": "ver"},{"file": 10,"line": 956,"col": 24,"name": "arch"},{"file": 10,"line": 390,"col": 22,"name": "abi"},{"file": 10,"line": 397,"col": 24,"name": "abi"},{"file": 10,"line": 334,"col": 23,"name": "arch"},{"file": 10,"line": 334,"col": 39,"name": "target_os"},{"file": 10,"line": 383,"col": 21,"name": "abi"},{"file": 10,"line": 99,"col": 39,"name": "self"},{"file": 10,"line": 99,"col": 52,"name": "ver"},{"file": 10,"line": 941,"col": 28,"name": "arch"},{"file": 10,"line": 909,"col": 27,"name": "arch"},{"file": 10,"line": 899,"col": 25,"name": "model"},{"file": 10,"line": 899,"col": 46,"name": "arch"},{"file": 10,"line": 534,"col": 35,"name": "F","comptime": true},{"file": 10,"line": 490,"col": 37,"name": "set"},{"file": 10,"line": 490,"col": 48,"name": "other_set"},{"file": 10,"line": 503,"col": 40,"name": "set"},{"file": 10,"line": 503,"col": 51,"name": "other_set"},{"file": 10,"line": 496,"col": 37,"name": "set"},{"file": 10,"line": 496,"col": 48,"name": "arch_feature_index"},{"file": 10,"line": 525,"col": 31,"name": "set"},{"file": 10,"line": 476,"col": 33,"name": "set"},{"file": 10,"line": 476,"col": 43,"name": "arch_feature_index"},{"file": 10,"line": 483,"col": 34,"name": "set"},{"file": 10,"line": 483,"col": 45,"name": "arch_feature_index"},{"file": 10,"line": 529,"col": 27,"name": "set"},{"file": 10,"line": 529,"col": 37,"name": "other"},{"file": 10,"line": 470,"col": 31,"name": "set"},{"file": 10,"line": 508,"col": 44,"name": "set"},{"file": 10,"line": 508,"col": 55,"name": "all_features_list"}],"files": ["/Users/benjamin.feng/projects/zee_alloc/src/wasm_exports.zig","/Users/benjamin.feng/Library/Application Support/zig/stage1/builtin/HQhB3wxyAtWkNQDB9A1GhZ3VBfaNpwZgn7zo0j9C16hr6spKk7t805ZSNPacpXYU/builtin.zig","/Users/benjamin.feng/projects/zig/lib/std/std.zig","/Users/benjamin.feng/projects/zee_alloc/src/main.zig","/Users/benjamin.feng/projects/zig/lib/std/builtin.zig","/Users/benjamin.feng/projects/zig/lib/std/mem.zig","/Users/benjamin.feng/projects/zig/lib/std/math.zig","/Users/benjamin.feng/projects/zig/lib/std/debug.zig","/Users/benjamin.feng/projects/zig/lib/std/meta.zig","/Users/benjamin.feng/projects/zig/lib/std/start.zig","/Users/benjamin.feng/projects/zig/lib/std/target.zig"]};