zigAnalysis={"typeKinds": ["Type","Void","Bool","NoReturn","Int","Float","Pointer","Array","Struct","ComptimeFloat","ComptimeInt","Undefined","Null","Optional","ErrorUnion","ErrorSet","Enum","Union","Fn","BoundFn","ArgTuple","Opaque","Frame","AnyFrame","Vector","EnumLiteral"],"params": {"zigId": "C6RMOi_VluVzP0YIHQorD0SJ20aZDLYtvDM2QZ8bGxrsuz0R4Yv1X0LCY_BNW-xl","zigVersion": "0.5.0+b9482fc32","builds": [{"target": "x86_64-macosx-gnu"}],"rootName": "test"},"rootPkg": 0,"calls": [{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 530,"result": {"type": 348,"value": 352},"args": [{"type": 348,"value": 353}]},{"fn": 531,"result": {"type": 348,"value": 355},"args": [{"type": 348,"value": 356}]},{"fn": 532,"result": {"type": 358,"value": null},"args": [{"type": 348,"value": 359}]},{"fn": 533,"result": {"type": 348,"value": 361},"args": [{"type": 348,"value": 362}]},{"fn": 534,"result": {"type": 348,"value": 364},"args": [{"type": 348,"value": 350}]},{"fn": 535,"result": {"type": 358,"value": null},"args": [{"type": 358,"value": null}]},{"fn": 536,"result": {"type": 348,"value": 367},"args": [{"type": 348,"value": 368}]},{"fn": 537,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 370}]},{"fn": 538,"result": {"type": 348,"value": 372},"args": [{"type": 348,"value": 372},{"type": 348,"value": 372}]},{"fn": 92,"result": {"type": 373,"value": null},"args": [{"type": 374,"value": null}]},{"fn": 539,"result": {"type": 358,"value": null},"args": [{"type": 358,"value": null},{"type": 358,"value": null}]},{"fn": 539,"result": {"type": 358,"value": null},"args": [{"type": 358,"value": null},{"type": 358,"value": null}]},{"fn": 539,"result": {"type": 358,"value": null},"args": [{"type": 358,"value": null},{"type": 358,"value": null}]},{"fn": 539,"result": {"type": 358,"value": null},"args": [{"type": 358,"value": null},{"type": 358,"value": null}]},{"fn": 539,"result": {"type": 358,"value": null},"args": [{"type": 358,"value": null},{"type": 358,"value": null}]},{"fn": 540,"result": {"type": 348,"value": 377},"args": [{"type": 348,"value": 378},{"type": 348,"value": 379},{"type": 63,"value": 86},{"type": 64,"value": 87}]},{"fn": 541,"result": {"type": 348,"value": 381},"args": [{"type": 348,"value": 382},{"type": 383,"value": null}]},{"fn": 530,"result": {"type": 348,"value": 384},"args": [{"type": 348,"value": 356}]},{"fn": 538,"result": {"type": 348,"value": 370},"args": [{"type": 348,"value": 385},{"type": 348,"value": 370}]},{"fn": 532,"result": {"type": 358,"value": null},"args": [{"type": 348,"value": 385}]},{"fn": 542,"result": {"type": 358,"value": null},"args": [{"type": 348,"value": 370}]},{"fn": 543,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 370}]},{"fn": 544,"result": {"type": 358,"value": null},"args": [{"type": 348,"value": 389}]},{"fn": 545,"result": {"type": 348,"value": 372},"args": [{"type": 348,"value": 370}]},{"fn": 541,"result": {"type": 348,"value": 391},"args": [{"type": 348,"value": 392},{"type": 383,"value": null}]},{"fn": 534,"result": {"type": 348,"value": 381},"args": [{"type": 348,"value": 382}]},{"fn": 546,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 389}]},{"fn": 7,"result": {"type": 394,"value": null},"args": [{"type": 347,"value": null}]},{"fn": 547,"result": {"type": 347,"value": null},"args": [{"type": 396,"value": null}]},{"fn": 548,"result": {"type": 398,"value": 543},"args": [{"type": 399,"value": null}]},{"fn": 549,"result": {"type": 347,"value": null},"args": [{"type": 370,"value": null}]},{"fn": 550,"result": {"type": 64,"value": 87},"args": [{"type": 348,"value": 378}]},{"fn": 534,"result": {"type": 348,"value": 391},"args": [{"type": 348,"value": 392}]},{"fn": 551,"result": {"type": 348,"value": 403},"args": [{"type": 348,"value": 404}]},{"fn": 542,"result": {"type": 358,"value": null},"args": [{"type": 348,"value": 359}]},{"fn": 538,"result": {"type": 348,"value": 370},"args": [{"type": 348,"value": 370},{"type": 348,"value": 370}]},{"fn": 552,"result": {"type": 348,"value": 406},"args": [{"type": 407,"value": null}]},{"fn": 552,"result": {"type": 348,"value": 408},"args": [{"type": 407,"value": null}]},{"fn": 543,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 389}]},{"fn": 532,"result": {"type": 358,"value": null},"args": [{"type": 348,"value": 370}]},{"fn": 553,"result": {"type": 348,"value": 370},"args": [{"type": 348,"value": 389}]},{"fn": 554,"result": {"type": 372,"value": null},"args": [{"type": 348,"value": 370},{"type": 370,"value": null}]},{"fn": 554,"result": {"type": 372,"value": null},"args": [{"type": 348,"value": 370},{"type": 370,"value": null}]},{"fn": 531,"result": {"type": 348,"value": 411},"args": [{"type": 348,"value": 353}]},{"fn": 555,"result": {"type": 348,"value": 413},"args": [{"type": 348,"value": 414}]},{"fn": 556,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 389}]},{"fn": 541,"result": {"type": 348,"value": 364},"args": [{"type": 348,"value": 350},{"type": 383,"value": null}]},{"fn": 555,"result": {"type": 348,"value": 416},"args": [{"type": 348,"value": 417}]},{"fn": 557,"result": {"type": 348,"value": 419},"args": [{"type": 348,"value": 389}]},{"fn": 91,"result": {"type": 347,"value": null},"args": [{"type": 374,"value": null}]},{"fn": 558,"result": {"type": 63,"value": 86},"args": [{"type": 348,"value": 378}]},{"fn": 542,"result": {"type": 358,"value": null},"args": [{"type": 348,"value": 385}]},{"fn": 559,"result": {"type": 347,"value": null},"args": [{"type": 396,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]},{"fn": 529,"result": {"type": 347,"value": null},"args": [{"type": 348,"value": 349},{"type": 350,"value": null},{"type": 350,"value": null}]}],"packages": [{"name": "","file": 0,"main": 422,"table": {"builtin": 1,"std": 2,"root": 0}},{"name": "builtin","file": 1,"main": 423,"table": {"std": 2}},{"name": "std","file": 2,"main": 424,"table": {"builtin": 1,"std": 2,"root": 3}},{"name": "std.special","file": 3,"main": 425,"table": {"builtin": 1,"std": 2}}],"types": [{"kind": 18,"name": "fn([]const u8, ?*std.builtin.StackTrace) noreturn","generic": false,"ret": 426,"args": [350,427]},{"kind": 18,"name": "fn() anyerror!void","generic": false,"ret": 428},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace, ?usize, []const u8) noreturn","generic": false,"ret": 426,"args": [429,430,350]},{"kind": 18,"name": "fn([]u8) std.heap.FixedBufferAllocator","generic": false,"ret": 431,"args": [362]},{"kind": 18,"name": "fn(bool) void","generic": false,"ret": 394,"args": [347]},{"kind": 18,"name": "fn(*std.mem.Allocator) ZeeAlloc((struct Config constant))","generic": false,"ret": 408,"args": [432]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), usize) usize","generic": false,"ret": 370,"args": [433,370]},{"kind": 18,"name": "fn(usize, usize) void","generic": false,"ret": 394,"args": [370,370]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant))) usize","generic": false,"ret": 370,"args": [433]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*u8","generic": false,"ret": 434,"args": [432]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]u8","generic": false,"ret": 435,"args": [432,370]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8) void","generic": false,"ret": 394,"args": [432,362]},{"kind": 18,"name": "fn(*std.mem.Allocator) ZeeAlloc((struct Config constant))","generic": false,"ret": 406,"args": [432]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant))) usize","generic": false,"ret": 370,"args": [436]},{"kind": 18,"name": "fn(*std.mem.Allocator, *u8) void","generic": false,"ret": 394,"args": [432,437]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, usize) std.mem.Error![]u8","generic": false,"ret": 435,"args": [432,362,370]},{"kind": 18,"name": "fn([*]u8, [*]u8) void","generic": false,"ret": 394,"args": [438,438]},{"kind": 18,"name": "fn([*]u8) @typeOf(Frame.restorePayload).ReturnType.ErrorSet!*Frame","generic": false,"ret": 439,"args": [438]},{"kind": 18,"name": "fn(*Frame) @typeOf(Frame.validate).ReturnType.ErrorSet!void","generic": false,"ret": 440,"args": [441]},{"kind": 18,"name": "fn(usize) bool","generic": false,"ret": 347,"args": [370]},{"kind": 18,"name": "fn(*Frame) bool","generic": false,"ret": 347,"args": [441]},{"kind": 18,"name": "fn(*std.mem.Allocator) @typeOf(testAllocator).ReturnType.ErrorSet!void","generic": false,"ret": 442,"args": [432]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]*i32","generic": false,"ret": 443,"args": [432,370]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*i32","generic": false,"ret": 444,"args": [432]},{"kind": 18,"name": "fn(*std.mem.Allocator, []*i32, usize) std.mem.Error![]*i32","generic": false,"ret": 443,"args": [432,445,370]},{"kind": 18,"name": "fn(i32, i32) void","generic": false,"ret": 394,"args": [446,446]},{"kind": 18,"name": "fn(*std.mem.Allocator, *i32) void","generic": false,"ret": 394,"args": [432,447]},{"kind": 18,"name": "fn(*std.mem.Allocator, []*i32, usize) []*i32","generic": false,"ret": 445,"args": [432,445,370]},{"kind": 18,"name": "fn(*std.mem.Allocator, []*i32) void","generic": false,"ret": 394,"args": [432,445]},{"kind": 18,"name": "fn(*std.mem.Allocator) @typeOf(testAllocatorAligned).ReturnType.ErrorSet!void","generic": false,"ret": 448,"args": [432]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]align(8) u8","generic": false,"ret": 449,"args": [432,370]},{"kind": 18,"name": "fn(*std.mem.Allocator, []align(8) u8, usize) std.mem.Error![]align(8) u8","generic": false,"ret": 449,"args": [432,450,370]},{"kind": 18,"name": "fn(*std.mem.Allocator, []align(8) u8, usize) []align(8) u8","generic": false,"ret": 450,"args": [432,450,370]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @typeOf(std.heap.DirectAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 451,"args": [432,362,452,370,452]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) []u8","generic": false,"ret": 362,"args": [432,362,452,370,452]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) std.heap.error:43:63![]u8","generic": false,"ret": 453,"args": [432,370,452]},{"kind": 18,"name": "fn(usize, usize) usize","generic": false,"ret": 370,"args": [370,370]},{"kind": 18,"name": "fn([]align(4096) u8) void","generic": false,"ret": 394,"args": [454]},{"kind": 18,"name": "fn() noreturn","generic": false,"ret": 426},{"kind": 18,"name": "fn() @typeOf(std.debug.getStderrStream).ReturnType.ErrorSet!*std.io.out_stream.OutStream(std.os.WriteError)","generic": false,"ret": 455},{"kind": 18,"name": "fn() std.os.windows.GetStdHandleError!std.fs.file.File","generic": false,"ret": 456},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.OutStream","generic": false,"ret": 457,"args": [458]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,350]},{"kind": 18,"name": "fn(std.builtin.StackTrace) void","generic": false,"ret": 394,"args": [461]},{"kind": 18,"name": "fn(?usize) void","generic": false,"ret": 394,"args": [430]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @typeOf(std.heap.FixedBufferAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 462,"args": [432,362,452,370,452]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) @typeOf(std.heap.FixedBufferAllocator.alloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 463,"args": [432,370,452]},{"kind": 18,"name": "fn() FreeList","generic": false,"ret": 464},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) std.mem.Error![]u8","generic": false,"ret": 435,"args": [432,362,452,370,452]},{"kind": 18,"name": "fn(usize) u6","generic": false,"ret": 372,"args": [370]},{"kind": 18,"name": "fn(u6, u6) u6","generic": false,"ret": 372,"args": [372,372]},{"kind": 18,"name": "fn(usize, usize) noreturn","generic": false,"ret": 426,"args": [370,370]},{"kind": 18,"name": "fn(usize) usize","generic": false,"ret": 370,"args": [370]},{"kind": 18,"name": "fn() FreeList","generic": false,"ret": 465},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), usize) usize","generic": false,"ret": 370,"args": [436,370]},{"kind": 18,"name": "fn([*]u8, [*]u8) noreturn","generic": false,"ret": 426,"args": [438,438]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]i32","generic": false,"ret": 466,"args": [432,370]},{"kind": 18,"name": "fn(i32, i32) noreturn","generic": false,"ret": 426,"args": [446,446]},{"kind": 18,"name": "fn(usize, usize) std.math.error:315:43!usize","generic": false,"ret": 467,"args": [370,370]},{"kind": 18,"name": "fn(?[*]align(4096) u8, usize, u32, u32, c_int, u64) std.os.MMapError![]align(4096) u8","generic": false,"ret": 468,"args": [469,370,470,470,471,385]},{"kind": 18,"name": "fn(c_int) u16","generic": false,"ret": 472,"args": [471]},{"kind": 18,"name": "fn(c_int) std.fs.file.File","generic": false,"ret": 458,"args": [471]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,350]},{"kind": 18,"name": "fn(*std.macho.nlist_64) u32","generic": false,"ret": 470,"args": [378]},{"kind": 18,"name": "fn(*std.macho.nlist_64, *std.macho.nlist_64) bool","generic": false,"ret": 347,"args": [378,378]},{"kind": 18,"name": "fn() @typeOf(std.debug.getSelfDebugInfo).ReturnType.ErrorSet!*std.debug.DebugInfo","generic": false,"ret": 473},{"kind": 18,"name": "fn(*std.mem.Allocator) @typeOf(std.debug.openSelfDebugInfo).ReturnType.ErrorSet!std.debug.DebugInfo","generic": false,"ret": 474,"args": [432]},{"kind": 18,"name": "fn() *std.mem.Allocator","generic": false,"ret": 432},{"kind": 18,"name": "fn(std.target.Target) bool","generic": false,"ret": 347,"args": [374]},{"kind": 18,"name": "fn(std.target.Target) std.target.Os","generic": false,"ret": 373,"args": [374]},{"kind": 18,"name": "fn(*std.mem.Allocator) @typeOf(std.debug.openSelfDebugInfoMacOs).ReturnType.ErrorSet!std.debug.DebugInfo","generic": false,"ret": 475,"args": [432]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.MachoSymbol","generic": false,"ret": 476,"args": [432,370]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.mem.Error!*std.macho.nlist_64","generic": false,"ret": 477,"args": [432]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.MachoSymbol, usize) []std.debug.MachoSymbol","generic": false,"ret": 478,"args": [432,478,370]},{"kind": 18,"name": "fn(std.debug.MachoSymbol, std.debug.MachoSymbol) bool","generic": false,"ret": 347,"args": [479,479]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, fn(std.debug.MachoSymbol, std.debug.MachoSymbol) bool) void","generic": false,"ret": 394,"args": [478,74]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql)","generic": false,"ret": 377,"args": [432]},{"kind": 18,"name": "fn() bool","generic": false,"ret": 347},{"kind": 18,"name": "fn(std.builtin.StackTrace, *std.io.out_stream.OutStream(std.os.WriteError), *std.mem.Allocator, *std.debug.DebugInfo, bool) @typeOf(std.debug.writeStackTrace).ReturnType.ErrorSet!void","generic": false,"ret": 480,"args": [461,460,432,481,347]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, *std.io.out_stream.OutStream(std.os.WriteError), usize, bool) @typeOf(std.debug.printSourceAtAddress).ReturnType.ErrorSet!void","generic": false,"ret": 482,"args": [481,460,370,347]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, *std.io.out_stream.OutStream(std.os.WriteError), usize, bool) @typeOf(std.debug.printSourceAtAddressMacOs).ReturnType.ErrorSet!void","generic": false,"ret": 483,"args": [481,460,370,347]},{"kind": 18,"name": "fn() usize","generic": false,"ret": 370},{"kind": 18,"name": "fn([]const std.debug.MachoSymbol, usize) ?*const std.debug.MachoSymbol","generic": false,"ret": 484,"args": [485,370]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,370]},{"kind": 18,"name": "fn([*]const u8) []const u8","generic": false,"ret": 350,"args": [486]},{"kind": 18,"name": "fn([]const u8) []const u8","generic": false,"ret": 350,"args": [350]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, std.debug.MachoSymbol, usize) @typeOf(std.debug.getLineNumberInfoMacOs).ReturnType.ErrorSet!std.debug.LineInfo","generic": false,"ret": 487,"args": [481,479,370]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), *std.macho.nlist_64) @typeOf(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql).getOrPut).ReturnType.ErrorSet!std.hash_map.GetOrPutResult","generic": false,"ret": 488,"args": [489,378]},{"kind": 18,"name": "fn(*const std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), *std.macho.nlist_64) ?*std.hash_map.KV","generic": false,"ret": 490,"args": [491,378]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql)) void","generic": false,"ret": 394,"args": [489]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql)) @typeOf(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql).autoCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 492,"args": [489]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), usize) @typeOf(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql).ensureCapacityExact).ReturnType.ErrorSet!void","generic": false,"ret": 493,"args": [489,370]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), usize) @typeOf(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql).initCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 494,"args": [489,370]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.hash_map.Entry","generic": false,"ret": 495,"args": [432,370]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), *std.macho.nlist_64) std.hash_map.InternalPutResult","generic": false,"ret": 496,"args": [489,378]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.hash_map.Entry) void","generic": false,"ret": 394,"args": [432,497]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) @typeOf(std.io.readFileAllocAligned).ReturnType.ErrorSet![]align(4) u8","generic": false,"ret": 498,"args": [432,350]},{"kind": 18,"name": "fn([]const u8) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 499,"args": [350]},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.GetPosError!u64","generic": false,"ret": 500,"args": [458]},{"kind": 18,"name": "fn(std.fs.file.File) void","generic": false,"ret": 394,"args": [458]},{"kind": 18,"name": "fn(u64) std.math.error:719:40!usize","generic": false,"ret": 501,"args": [385]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]align(4) u8","generic": false,"ret": 502,"args": [432,370]},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.InStream","generic": false,"ret": 503,"args": [458]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError), []u8) @typeOf(std.io.in_stream.InStream(std.os.ReadError).readNoEof).ReturnType.ErrorSet!void","generic": false,"ret": 504,"args": [505,362]},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(std.os.ReadError), []u8) std.os.ReadError!usize","generic": false,"ret": 506,"args": [505,362]},{"kind": 18,"name": "fn(*std.mem.Allocator, []align(4) u8) void","generic": false,"ret": 394,"args": [432,507]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), *std.macho.nlist_64) ?std.hash_map.KV","generic": false,"ret": 508,"args": [489,378]},{"kind": 18,"name": "fn([]const u8, []const u8) bool","generic": false,"ret": 347,"args": [350,350]},{"kind": 18,"name": "fn(*[*]const u8, *bool) @typeOf(std.debug.readInitialLengthMem).ReturnType.ErrorSet!u64","generic": false,"ret": 509,"args": [510,511]},{"kind": 18,"name": "fn([]const u8) u32","generic": false,"ret": 470,"args": [350]},{"kind": 18,"name": "fn([]const u8) u64","generic": false,"ret": 385,"args": [350]},{"kind": 18,"name": "fn(*[*]const u8, std.builtin.Endian) u16","generic": false,"ret": 472,"args": [510,512]},{"kind": 18,"name": "fn(*[*]const u8, std.builtin.Endian) u64","generic": false,"ret": 385,"args": [510,512]},{"kind": 18,"name": "fn(*[*]const u8, std.builtin.Endian) u32","generic": false,"ret": 470,"args": [510,512]},{"kind": 18,"name": "fn(*[*]const u8) u8","generic": false,"ret": 349,"args": [510]},{"kind": 18,"name": "fn(*[*]const u8) i8","generic": false,"ret": 513,"args": [510]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList([]const u8,null)","generic": false,"ret": 364,"args": [432]},{"kind": 18,"name": "fn(std.debug.DebugInfo) *std.mem.Allocator","generic": false,"ret": 432,"args": [514]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList([]const u8,null), []const u8) @typeOf(std.array_list.AlignedArrayList([]const u8,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 515,"args": [516,350]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList([]const u8,null)) @typeOf(std.array_list.AlignedArrayList([]const u8,null).addOne).ReturnType.ErrorSet!*[]const u8","generic": false,"ret": 517,"args": [516]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList([]const u8,null), usize) @typeOf(std.array_list.AlignedArrayList([]const u8,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 518,"args": [516,370]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList([]const u8,null)) usize","generic": false,"ret": 370,"args": [364]},{"kind": 18,"name": "fn(*std.mem.Allocator, [][]const u8, usize) std.mem.Error![][]const u8","generic": false,"ret": 519,"args": [432,520,370]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList([]const u8,null)) *[]const u8","generic": false,"ret": 521,"args": [516]},{"kind": 18,"name": "fn(*[*]const u8) []const u8","generic": false,"ret": 350,"args": [510]},{"kind": 18,"name": "fn(*std.mem.Allocator) std.array_list.AlignedArrayList(std.debug.FileEntry,null)","generic": false,"ret": 391,"args": [432]},{"kind": 18,"name": "fn(bool, []const []const u8, *std.array_list.AlignedArrayList(std.debug.FileEntry,null), usize) std.debug.LineNumberProgram","generic": false,"ret": 522,"args": [347,523,524,370]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList([]const u8,null)) []const []const u8","generic": false,"ret": 523,"args": [364]},{"kind": 18,"name": "fn(*[*]const u8) @typeOf(std.debug.leb128.readULEB128Mem).ReturnType.ErrorSet!usize","generic": false,"ret": 525,"args": [510]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.FileEntry,null), std.debug.FileEntry) @typeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).append).ReturnType.ErrorSet!void","generic": false,"ret": 526,"args": [524,392]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.FileEntry,null)) @typeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).addOne).ReturnType.ErrorSet!*std.debug.FileEntry","generic": false,"ret": 527,"args": [524]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.FileEntry,null), usize) @typeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).ensureCapacity).ReturnType.ErrorSet!void","generic": false,"ret": 528,"args": [524,370]},{"kind": 18,"name": "fn(std.array_list.AlignedArrayList(std.debug.FileEntry,null)) usize","generic": false,"ret": 370,"args": [391]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.FileEntry, usize) std.mem.Error![]std.debug.FileEntry","generic": false,"ret": 529,"args": [432,530,370]},{"kind": 18,"name": "fn(*std.array_list.AlignedArrayList(std.debug.FileEntry,null)) *std.debug.FileEntry","generic": false,"ret": 531,"args": [524]},{"kind": 18,"name": "fn(*[*]const u8) @typeOf(std.debug.leb128.readULEB128Mem).ReturnType.ErrorSet!u64","generic": false,"ret": 532,"args": [510]},{"kind": 18,"name": "fn(*std.debug.LineNumberProgram) @typeOf(std.debug.LineNumberProgram.checkLineMatch).ReturnType.ErrorSet!?std.debug.LineInfo","generic": false,"ret": 533,"args": [534]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const []const u8) @typeOf(std.fs.path.joinPosix).ReturnType.ErrorSet![]u8","generic": false,"ret": 535,"args": [432,523]},{"kind": 18,"name": "fn(*std.mem.Allocator, u8, []const []const u8) @typeOf(std.fs.path.joinSep).ReturnType.ErrorSet![]u8","generic": false,"ret": 536,"args": [432,349,523]},{"kind": 18,"name": "fn([]u8, []const u8) void","generic": false,"ret": 394,"args": [362,350]},{"kind": 18,"name": "fn(*[*]const u8, std.builtin.Endian) usize","generic": false,"ret": 370,"args": [510,512]},{"kind": 18,"name": "fn(*[*]const u8) @typeOf(std.debug.leb128.readILEB128Mem).ReturnType.ErrorSet!i64","generic": false,"ret": 537,"args": [510]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.LineInfo, usize, []const u8, []const u8, bool) @typeOf(std.debug.printLineInfo).ReturnType.ErrorSet!void","generic": false,"ret": 538,"args": [460,539,370,350,350,347]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8, u64, u64, usize, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,350,385,385,370,350,350]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), std.debug.LineInfo) @typeOf(std.debug.printLineFromFileAnyOs).ReturnType.ErrorSet!void","generic": false,"ret": 540,"args": [460,539]},{"kind": 18,"name": "fn(std.fs.file.File, []u8) std.os.ReadError!usize","generic": false,"ret": 506,"args": [458,362]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,349]},{"kind": 18,"name": "fn(std.debug.LineInfo) void","generic": false,"ret": 394,"args": [539]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), usize, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,370,350,350]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), *std.debug.DebugInfo, bool, ?usize) @typeOf(std.debug.writeCurrentStackTrace).ReturnType.ErrorSet!void","generic": false,"ret": 541,"args": [460,481,347,430]},{"kind": 18,"name": "fn(?usize) std.debug.StackIterator","generic": false,"ret": 542,"args": [430]},{"kind": 18,"name": "fn(*std.debug.StackIterator) ?usize","generic": false,"ret": 430,"args": [543]},{"kind": 18,"name": "fn(*Frame) usize","generic": false,"ret": 370,"args": [441]},{"kind": 18,"name": "fn(*Frame, usize, usize) []u8","generic": false,"ret": 362,"args": [441,370,370]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), usize) ?*Frame","generic": false,"ret": 544,"args": [433,370]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), usize) @typeOf(ZeeAlloc((struct Config constant)).allocNode).ReturnType.ErrorSet!*Frame","generic": false,"ret": 545,"args": [433,370]},{"kind": 18,"name": "fn([]u8) *Frame","generic": false,"ret": 441,"args": [362]},{"kind": 18,"name": "fn(*Frame) void","generic": false,"ret": 394,"args": [441]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), *Frame, usize) []u8","generic": false,"ret": 362,"args": [433,441,370]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), *Frame) void","generic": false,"ret": 394,"args": [433,441]},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace, ?usize, usize, usize) noreturn","generic": false,"ret": 426,"args": [429,430,370,370]},{"kind": 18,"name": "fn([*]u8) @typeOf(Frame.restorePayload).ReturnType.ErrorSet!*Frame","generic": false,"ret": 546,"args": [438]},{"kind": 18,"name": "fn(*Frame) usize","generic": false,"ret": 370,"args": [547]},{"kind": 18,"name": "fn(*Frame, usize, usize) []u8","generic": false,"ret": 362,"args": [547,370,370]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), usize) ?*Frame","generic": false,"ret": 548,"args": [436,370]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), usize) @typeOf(ZeeAlloc((struct Config constant)).allocNode).ReturnType.ErrorSet!*Frame","generic": false,"ret": 549,"args": [436,370]},{"kind": 18,"name": "fn([]u8) *Frame","generic": false,"ret": 547,"args": [362]},{"kind": 18,"name": "fn(*Frame) void","generic": false,"ret": 394,"args": [547]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), *Frame, usize) []u8","generic": false,"ret": 362,"args": [436,547,370]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), *Frame) void","generic": false,"ret": 394,"args": [436,547]},{"kind": 18,"name": "fn(*Frame) bool","generic": false,"ret": 347,"args": [547]},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace, ?usize, [*]u8, [*]u8) noreturn","generic": false,"ret": 426,"args": [429,430,438,438]},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace, ?usize, i32, i32) noreturn","generic": false,"ret": 426,"args": [429,430,446,446]},{"kind": 18,"name": "fn(*std.mem.Allocator, []align(8) u8) void","generic": false,"ret": 394,"args": [432,450]},{"kind": 18,"name": "fn(usize) std.os.UnexpectedError","generic": false,"ret": 550,"args": [370]},{"kind": 18,"name": "fn(std.fs.file.File, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [458,350]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [350,551,460,42,370]},{"kind": 18,"name": "fn() fn(usize) u32","generic": false,"ret": 193},{"kind": 18,"name": "fn(*std.mem.Allocator) std.heap.ArenaAllocator","generic": false,"ret": 552,"args": [432]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.macho.nlist_64","generic": false,"ret": 553,"args": [432,370]},{"kind": 18,"name": "fn(std.debug.MachoSymbol) u64","generic": false,"ret": 385,"args": [479]},{"kind": 18,"name": "fn(*std.debug.MachoSymbol, *std.debug.MachoSymbol) void","generic": false,"ret": 394,"args": [554,554]},{"kind": 18,"name": "fn(usize, usize) std.sort.Iterator","generic": false,"ret": 555,"args": [370,370]},{"kind": 18,"name": "fn(*std.sort.Iterator) bool","generic": false,"ret": 347,"args": [556]},{"kind": 18,"name": "fn(*std.sort.Iterator) std.sort.Range","generic": false,"ret": 557,"args": [556]},{"kind": 18,"name": "fn(std.sort.Range) usize","generic": false,"ret": 370,"args": [557]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, fn(std.debug.MachoSymbol, std.debug.MachoSymbol) bool, *[8]u8, usize, usize) void","generic": false,"ret": 394,"args": [478,74,558,370,370]},{"kind": 18,"name": "fn(*std.sort.Iterator) usize","generic": false,"ret": 370,"args": [556]},{"kind": 18,"name": "fn(*std.sort.Iterator) void","generic": false,"ret": 394,"args": [556]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, []const std.debug.MachoSymbol) void","generic": false,"ret": 394,"args": [478,485]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, std.sort.Range, std.sort.Range, fn(std.debug.MachoSymbol, std.debug.MachoSymbol) bool, []std.debug.MachoSymbol) void","generic": false,"ret": 394,"args": [478,557,557,74,478]},{"kind": 18,"name": "fn(usize, usize) std.sort.Range","generic": false,"ret": 557,"args": [370,370]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, usize) void","generic": false,"ret": 394,"args": [478,370]},{"kind": 18,"name": "fn(usize) u32","generic": false,"ret": 470,"args": [370]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, std.debug.MachoSymbol, std.sort.Range, fn(std.debug.MachoSymbol, std.debug.MachoSymbol) bool, usize) usize","generic": false,"ret": 370,"args": [478,479,557,74,370]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, usize, usize, usize) void","generic": false,"ret": 394,"args": [478,370,370,370]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, std.debug.MachoSymbol, std.sort.Range, fn(std.debug.MachoSymbol, std.debug.MachoSymbol) bool) usize","generic": false,"ret": 370,"args": [478,479,557,74]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, std.sort.Range, std.sort.Range, fn(std.debug.MachoSymbol, std.debug.MachoSymbol) bool, std.sort.Range) void","generic": false,"ret": 394,"args": [478,557,557,74,557]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol, std.sort.Range, std.sort.Range, fn(std.debug.MachoSymbol, std.debug.MachoSymbol) bool) void","generic": false,"ret": 394,"args": [478,557,557,74]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) std.process.GetEnvVarOwnedError![]u8","generic": false,"ret": 559,"args": [432,350]},{"kind": 18,"name": "fn(std.fs.file.File) bool","generic": false,"ret": 347,"args": [458]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,370]},{"kind": 18,"name": "fn([*]const u8) usize","generic": false,"ret": 370,"args": [486]},{"kind": 18,"name": "fn(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), *std.macho.nlist_64) ?*std.hash_map.KV","generic": false,"ret": 490,"args": [377,378]},{"kind": 18,"name": "fn(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), *std.macho.nlist_64) usize","generic": false,"ret": 370,"args": [377,378]},{"kind": 18,"name": "fn(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql), usize) usize","generic": false,"ret": 370,"args": [377,370]},{"kind": 18,"name": "fn([]const u8) @typeOf(std.os.toPosixPath).ReturnType.ErrorSet![1024]u8","generic": false,"ret": 560,"args": [350]},{"kind": 18,"name": "fn([*]const u8) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 499,"args": [486]},{"kind": 18,"name": "fn(std.fs.file.File) std.os.FStatError!std.fs.file.Stat","generic": false,"ret": 561,"args": [458]},{"kind": 18,"name": "fn(c_int) void","generic": false,"ret": 394,"args": [471]},{"kind": 18,"name": "fn(*const [4]u8) u32","generic": false,"ret": 470,"args": [562]},{"kind": 18,"name": "fn(*const [8]u8) u64","generic": false,"ret": 385,"args": [563]},{"kind": 18,"name": "fn([]const u8, std.builtin.Endian) u16","generic": false,"ret": 472,"args": [350,512]},{"kind": 18,"name": "fn([]const u8, std.builtin.Endian) u64","generic": false,"ret": 385,"args": [350,512]},{"kind": 18,"name": "fn([]const u8, std.builtin.Endian) u32","generic": false,"ret": 470,"args": [350,512]},{"kind": 18,"name": "fn([]const u8, std.builtin.Endian) usize","generic": false,"ret": 370,"args": [350,512]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, []const u8, u64, u64, usize, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,350,385,385,370,350,350]},{"kind": 18,"name": "fn(c_int, []u8) std.os.ReadError!usize","generic": false,"ret": 506,"args": [471,362]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) void","generic": false,"ret": 394,"args": [432,350]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize, []const u8, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,370,350,350]},{"kind": 18,"name": "fn(*FreeList) *Frame","generic": false,"ret": 441,"args": [564]},{"kind": 18,"name": "fn(*FreeList, *Frame) *Frame","generic": false,"ret": 441,"args": [564,441]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), usize) *FreeList","generic": false,"ret": 564,"args": [433,370]},{"kind": 18,"name": "fn(*FreeList, *Frame) void","generic": false,"ret": 394,"args": [564,441]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), usize, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,370,370]},{"kind": 18,"name": "fn(*Frame) @typeOf(Frame.validate).ReturnType.ErrorSet!void","generic": false,"ret": 565,"args": [547]},{"kind": 18,"name": "fn(*FreeList) *Frame","generic": false,"ret": 547,"args": [566]},{"kind": 18,"name": "fn(*FreeList, *Frame) *Frame","generic": false,"ret": 547,"args": [566,547]},{"kind": 18,"name": "fn(*ZeeAlloc((struct Config constant)), usize) *FreeList","generic": false,"ret": 566,"args": [436,370]},{"kind": 18,"name": "fn(*FreeList, *Frame) void","generic": false,"ret": 394,"args": [566,547]},{"kind": 18,"name": "fn(usize) *Frame","generic": false,"ret": 547,"args": [370]},{"kind": 18,"name": "fn(*FreeList, *Frame) @typeOf(FreeList.remove).ReturnType.ErrorSet!void","generic": false,"ret": 567,"args": [566,547]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), [*]u8, [*]u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,438,438]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), i32, i32) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,446,446]},{"kind": 18,"name": "fn(usize) void","generic": false,"ret": 394,"args": [370]},{"kind": 18,"name": "fn(c_int, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [471,350]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [350,551,460,42]},{"kind": 18,"name": "fn(*std.mem.Allocator, []u8, u29, usize, u29) @typeOf(std.heap.ArenaAllocator.realloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 568,"args": [432,362,452,370,452]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize, u29) @typeOf(std.heap.ArenaAllocator.alloc).ReturnType.ErrorSet![]u8","generic": false,"ret": 569,"args": [432,370,452]},{"kind": 18,"name": "fn(*std.heap.ArenaAllocator, usize, usize) @typeOf(std.heap.ArenaAllocator.createNode).ReturnType.ErrorSet!*std.linked_list.Node","generic": false,"ret": 570,"args": [571,370,370]},{"kind": 18,"name": "fn(*std.linked_list.SinglyLinkedList([]u8), *std.linked_list.Node) void","generic": false,"ret": 394,"args": [572,573]},{"kind": 18,"name": "fn() std.linked_list.SinglyLinkedList([]u8)","generic": false,"ret": 361},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.MachoSymbol) void","generic": false,"ret": 394,"args": [432,478]},{"kind": 18,"name": "fn(*u8, *u8) void","generic": false,"ret": 394,"args": [437,437]},{"kind": 18,"name": "fn([]std.debug.MachoSymbol) void","generic": false,"ret": 394,"args": [478]},{"kind": 18,"name": "fn([]const u8) ?[]const u8","generic": false,"ret": 574,"args": [350]},{"kind": 18,"name": "fn(*std.mem.Allocator, []const u8) @typeOf(std.mem.dupe).ReturnType.ErrorSet![]u8","generic": false,"ret": 575,"args": [432,350]},{"kind": 18,"name": "fn(c_int) bool","generic": false,"ret": 347,"args": [471]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [370,551,460,42,370]},{"kind": 18,"name": "fn([*]const u8, u32, usize) std.os.OpenError!c_int","generic": false,"ret": 576,"args": [486,470,370]},{"kind": 18,"name": "fn(c_int) std.os.FStatError!std.os.bits.darwin.Stat","generic": false,"ret": 577,"args": [471]},{"kind": 18,"name": "fn(std.os.bits.darwin.Stat) std.os.bits.darwin.timespec","generic": false,"ret": 578,"args": [579]},{"kind": 18,"name": "fn(*const [2]u8, std.builtin.Endian) u16","generic": false,"ret": 472,"args": [580,512]},{"kind": 18,"name": "fn(*const [8]u8, std.builtin.Endian) u64","generic": false,"ret": 385,"args": [563,512]},{"kind": 18,"name": "fn(*const [4]u8, std.builtin.Endian) u32","generic": false,"ret": 470,"args": [562,512]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![][]const u8","generic": false,"ret": 519,"args": [432,370]},{"kind": 18,"name": "fn(*std.mem.Allocator, [][]const u8) void","generic": false,"ret": 394,"args": [432,520]},{"kind": 18,"name": "fn(*std.mem.Allocator, usize) std.mem.Error![]std.debug.FileEntry","generic": false,"ret": 529,"args": [432,370]},{"kind": 18,"name": "fn(*std.mem.Allocator, []std.debug.FileEntry) void","generic": false,"ret": 394,"args": [432,530]},{"kind": 18,"name": "fn(*const [8]u8, std.builtin.Endian) usize","generic": false,"ret": 370,"args": [563,512]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [385,551,460,42,370]},{"kind": 18,"name": "fn(isize) u16","generic": false,"ret": 472,"args": [359]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,370,370]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, [*]u8, [*]u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,438,438]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, i32, i32) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,446,446]},{"kind": 18,"name": "fn() std.mutex.Mutex","generic": false,"ret": 581},{"kind": 18,"name": "fn() std.parker.PosixParker","generic": false,"ret": 582},{"kind": 18,"name": "fn(*std.mutex.Mutex) std.mutex.Held","generic": false,"ret": 583,"args": [584]},{"kind": 18,"name": "fn(std.mutex.Held) void","generic": false,"ret": 394,"args": [583]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.Wyhash","generic": false,"ret": 585,"args": [385]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, usize) void","generic": false,"ret": 394,"args": [586,370]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash) u64","generic": false,"ret": 385,"args": [586]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [370,551,460,42]},{"kind": 18,"name": "fn(*const [2]u8) u16","generic": false,"ret": 472,"args": [580]},{"kind": 18,"name": "fn(*const [8]u8) usize","generic": false,"ret": 370,"args": [563]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [385,551,460,42]},{"kind": 18,"name": "fn([*]u8, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [438,551,460,42,370]},{"kind": 18,"name": "fn(i32, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [446,551,460,42,370]},{"kind": 18,"name": "fn() std.os.SchedYieldError!void","generic": false,"ret": 587},{"kind": 18,"name": "fn(u64) void","generic": false,"ret": 394,"args": [385]},{"kind": 18,"name": "fn(*std.parker.PosixParker, *const u32, u32) void","generic": false,"ret": 394,"args": [588,589,470]},{"kind": 18,"name": "fn(*std.parker.PosixParker, *const u32) void","generic": false,"ret": 394,"args": [588,589]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.WyhashStateless","generic": false,"ret": 590,"args": [385]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) u64","generic": false,"ret": 385,"args": [591,350]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, [2]u8, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,592,370]},{"kind": 18,"name": "fn(i32, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [446,551,460,42]},{"kind": 18,"name": "fn(u64, u64) void","generic": false,"ret": 394,"args": [385,385]},{"kind": 18,"name": "fn(*std.hash.wyhash.Wyhash, []const u8) void","generic": false,"ret": 394,"args": [586,350]},{"kind": 18,"name": "fn(*const usize) *align(8) const [8]u8","generic": false,"ret": 419,"args": [389]},{"kind": 18,"name": "fn(u64, u64, u64) u64","generic": false,"ret": 385,"args": [385,385,385]},{"kind": 18,"name": "fn(u64, u64) u64","generic": false,"ret": 385,"args": [385,385]},{"kind": 18,"name": "fn(usize, u8, bool, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [370,349,347,551,460,42]},{"kind": 18,"name": "fn(u64, u8, bool, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [385,349,347,551,460,42]},{"kind": 18,"name": "fn([2]u8, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize) std.os.WriteError!void","generic": false,"ret": 459,"args": [592,551,460,42,370]},{"kind": 18,"name": "fn(u64) std.math.error:719:40!isize","generic": false,"ret": 593,"args": [385]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) void","generic": false,"ret": 394,"args": [591,350]},{"kind": 18,"name": "fn([]const u8) u8","generic": false,"ret": 349,"args": [350]},{"kind": 18,"name": "fn([]const u8) u16","generic": false,"ret": 472,"args": [350]},{"kind": 18,"name": "fn(u64, u64) u128","generic": false,"ret": 594,"args": [385,385]},{"kind": 18,"name": "fn(i32, u8, bool, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [446,349,347,551,460,42]},{"kind": 18,"name": "fn(*const [1]u8) u8","generic": false,"ret": 349,"args": [595]},{"kind": 18,"name": "fn(u8, bool) u8","generic": false,"ret": 349,"args": [349,347]},{"kind": 18,"name": "fn([]u8, u8) void","generic": false,"ret": 394,"args": [362,349]},{"kind": 18,"name": "fn(u32, u8, bool, std.fmt.FormatOptions, *std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [470,349,347,551,460,42]},{"kind": 18,"name": "fn(*std.pdb.MsfStream, []u8) @typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet!usize","generic": false,"ret": 596,"args": [597,362]},{"kind": 18,"name": "fn(std.fs.file.File, u64) std.os.SeekError!void","generic": false,"ret": 598,"args": [458,385]},{"kind": 18,"name": "fn(u64, usize) usize","generic": false,"ret": 370,"args": [385,370]},{"kind": 18,"name": "fn(c_int, u64) std.os.SeekError!void","generic": false,"ret": 598,"args": [471,385]},{"kind": 18,"name": "fn(i64) u16","generic": false,"ret": 472,"args": [599]},{"kind": 18,"name": "extern fn(i32, [*][*]u8, [*]?[*]u8) i32","generic": false,"ret": 446,"args": [446,600,601]},{"kind": 18,"name": "fn(usize, [*][*]u8, [][*]u8) u8","generic": false,"ret": 349,"args": [370,600,602]},{"kind": 18,"name": "fn() void","generic": false,"ret": 394},{"kind": 18,"name": "fn() u8","generic": false,"ret": 349},{"kind": 18,"name": "fn([]const u8) void","generic": false,"ret": 394,"args": [350]},{"kind": 18,"name": "fn(*std.progress.Progress, []const u8, ?usize) @typeOf(std.progress.Progress.start).ReturnType.ErrorSet!*std.progress.Node","generic": false,"ret": 603,"args": [604,350,430]},{"kind": 18,"name": "fn() std.time.Error!std.time.Timer","generic": false,"ret": 605},{"kind": 18,"name": "fn(*std.progress.Node, []const u8, ?usize) std.progress.Node","generic": false,"ret": 606,"args": [607,350,430]},{"kind": 18,"name": "fn(*std.progress.Node) void","generic": false,"ret": 394,"args": [607]},{"kind": 18,"name": "fn(*std.progress.Progress) void","generic": false,"ret": 394,"args": [604]},{"kind": 18,"name": "fn(usize, usize, []const u8) void","generic": false,"ret": 394,"args": [370,370,350]},{"kind": 18,"name": "fn(*std.progress.Progress, []const u8) void","generic": false,"ret": 394,"args": [604,350]},{"kind": 18,"name": "fn([*]const u8) ?[]const u8","generic": false,"ret": 574,"args": [486]},{"kind": 18,"name": "fn([]u8, usize) std.fmt.BufPrintError![]u8","generic": false,"ret": 608,"args": [362,370]},{"kind": 18,"name": "fn([]u8) std.fmt.BufPrintError![]u8","generic": false,"ret": 608,"args": [362]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize) void","generic": false,"ret": 394,"args": [604,609]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, []const u8) void","generic": false,"ret": 394,"args": [604,609,350]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, usize, usize) void","generic": false,"ret": 394,"args": [604,609,370,370]},{"kind": 18,"name": "fn(*std.progress.Progress, *usize, usize) void","generic": false,"ret": 394,"args": [604,609,370]},{"kind": 18,"name": "fn(*std.time.Timer) u64","generic": false,"ret": 385,"args": [610]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), usize, usize, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,370,370,350]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError)) std.os.WriteError!void","generic": false,"ret": 459,"args": [460]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, []const u8) @typeOf(std.fmt.bufPrintWrite).ReturnType.ErrorSet!void","generic": false,"ret": 611,"args": [612,350]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [612,614,370]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [612,614]},{"kind": 18,"name": "fn([]u8, []const u8) std.fmt.BufPrintError![]u8","generic": false,"ret": 608,"args": [362,350]},{"kind": 18,"name": "fn([]u8, usize, usize) std.fmt.BufPrintError![]u8","generic": false,"ret": 608,"args": [362,370,370]},{"kind": 18,"name": "fn() u64","generic": false,"ret": 385},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void, usize, usize, []const u8) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42,370,370,350]},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError), fn(*std.io.out_stream.OutStream(std.os.WriteError), []const u8) std.os.WriteError!void) std.os.WriteError!void","generic": false,"ret": 459,"args": [460,42]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [370,551,612,614,370]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, []const u8) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [612,614,350]},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize, usize) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [612,614,370,370]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [370,551,612,614]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void, usize) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [350,551,612,614,370]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [350,551,612,614]},{"kind": 18,"name": "fn(usize, u8, bool, std.fmt.FormatOptions, *std.fmt.BufPrintContext, fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [370,349,347,551,612,614]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 2},{"kind": 0},{"kind": 4,"u": 8},{"kind": 6,"len": 2,"const": true,"elem": 349},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.linked_list.TailQueue(anyframe)","src": 301,"pubDecls": [0,1,2,3,4,5,6,7,8,9,10,11,12],"privDecls": [13],"fields": [617,617,370]},{"kind": 23,"name": "anyframe"},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.atomic.queue.Queue(std.event.fs.Request)","src": 302,"pubDecls": [14,15,16,17,18,19,20,21,22,23],"privDecls": [],"fields": [620,620,581]},{"kind": 8,"name": "std.event.fs.Request","src": 303,"pubDecls": [24,25],"privDecls": [],"fields": [623,622]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 10,"name": "comptime_int"},{"kind": 4,"i": 64},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.linked_list.SinglyLinkedList([]u8)","src": 304,"pubDecls": [26,27,28,29,30,31,32,33,34],"privDecls": [35],"fields": [625]},{"kind": 6,"len": 2,"elem": 349},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.array_list.AlignedArrayList([]const u8,null)","src": 305,"pubDecls": [36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"privDecls": [66],"fields": [520,370,432]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.io.out_stream.OutStream(std.os.WriteError)","src": 306,"pubDecls": [67,68,69,70,71,72,73,74,75,76,77],"privDecls": [78],"fields": [42]},{"kind": 15,"name": "std.os.WriteError","errors": [0,1,2,3,4,5,6,7,8,9]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 4,"u": 64},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 4,"u": 6},{"kind": 16,"name": "std.target.Os","src": 307,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]},{"kind": 17,"name": "std.target.Target","src": 308,"pubDecls": [79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],"privDecls": [120],"fields": [394,631]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type,var,var,var)var","generic": true,"args": [348,null,null,null]},{"kind": 8,"name": "std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql)","src": 309,"pubDecls": [121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140],"privDecls": [141,142,143,144,145,146,147,148,149,150,151,152],"fields": [497,370,370,432,470]},{"kind": 6,"elem": 637},{"kind": 8,"name": "std.debug.MachOFile","src": 310,"pubDecls": [],"privDecls": [],"fields": [638,639,639]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.coff.Section,null)","src": 305,"pubDecls": [153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182],"privDecls": [183],"fields": [640,370,432]},{"kind": 8,"name": "std.coff.Section","src": 311,"pubDecls": [],"privDecls": [],"fields": [641]},{"kind": 13,"child": 452},{"kind": 8,"name": "std.linked_list.TailQueue(std.event.fs.Request)","src": 301,"pubDecls": [184,185,186,187,188,189,190,191,192,193,194,195,196],"privDecls": [197],"fields": [620,620,370]},{"kind": 4,"u": 64},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 6,"const": true,"elem": 370},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.array_list.AlignedArrayList(std.debug.FileEntry,null)","src": 305,"pubDecls": [198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227],"privDecls": [228],"fields": [530,370,432]},{"kind": 8,"name": "std.debug.FileEntry","src": 312,"pubDecls": [],"privDecls": [],"fields": [350,370,370,370]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 1,"name": "void"},{"kind": 18,"name": "fn(Validation)var","generic": true,"args": [396]},{"kind": 16,"name": "Validation","src": 313,"pubDecls": [],"privDecls": [229,230,231,232],"fields": [0,1,2]},{"kind": 18,"name": "fn(@TagType(std.builtin.TypeInfo))var","generic": true,"args": [399]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 16,"name": "@TagType(std.builtin.TypeInfo)","src": 314,"pubDecls": [233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.atomic.stack.Stack(std.event.loop.KEventFd)","src": 315,"pubDecls": [254,255,256,257,258,259,260],"privDecls": [261],"fields": [668,349]},{"kind": 8,"name": "std.event.loop.KEventFd","src": 316,"pubDecls": [],"privDecls": [],"fields": [669,670]},{"kind": 18,"name": "fn(Config)var","generic": true,"args": [407]},{"kind": 8,"name": "ZeeAlloc((struct Config constant))","src": 317,"pubDecls": [262,263],"privDecls": [264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282],"fields": [432,674,675]},{"kind": 8,"name": "Config","src": 318,"pubDecls": [283,284,285,286],"privDecls": [],"fields": [370,396,676,678,677]},{"kind": 8,"name": "ZeeAlloc((struct Config constant))","src": 317,"pubDecls": [287,288],"privDecls": [289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307],"fields": [432,682,675]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 8,"name": "std.atomic.queue.Queue(anyframe)","src": 302,"pubDecls": [308,309,310,311,312,313,314,315,316,317],"privDecls": [],"fields": [617,617,581]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet)","src": 319,"pubDecls": [318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338],"privDecls": [339],"fields": [684]},{"kind": 15,"name": "@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet","fn": 437,"errors": [10,11,12,13,14,15,16,9,17]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 8,"name": "std.io.in_stream.InStream(std.os.ReadError)","src": 319,"pubDecls": [340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360],"privDecls": [361],"fields": [104]},{"kind": 15,"name": "std.os.ReadError","errors": [10,11,12,13,14,15,16,9]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 6,"align": 8,"const": true,"elem": 685},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 18,"name": "fn(Validation)var","generic": true,"args": [396]},{"kind": 8,"name": "(root)","src": 320,"pubDecls": [362,363,364,365],"privDecls": [366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381],"file": 0},{"kind": 8,"name": "builtin","src": 321,"pubDecls": [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415],"privDecls": [416],"file": 1},{"kind": 8,"name": "std","src": 322,"pubDecls": [417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482],"privDecls": [],"file": 2},{"kind": 8,"name": "std.special","src": 323,"pubDecls": [483],"privDecls": [484,485,486,487],"file": 3},{"kind": 3,"name": "noreturn"},{"kind": 13,"child": 719},{"kind": 14,"err": 720,"payload": 394},{"kind": 13,"child": 721},{"kind": 13,"child": 370},{"kind": 8,"name": "std.heap.FixedBufferAllocator","src": 324,"pubDecls": [488,489],"privDecls": [490,491,492],"fields": [675,370,362]},{"kind": 6,"elem": 675},{"kind": 6,"elem": 408},{"kind": 14,"err": 722,"payload": 437},{"kind": 14,"err": 722,"payload": 362},{"kind": 6,"elem": 406},{"kind": 6,"elem": 349},{"kind": 6,"len": 1,"elem": 349},{"kind": 14,"err": 723,"payload": 441},{"kind": 14,"err": 724,"payload": 394},{"kind": 6,"elem": 680},{"kind": 14,"err": 725,"payload": 394},{"kind": 14,"err": 722,"payload": 445},{"kind": 14,"err": 722,"payload": 447},{"kind": 6,"len": 2,"elem": 447},{"kind": 4,"i": 32},{"kind": 6,"elem": 446},{"kind": 14,"err": 726,"payload": 394},{"kind": 14,"err": 722,"payload": 450},{"kind": 6,"len": 2,"align": 8,"elem": 349},{"kind": 14,"err": 727,"payload": 362},{"kind": 4,"u": 29},{"kind": 14,"err": 728,"payload": 362},{"kind": 6,"len": 2,"align": 4096,"elem": 349},{"kind": 14,"err": 729,"payload": 460},{"kind": 14,"err": 730,"payload": 458},{"kind": 8,"name": "std.fs.file.OutStream","src": 325,"pubDecls": [493,494],"privDecls": [495],"fields": [458,367]},{"kind": 8,"name": "std.fs.file.File","src": 326,"pubDecls": [496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540],"privDecls": [],"fields": [471]},{"kind": 14,"err": 368,"payload": 394},{"kind": 6,"elem": 367},{"kind": 8,"name": "std.builtin.StackTrace","src": 327,"pubDecls": [],"privDecls": [],"fields": [370,737]},{"kind": 14,"err": 738,"payload": 362},{"kind": 14,"err": 739,"payload": 362},{"kind": 8,"name": "FreeList","src": 328,"pubDecls": [541,542,543,544,545],"privDecls": [],"fields": [544]},{"kind": 8,"name": "FreeList","src": 328,"pubDecls": [546,547,548,549,550],"privDecls": [],"fields": [548]},{"kind": 14,"err": 722,"payload": 740},{"kind": 14,"err": 741,"payload": 370},{"kind": 14,"err": 742,"payload": 454},{"kind": 13,"child": 743},{"kind": 4,"u": 32},{"kind": 4,"i": 32},{"kind": 4,"u": 16},{"kind": 14,"err": 744,"payload": 481},{"kind": 14,"err": 745,"payload": 514},{"kind": 14,"err": 746,"payload": 514},{"kind": 14,"err": 722,"payload": 478},{"kind": 14,"err": 722,"payload": 378},{"kind": 6,"len": 2,"elem": 479},{"kind": 8,"name": "std.debug.MachoSymbol","src": 329,"pubDecls": [],"privDecls": [551,552],"fields": [378,747,385]},{"kind": 14,"err": 748,"payload": 394},{"kind": 6,"elem": 514},{"kind": 14,"err": 749,"payload": 394},{"kind": 14,"err": 750,"payload": 394},{"kind": 13,"child": 751},{"kind": 6,"len": 2,"const": true,"elem": 479},{"kind": 6,"len": 1,"const": true,"elem": 349},{"kind": 14,"err": 752,"payload": 539},{"kind": 14,"err": 753,"payload": 635},{"kind": 6,"elem": 377},{"kind": 13,"child": 754},{"kind": 6,"const": true,"elem": 377},{"kind": 14,"err": 755,"payload": 394},{"kind": 14,"err": 756,"payload": 394},{"kind": 14,"err": 757,"payload": 394},{"kind": 14,"err": 722,"payload": 497},{"kind": 8,"name": "std.hash_map.InternalPutResult","src": 330,"pubDecls": [],"privDecls": [],"fields": [758,508]},{"kind": 6,"len": 2,"elem": 636},{"kind": 14,"err": 759,"payload": 507},{"kind": 14,"err": 732,"payload": 458},{"kind": 14,"err": 735,"payload": 385},{"kind": 14,"err": 760,"payload": 370},{"kind": 14,"err": 722,"payload": 507},{"kind": 8,"name": "std.fs.file.InStream","src": 331,"pubDecls": [553,554],"privDecls": [555],"fields": [458,416]},{"kind": 14,"err": 761,"payload": 394},{"kind": 6,"elem": 416},{"kind": 14,"err": 417,"payload": 370},{"kind": 6,"len": 2,"align": 4,"elem": 349},{"kind": 13,"child": 634},{"kind": 14,"err": 762,"payload": 385},{"kind": 6,"elem": 486},{"kind": 6,"elem": 347},{"kind": 16,"name": "std.builtin.Endian","src": 332,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 4,"i": 8},{"kind": 8,"name": "std.debug.DebugInfo","src": 333,"pubDecls": [556],"privDecls": [557],"fields": [485,350,377]},{"kind": 14,"err": 763,"payload": 394},{"kind": 6,"elem": 364},{"kind": 14,"err": 764,"payload": 521},{"kind": 14,"err": 765,"payload": 394},{"kind": 14,"err": 722,"payload": 520},{"kind": 6,"len": 2,"elem": 350},{"kind": 6,"elem": 350},{"kind": 8,"name": "std.debug.LineNumberProgram","src": 334,"pubDecls": [558,559],"privDecls": [],"fields": [370,370,599,385,347,347,347,370,523,524,370,370,599,385,347,347,347]},{"kind": 6,"len": 2,"const": true,"elem": 350},{"kind": 6,"elem": 391},{"kind": 14,"err": 766,"payload": 370},{"kind": 14,"err": 767,"payload": 394},{"kind": 14,"err": 768,"payload": 531},{"kind": 14,"err": 769,"payload": 394},{"kind": 14,"err": 722,"payload": 530},{"kind": 6,"len": 2,"elem": 392},{"kind": 6,"elem": 392},{"kind": 14,"err": 770,"payload": 385},{"kind": 14,"err": 771,"payload": 772},{"kind": 6,"elem": 522},{"kind": 14,"err": 773,"payload": 362},{"kind": 14,"err": 774,"payload": 362},{"kind": 14,"err": 775,"payload": 599},{"kind": 14,"err": 776,"payload": 394},{"kind": 8,"name": "std.debug.LineInfo","src": 335,"pubDecls": [],"privDecls": [560],"fields": [385,385,350,777]},{"kind": 14,"err": 778,"payload": 394},{"kind": 14,"err": 779,"payload": 394},{"kind": 8,"name": "std.debug.StackIterator","src": 336,"pubDecls": [561],"privDecls": [562,563],"fields": [430,370]},{"kind": 6,"elem": 542},{"kind": 13,"child": 441},{"kind": 14,"err": 780,"payload": 441},{"kind": 14,"err": 781,"payload": 547},{"kind": 6,"elem": 672},{"kind": 13,"child": 547},{"kind": 14,"err": 782,"payload": 547},{"kind": 15,"name": "std.os.UnexpectedError","errors": [9]},{"kind": 8,"name": "std.fmt.FormatOptions","src": 337,"pubDecls": [],"privDecls": [],"fields": [430,430,783,349]},{"kind": 8,"name": "std.heap.ArenaAllocator","src": 338,"pubDecls": [564,565],"privDecls": [566,567,568,569,570],"fields": [675,432,361,370]},{"kind": 14,"err": 722,"payload": 784},{"kind": 6,"elem": 479},{"kind": 8,"name": "std.sort.Iterator","src": 339,"pubDecls": [],"privDecls": [571,572,573,574,575,576],"fields": [370,370,370,370,370,370,370]},{"kind": 6,"elem": 555},{"kind": 8,"name": "std.sort.Range","src": 340,"pubDecls": [],"privDecls": [577,578],"fields": [370,370]},{"kind": 6,"elem": 685},{"kind": 14,"err": 785,"payload": 362},{"kind": 14,"err": 786,"payload": 787},{"kind": 14,"err": 736,"payload": 733},{"kind": 6,"const": true,"elem": 788},{"kind": 6,"const": true,"elem": 685},{"kind": 6,"elem": 464},{"kind": 14,"err": 789,"payload": 394},{"kind": 6,"elem": 465},{"kind": 14,"err": 790,"payload": 394},{"kind": 14,"err": 791,"payload": 362},{"kind": 14,"err": 792,"payload": 362},{"kind": 14,"err": 793,"payload": 573},{"kind": 6,"elem": 552},{"kind": 6,"elem": 361},{"kind": 6,"elem": 624},{"kind": 13,"child": 350},{"kind": 14,"err": 794,"payload": 362},{"kind": 14,"err": 795,"payload": 471},{"kind": 14,"err": 736,"payload": 579},{"kind": 8,"name": "std.os.bits.darwin.timespec","src": 341,"pubDecls": [],"privDecls": [],"fields": [359,359]},{"kind": 8,"name": "std.os.bits.darwin.Stat","src": 342,"pubDecls": [579,580,581],"privDecls": [],"fields": [446,472,472,385,470,470,446,359,359,359,359,359,359,359,359,599,599,446,470,470,446,797]},{"kind": 6,"const": true,"elem": 592},{"kind": 8,"name": "std.mutex.Mutex","src": 343,"pubDecls": [582,583,584,585],"privDecls": [586,587,588,589,590,591],"fields": [470,582]},{"kind": 8,"name": "std.parker.PosixParker","src": 344,"pubDecls": [592,593,594,595],"privDecls": [596],"fields": [800,801]},{"kind": 8,"name": "std.mutex.Held","src": 345,"pubDecls": [597],"privDecls": [],"fields": [584]},{"kind": 6,"elem": 581},{"kind": 8,"name": "std.hash.wyhash.Wyhash","src": 346,"pubDecls": [598,599,600,601],"privDecls": [],"fields": [590,803,370]},{"kind": 6,"elem": 585},{"kind": 14,"err": 804,"payload": 394},{"kind": 6,"elem": 582},{"kind": 6,"const": true,"elem": 470},{"kind": 8,"name": "std.hash.wyhash.WyhashStateless","src": 347,"pubDecls": [602,603,604,605],"privDecls": [606],"fields": [385,370]},{"kind": 6,"elem": 590},{"kind": 7,"len": 2,"elem": 349},{"kind": 14,"err": 805,"payload": 359},{"kind": 4,"u": 128},{"kind": 6,"const": true,"elem": 806},{"kind": 14,"err": 414,"payload": 370},{"kind": 6,"elem": 807},{"kind": 14,"err": 734,"payload": 394},{"kind": 4,"i": 64},{"kind": 6,"len": 1,"elem": 438},{"kind": 6,"len": 1,"elem": 808},{"kind": 6,"len": 2,"elem": 438},{"kind": 14,"err": 809,"payload": 607},{"kind": 6,"elem": 715},{"kind": 14,"err": 810,"payload": 811},{"kind": 8,"name": "std.progress.Node","src": 348,"pubDecls": [607,608,609,610],"privDecls": [],"fields": [604,813,370,350,813,430]},{"kind": 6,"elem": 606},{"kind": 14,"err": 814,"payload": 362},{"kind": 6,"elem": 370},{"kind": 6,"elem": 811},{"kind": 14,"err": 815,"payload": 394},{"kind": 6,"elem": 816},{"kind": 14,"err": 814,"payload": 394},{"kind": 18,"name": "fn(*std.fmt.BufPrintContext, []const u8) std.fmt.BufPrintError!void","generic": false,"ret": 613,"args": [612,350]},{"kind": 8,"name": "std.linked_list","src": 349,"pubDecls": [611,612],"privDecls": [613,614,615,616,617,618],"file": 4},{"kind": 8,"name": "std.linked_list.Node","src": 350,"pubDecls": [619],"privDecls": [],"fields": [617,617,353]},{"kind": 13,"child": 817},{"kind": 8,"name": "std.atomic.queue","src": 351,"pubDecls": [620],"privDecls": [621,622,623,624,625,626,627,628,629,630,631],"file": 5},{"kind": 8,"name": "std.linked_list.Node","src": 350,"pubDecls": [632],"privDecls": [],"fields": [620,620,356]},{"kind": 13,"child": 818},{"kind": 8,"name": "std.event.fs","src": 352,"pubDecls": [633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657],"privDecls": [658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675],"file": 6},{"kind": 17,"name": "std.event.fs.Finish","src": 353,"pubDecls": [],"privDecls": [],"fields": [616,821,394]},{"kind": 17,"name": "std.event.fs.Msg","src": 354,"pubDecls": [676,677,678,679,680,681],"privDecls": [],"fields": [826,825,827,823,822,824,394]},{"kind": 8,"name": "std.linked_list.Node","src": 355,"pubDecls": [682,683,684],"privDecls": [],"fields": [625,362]},{"kind": 13,"child": 573},{"kind": 8,"name": "std.array_list","src": 356,"pubDecls": [685,686],"privDecls": [687,688,689,690,691,692,693],"file": 7},{"kind": 8,"name": "std.io.out_stream","src": 357,"pubDecls": [694,695,696],"privDecls": [697,698,699,700],"file": 8},{"kind": 18,"name": "fn(*std.io.out_stream.OutStream(std.os.WriteError),[]const u8,var)var","generic": true,"args": [460,350,null]},{"kind": 8,"name": "std.target","src": 358,"pubDecls": [701],"privDecls": [702,703,704],"file": 9},{"kind": 16,"name": "std.target.Abi","src": 359,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]},{"kind": 8,"name": "std.target.Cross","src": 360,"pubDecls": [],"privDecls": [],"fields": [632,373,630]},{"kind": 17,"name": "std.target.Arch","src": 361,"pubDecls": [705,706,707,708],"privDecls": [],"fields": [828,828,830,830,830,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,828,828,394,394,394,394,394,394,394,394,394,394,394,394,394,829,394,394,394,394,394,394]},{"kind": 8,"name": "std.hash_map","src": 362,"pubDecls": [709,710,711,712,713,714,715,716,717,718],"privDecls": [719,720,721,722,723,724,725,726,727,728,729,730,731],"file": 10},{"kind": 8,"name": "std.hash_map.KV","src": 363,"pubDecls": [],"privDecls": [],"fields": [378,379]},{"kind": 8,"name": "std.hash_map.GetOrPutResult","src": 364,"pubDecls": [],"privDecls": [],"fields": [754,347]},{"kind": 8,"name": "std.hash_map.Entry","src": 365,"pubDecls": [],"privDecls": [],"fields": [347,370,634]},{"kind": 8,"name": "std.macho.nlist_64","src": 366,"pubDecls": [],"privDecls": [],"fields": [470,349,349,472,385]},{"kind": 6,"len": 2,"align": 4,"const": true,"elem": 349},{"kind": 13,"child": 833},{"kind": 6,"len": 2,"elem": 382},{"kind": 8,"name": "std.coff.SectionHeader","src": 367,"pubDecls": [],"privDecls": [732],"fields": [685,834,470,470,470,470,470,472,472,470]},{"kind": 18,"name": "fn(Validation,var)var","generic": true,"args": [396,null]},{"kind": 18,"name": "fn(Validation,var)var","generic": true,"args": [396,null]},{"kind": 8,"name": "std.builtin","src": 368,"pubDecls": [382,384,383,386,385,387,388,391,389,390,392,393,394,396,395,397,398,399,401,400,402,403,404,405,406,407,408,410,411,409,412,413,414,415],"privDecls": [733,734],"file": 11},{"kind": 8,"name": "std.builtin.Struct","src": 369,"pubDecls": [],"privDecls": [],"fields": [650,836,837]},{"kind": 8,"name": "std.builtin.Array","src": 370,"pubDecls": [],"privDecls": [],"fields": [358,348]},{"kind": 8,"name": "std.builtin.ErrorUnion","src": 371,"pubDecls": [],"privDecls": [],"fields": [348,348]},{"kind": 8,"name": "std.builtin.Pointer","src": 372,"pubDecls": [735],"privDecls": [],"fields": [838,347,347,358,348,347]},{"kind": 8,"name": "std.builtin.EnumField","src": 373,"pubDecls": [],"privDecls": [],"fields": [350,358]},{"kind": 16,"name": "std.builtin.ContainerLayout","src": 374,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.builtin.Declaration","src": 375,"pubDecls": [736],"privDecls": [],"fields": [350,347,839]},{"kind": 8,"name": "std.builtin.Union","src": 376,"pubDecls": [],"privDecls": [],"fields": [650,840,841,837]},{"kind": 13,"child": 842},{"kind": 8,"name": "std.builtin.Optional","src": 377,"pubDecls": [],"privDecls": [],"fields": [348]},{"kind": 8,"name": "std.builtin.Enum","src": 378,"pubDecls": [],"privDecls": [],"fields": [650,348,843,837]},{"kind": 16,"name": "std.builtin.CallingConvention","src": 379,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5]},{"kind": 8,"name": "std.builtin.Vector","src": 380,"pubDecls": [],"privDecls": [],"fields": [358,348]},{"kind": 8,"name": "std.builtin.Float","src": 381,"pubDecls": [],"privDecls": [],"fields": [358]},{"kind": 8,"name": "std.builtin.UnionField","src": 382,"pubDecls": [],"privDecls": [],"fields": [350,844,348]},{"kind": 8,"name": "std.builtin.StructField","src": 383,"pubDecls": [],"privDecls": [],"fields": [350,845,348]},{"kind": 8,"name": "std.builtin.AnyFrame","src": 384,"pubDecls": [],"privDecls": [],"fields": [840]},{"kind": 8,"name": "std.builtin.Error","src": 385,"pubDecls": [],"privDecls": [],"fields": [350,358]},{"kind": 8,"name": "std.builtin.Fn","src": 386,"pubDecls": [],"privDecls": [],"fields": [656,347,347,840,846]},{"kind": 8,"name": "std.builtin.FnArg","src": 387,"pubDecls": [],"privDecls": [],"fields": [347,347,840]},{"kind": 8,"name": "std.builtin.Int","src": 388,"pubDecls": [],"privDecls": [],"fields": [347,358]},{"kind": 8,"name": "std.atomic.stack","src": 389,"pubDecls": [737],"privDecls": [738,739,740,741,742,743,744,745,746,747],"file": 12},{"kind": 8,"name": "std.atomic.stack.Node","src": 390,"pubDecls": [],"privDecls": [],"fields": [668,404]},{"kind": 13,"child": 847},{"kind": 8,"name": "std.event.loop.ResumeNode","src": 391,"pubDecls": [748,749,750,751,752],"privDecls": [753,754],"fields": [849,353,394]},{"kind": 8,"name": "std.os.bits.darwin.Kevent","src": 392,"pubDecls": [],"privDecls": [],"fields": [370,850,472,470,359,370]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 8,"name": "Frame","src": 393,"pubDecls": [755,756,757,758,759,760,761,762],"privDecls": [763,764,765],"fields": [548,370,851]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 7,"len": 13,"elem": 465},{"kind": 8,"name": "std.mem.Allocator","src": 394,"pubDecls": [766,767,768,769,770,771,772,773,774,775],"privDecls": [],"fields": [48,34]},{"kind": 16,"name": "JumboMatchStrategy","src": 395,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "ShrinkStrategy","src": 396,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "BuddyStrategy","src": 397,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 8,"name": "Frame","src": 393,"pubDecls": [776,777,778,779,780,781,782,783],"privDecls": [784,785,786],"fields": [544,370,851]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 7,"len": 13,"elem": 464},{"kind": 8,"name": "std.io.in_stream","src": 398,"pubDecls": [787,788,789],"privDecls": [790,791,792,793,794,795,796],"file": 13},{"kind": 18,"name": "fn(*std.io.in_stream.InStream(@typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet), []u8) @typeOf(std.pdb.MsfStream.read).ReturnType.ErrorSet!usize","generic": false,"ret": 596,"args": [861,362]},{"kind": 7,"len": 8,"elem": 349},{"kind": 18,"name": "fn(*std.mem.Allocator,u29)var","generic": true,"args": [432,452]},{"kind": 8,"name": "std.testing","src": 399,"pubDecls": [797,798,799,800],"privDecls": [801,802,803],"file": 14},{"kind": 6,"len": 2,"const": true,"elem": 695},{"kind": 16,"name": "std.builtin.AtomicRmwOp","src": 400,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 16,"name": "@TagType(std.target.Arch)","src": 361,"pubDecls": [705,706,707,708],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]},{"kind": 16,"name": "std.builtin.Mode","src": 401,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 16,"name": "std.builtin.AtomicOrder","src": 402,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5]},{"kind": 16,"name": "std.builtin.GlobalLinkage","src": 403,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 17,"name": "std.builtin.TypeInfo","src": 314,"pubDecls": [233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253],"privDecls": [],"fields": [394,394,394,394,665,658,648,646,645,394,394,394,394,654,647,653,655,652,663,663,394,394,394,661,657,394]},{"kind": 8,"name": "builtin.TestFn","src": 404,"pubDecls": [],"privDecls": [],"fields": [350,1]},{"kind": 8,"name": "std.mem","src": 405,"pubDecls": [804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878],"privDecls": [879,880,881,882,883,884,885,886,887,888,889,890,891,892],"file": 15},{"kind": 8,"name": "std.math","src": 406,"pubDecls": [893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041],"privDecls": [1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057],"file": 16},{"kind": 8,"name": "std.thread.Thread","src": 407,"pubDecls": [1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068],"privDecls": [],"fields": [885]},{"kind": 8,"name": "std.os","src": 408,"pubDecls": [1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699],"privDecls": [1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710],"file": 17},{"kind": 8,"name": "std.debug","src": 409,"pubDecls": [1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747],"privDecls": [1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841],"file": 18},{"kind": 8,"name": "std.dwarf","src": 410,"pubDecls": [1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423],"privDecls": [],"file": 19},{"kind": 8,"name": "std.event","src": 411,"pubDecls": [2424,2425,2426,2427,2428,2429,2430,2431,2432],"privDecls": [],"file": 20},{"kind": 8,"name": "std.io","src": 412,"pubDecls": [2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468],"privDecls": [2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485],"file": 21},{"kind": 8,"name": "std.fmt","src": 413,"pubDecls": [2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510],"privDecls": [2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534],"file": 22},{"kind": 8,"name": "std.atomic","src": 414,"pubDecls": [2535,2536,2537],"privDecls": [],"file": 23},{"kind": 8,"name": "std.pdb","src": 415,"pubDecls": [2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559],"privDecls": [2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573],"file": 24},{"kind": 8,"name": "std.coff","src": 416,"pubDecls": [2574,2575,2576],"privDecls": [2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595],"file": 25},{"kind": 8,"name": "std.hash","src": 417,"pubDecls": [2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614],"privDecls": [2615,2616,2617,2618,2619],"file": 26},{"kind": 8,"name": "std.sort","src": 418,"pubDecls": [2620,2621,2622,2623,2624,2625],"privDecls": [2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651],"file": 27},{"kind": 8,"name": "std.c","src": 419,"pubDecls": [1069,1379,1380,1381,1070,2652,1071,1072,1073,1382,1074,1384,1385,1386,1075,1076,1077,1387,1388,1078,1389,1390,1079,2653,1080,1392,2654,1081,1082,2655,1393,2656,1395,2657,1396,2658,1086,1397,1087,2659,1088,1399,1400,1401,1089,1090,1091,1402,1092,1403,1404,1405,2660,1406,1407,2661,2662,1408,2663,1096,1410,1411,1412,1413,2664,1414,1097,1098,1099,2665,1415,1416,1417,1100,1418,2666,2667,1420,1101,1421,1102,1423,1424,2668,1103,1104,1425,1105,1426,1427,1106,1107,2669,1428,1109,1429,1110,1111,1431,2670,1433,2671,1434,1112,2672,1114,1115,1435,1116,1436,2673,2674,1117,2675,1118,1119,2676,1440,1120,2677,1121,1122,1442,2678,1445,1125,1126,2679,2680,1129,1446,1447,1448,1130,1131,2681,1133,1450,2682,1135,1136,1137,1452,1138,2683,1140,1453,2684,1141,1454,1455,1143,1142,1144,1457,2685,2686,1459,1460,1461,1462,1463,1464,2687,1146,2688,1147,1467,2689,1468,1149,1469,1150,2690,1151,1470,1152,1471,1472,2691,1153,1473,1155,1474,1156,1475,1477,1157,1478,1479,1158,1159,1160,2692,1161,1162,2693,1481,1164,2694,1165,2695,2696,1483,2697,1167,1484,2698,1486,2699,1168,2700,1489,1169,1170,1491,1171,2701,1172,1492,1174,1494,2702,2703,1496,2704,2705,1175,2706,2707,2708,1497,1498,1499,1500,1177,1501,1178,1179,1502,1503,2709,1181,1182,2710,1184,2711,2712,1505,1186,1187,1506,1507,1188,1508,1189,1509,2713,1510,1190,2714,1192,2715,1512,1513,1514,1194,1195,1515,1196,1197,2716,1517,1518,2717,1199,1520,2718,2719,1201,1202,1203,2720,2721,1204,1205,2722,1207,1521,1208,2723,1522,1209,1523,1210,1524,1211,1526,1527,1213,1212,1528,1215,2724,1529,1216,1530,1533,1217,2725,2726,1537,1218,1538,2727,1219,1221,1540,2728,1222,1541,1223,1542,2729,1543,1544,1224,1225,1226,1227,1228,1546,2730,1547,1229,1230,1549,1550,1231,1232,1233,2731,1551,1235,1552,1553,1554,1237,1555,1239,1240,1556,2732,1558,1560,1243,1561,1562,1563,2733,2734,1245,1246,2735,1247,2736,2737,1249,1250,1567,2738,1251,1252,1569,1253,1254,1255,1570,1256,2739,2740,2741,1260,1572,1573,1574,2742,1262,2743,1264,1575,1265,2744,2745,2746,2747,1267,1269,1270,1577,1272,1578,1579,2748,1273,1582,1274,1275,1276,2749,1583,1584,1585,2750,1278,1587,1588,1589,1280,1590,1282,1591,1592,1593,2751,1595,2752,1285,2753,1286,1287,1288,2754,2755,1596,2756,2757,1292,1293,2758,2759,2760,2761,1600,2762,1295,1297,1298,2763,1601,1299,2764,2765,1300,1301,2766,1606,1303,1607,1304,1608,1305,1306,2767,1307,2768,1610,1611,2769,1310,1311,1312,1313,2770,2771,1314,1614,1615,1315,2772,2773,1618,1619,2774,1620,1319,1320,1321,2775,1323,2776,2777,1623,1324,1624,1626,2778,1627,1628,1629,1325,2779,1631,1633,2780,1634,2781,1327,1326,1635,1328,2782,1637,1638,1329,1331,1641,1643,1644,1332,2783,1646,1334,1647,2784,1648,1649,1650,1651,1338,2785,1652,1653,1654,1339,2786,2787,1340,2788,1341,1343,1658,1344,2789,1659,2790,1345,1660,1661,1662,1663,1664,1348,1349,1351,1665,1352,1666,1353,2791,1667,1355,1668,1669,2792,1671,2793,2794,1357,1358,1673,1359,1360,1675,1676,1361,1677,1678,1363,1679,1364,2795,1681,2796,1366,1367,1682,1683,1684,1368,2797,1687,2798,1689,2799,1690,1369,1691,1371,1372,1373,1692,1374,1376,1694,1697,1698,1378,1699],"privDecls": [2800,2801,2802],"file": 28},{"kind": 8,"name": "std.meta","src": 420,"pubDecls": [2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821],"privDecls": [2822,2823,2824,2825,2826,2827,2828,2829],"file": 29},{"kind": 8,"name": "std.fs","src": 421,"pubDecls": [2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871],"privDecls": [2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882],"file": 30},{"kind": 8,"name": "std.heap","src": 422,"pubDecls": [2883,2884,2885,2886,2887,2888,2889,2890,2891,2892],"privDecls": [2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916],"file": 31},{"kind": 8,"name": "std.time","src": 423,"pubDecls": [2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935],"privDecls": [2936,2937,2938,2939,2940,2941],"file": 32},{"kind": 8,"name": "std.progress.Progress","src": 424,"pubDecls": [2942,2943,2944,2945,2946],"privDecls": [2947],"fields": [971,606,811,385,972,385,385,347,370]},{"kind": 8,"name": "std.spinlock.SpinLock","src": 425,"pubDecls": [2948,2949,2950,2951,2952],"privDecls": [],"fields": [349]},{"kind": 8,"name": "std.process","src": 426,"pubDecls": [2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971],"privDecls": [2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983],"file": 33},{"kind": 8,"name": "std.macho","src": 427,"pubDecls": [2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134],"privDecls": [3135],"file": 34},{"kind": 6,"elem": 461},{"kind": 15},{"kind": 6,"const": true,"elem": 461},{"kind": 15,"name": "std.mem.Error","errors": [18]},{"kind": 15,"name": "@typeOf(Frame.restorePayload).ReturnType.ErrorSet","fn": 23,"errors": [19]},{"kind": 15,"name": "@typeOf(Frame.validate).ReturnType.ErrorSet","fn": 24,"errors": [19]},{"kind": 15,"name": "@typeOf(testAllocator).ReturnType.ErrorSet","fn": 27,"errors": [18]},{"kind": 15,"name": "@typeOf(testAllocatorAligned).ReturnType.ErrorSet","fn": 35,"errors": [18]},{"kind": 15,"name": "@typeOf(std.heap.DirectAllocator.realloc).ReturnType.ErrorSet","fn": 39,"errors": [20]},{"kind": 15,"name": "std.heap.error:43:63","errors": [20]},{"kind": 15,"name": "@typeOf(std.debug.getStderrStream).ReturnType.ErrorSet","fn": 45,"errors": [21,22]},{"kind": 15,"name": "std.os.windows.GetStdHandleError","errors": [21,22]},{"kind": 8,"name": "std.fs.file","src": 428,"pubDecls": [3136],"privDecls": [3137,3138,3139,3140,3141,3142,3143,3144,3145,3146],"file": 35},{"kind": 15,"name": "std.fs.file.OpenError","errors": [23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]},{"kind": 8,"name": "std.fs.file.Stat","src": 429,"pubDecls": [],"privDecls": [],"fields": [385,470,599,599,599]},{"kind": 15,"name": "std.os.SeekError","errors": [17,9]},{"kind": 15,"name": "std.fs.file.GetPosError","errors": [17,9,42]},{"kind": 15,"name": "std.os.FStatError","errors": [42,9]},{"kind": 6,"len": 2,"elem": 370},{"kind": 15,"name": "@typeOf(std.heap.FixedBufferAllocator.realloc).ReturnType.ErrorSet","fn": 51,"errors": [18]},{"kind": 15,"name": "@typeOf(std.heap.FixedBufferAllocator.alloc).ReturnType.ErrorSet","fn": 53,"errors": [18]},{"kind": 6,"len": 2,"elem": 446},{"kind": 15,"name": "std.math.error:315:43","errors": [43]},{"kind": 15,"name": "std.os.MMapError","errors": [44,45,46,47,48,9]},{"kind": 6,"len": 1,"align": 4096,"elem": 349},{"kind": 15,"name": "@typeOf(std.debug.getSelfDebugInfo).ReturnType.ErrorSet","fn": 88,"errors": [18,49]},{"kind": 15,"name": "@typeOf(std.debug.openSelfDebugInfo).ReturnType.ErrorSet","fn": 89,"errors": [18,49]},{"kind": 15,"name": "@typeOf(std.debug.openSelfDebugInfoMacOs).ReturnType.ErrorSet","fn": 93,"errors": [18,49]},{"kind": 13,"child": 378},{"kind": 15,"name": "@typeOf(std.debug.writeStackTrace).ReturnType.ErrorSet","fn": 102,"errors": [0,1,2,3,4,5,6,7,8,9,12,15,23,24,25,27,28,29,30,32,33,34,35,40,41,50,51,52,18,53,17,49]},{"kind": 15,"name": "@typeOf(std.debug.printSourceAtAddress).ReturnType.ErrorSet","fn": 103,"errors": [0,1,2,3,4,5,6,7,8,9,12,15,23,24,25,27,28,29,30,32,33,34,35,40,41,50,51,52,18,53,17,49]},{"kind": 15,"name": "@typeOf(std.debug.printSourceAtAddressMacOs).ReturnType.ErrorSet","fn": 104,"errors": [0,1,2,3,4,5,6,7,8,9,12,15,23,24,25,27,28,29,30,32,33,34,35,40,41,50,51,52,18,53,17,49]},{"kind": 6,"const": true,"elem": 479},{"kind": 15,"name": "@typeOf(std.debug.getLineNumberInfoMacOs).ReturnType.ErrorSet","fn": 111,"errors": [51,52,10,11,12,13,14,15,16,9,18,53,17,23,24,25,26,27,28,29,30,32,33,34,35,37,39,40,41,49]},{"kind": 15,"name": "@typeOf(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql).getOrPut).ReturnType.ErrorSet","fn": 112,"errors": [18]},{"kind": 6,"elem": 634},{"kind": 15,"name": "@typeOf(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql).autoCapacity).ReturnType.ErrorSet","fn": 115,"errors": [18]},{"kind": 15,"name": "@typeOf(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql).ensureCapacityExact).ReturnType.ErrorSet","fn": 116,"errors": [18]},{"kind": 15,"name": "@typeOf(std.hash_map.HashMap(*std.macho.nlist_64,std.debug.MachOFile,std.hash_map.getHashPtrAddrFn(*std.macho.nlist_64).hash,std.hash_map.getTrivialEqlFn(*std.macho.nlist_64).eql).initCapacity).ReturnType.ErrorSet","fn": 117,"errors": [18]},{"kind": 6,"elem": 636},{"kind": 15,"name": "@typeOf(std.io.readFileAllocAligned).ReturnType.ErrorSet","fn": 121,"errors": [52,10,11,12,13,14,15,16,9,18,53,17,23,24,25,26,27,28,29,30,32,33,34,35,37,39,40,41]},{"kind": 15,"name": "std.math.error:719:40","errors": [53]},{"kind": 15,"name": "@typeOf(std.io.in_stream.InStream(std.os.ReadError).readNoEof).ReturnType.ErrorSet","fn": 128,"errors": [52,10,11,12,13,14,15,16,9]},{"kind": 15,"name": "@typeOf(std.debug.readInitialLengthMem).ReturnType.ErrorSet","fn": 133,"errors": [51]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList([]const u8,null).append).ReturnType.ErrorSet","fn": 143,"errors": [18]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList([]const u8,null).addOne).ReturnType.ErrorSet","fn": 144,"errors": [18]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList([]const u8,null).ensureCapacity).ReturnType.ErrorSet","fn": 145,"errors": [18]},{"kind": 15,"name": "@typeOf(std.debug.leb128.readULEB128Mem).ReturnType.ErrorSet","fn": 153,"errors": [43]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).append).ReturnType.ErrorSet","fn": 154,"errors": [18]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).addOne).ReturnType.ErrorSet","fn": 155,"errors": [18]},{"kind": 15,"name": "@typeOf(std.array_list.AlignedArrayList(std.debug.FileEntry,null).ensureCapacity).ReturnType.ErrorSet","fn": 156,"errors": [18]},{"kind": 15,"name": "@typeOf(std.debug.leb128.readULEB128Mem).ReturnType.ErrorSet","fn": 160,"errors": [43]},{"kind": 15,"name": "@typeOf(std.debug.LineNumberProgram.checkLineMatch).ReturnType.ErrorSet","fn": 161,"errors": [18,51,49]},{"kind": 13,"child": 539},{"kind": 15,"name": "@typeOf(std.fs.path.joinPosix).ReturnType.ErrorSet","fn": 162,"errors": [18]},{"kind": 15,"name": "@typeOf(std.fs.path.joinSep).ReturnType.ErrorSet","fn": 163,"errors": [18]},{"kind": 15,"name": "@typeOf(std.debug.leb128.readILEB128Mem).ReturnType.ErrorSet","fn": 166,"errors": [43]},{"kind": 15,"name": "@typeOf(std.debug.printLineInfo).ReturnType.ErrorSet","fn": 167,"errors": [0,1,2,3,4,5,6,7,8,9,12,15,23,24,25,27,28,29,30,32,33,34,35,40,41,50]},{"kind": 13,"child": 432},{"kind": 15,"name": "@typeOf(std.debug.printLineFromFileAnyOs).ReturnType.ErrorSet","fn": 169,"errors": [0,1,2,3,4,5,6,7,8,9,12,15,23,24,25,27,28,29,30,32,33,34,35,40,41,50]},{"kind": 15,"name": "@typeOf(std.debug.writeCurrentStackTrace).ReturnType.ErrorSet","fn": 178,"errors": [0,1,2,3,4,5,6,7,8,9,12,15,23,24,25,27,28,29,30,32,33,34,35,40,41,50,51,52,18,53,17,49]},{"kind": 15,"name": "@typeOf(ZeeAlloc((struct Config constant)).allocNode).ReturnType.ErrorSet","fn": 185,"errors": [18]},{"kind": 15,"name": "@typeOf(Frame.restorePayload).ReturnType.ErrorSet","fn": 192,"errors": [19]},{"kind": 15,"name": "@typeOf(ZeeAlloc((struct Config constant)).allocNode).ReturnType.ErrorSet","fn": 196,"errors": [18]},{"kind": 13,"child": 919},{"kind": 6,"len": 2,"elem": 637},{"kind": 15,"name": "std.process.GetEnvVarOwnedError","errors": [54,55,56]},{"kind": 15,"name": "@typeOf(std.os.toPosixPath).ReturnType.ErrorSet","fn": 254,"errors": [28]},{"kind": 7,"len": 1024,"elem": 349},{"kind": 7,"len": 4,"elem": 349},{"kind": 15,"name": "@typeOf(Frame.validate).ReturnType.ErrorSet","fn": 282,"errors": [19]},{"kind": 15,"name": "@typeOf(FreeList.remove).ReturnType.ErrorSet","fn": 291,"errors": [57]},{"kind": 15,"name": "@typeOf(std.heap.ArenaAllocator.realloc).ReturnType.ErrorSet","fn": 298,"errors": [18]},{"kind": 15,"name": "@typeOf(std.heap.ArenaAllocator.alloc).ReturnType.ErrorSet","fn": 299,"errors": [18]},{"kind": 15,"name": "@typeOf(std.heap.ArenaAllocator.createNode).ReturnType.ErrorSet","fn": 300,"errors": [18]},{"kind": 15,"name": "@typeOf(std.mem.dupe).ReturnType.ErrorSet","fn": 313,"errors": [18]},{"kind": 15,"name": "std.os.OpenError","errors": [58,32,33,34,35,59,60,36,37,38,39,40,61,41,9]},{"kind": 8,"name": "std.os.bits.darwin","src": 430,"pubDecls": [1699,1379,1380,1381,1070,1071,1072,1073,1382,1074,1384,1385,1386,1075,1076,1077,1387,1388,1078,1389,1390,1079,1080,1392,1081,1082,1393,1395,1396,1086,1397,1087,1088,1399,1400,1401,1089,1090,1091,1402,1092,1403,1404,1405,1406,1407,1408,1096,1410,1411,1412,1413,1414,1097,1098,1415,1416,1417,1100,1418,1420,1101,1421,1102,1423,1424,1103,1104,1425,1105,1426,1427,1106,1107,1428,1109,1429,1110,1111,1431,1433,1434,1112,1114,1115,1435,1116,1436,1117,1118,1119,1440,1120,1121,1122,1442,1445,1125,1126,1129,1446,1447,1448,1130,1131,1133,1450,1135,1136,1137,1452,1138,1140,1453,1454,1141,1455,1142,1143,1144,1457,1459,1460,1461,1462,1463,1464,1146,1147,1467,1468,1149,1469,1150,1151,1470,1152,1471,1472,1153,1473,1155,1474,1156,1475,1477,1157,1478,1479,1158,1159,1160,1161,1162,1481,1164,1165,1483,1167,1484,1486,1168,1489,1169,1170,1491,1171,1172,1492,1174,1494,1496,1175,1497,1498,1499,1500,1177,1501,1178,1179,1502,1503,1181,1182,1184,1505,1186,1187,1506,1507,1188,1508,1189,1509,1510,1190,1192,1512,1513,1514,1194,1195,1515,1196,1197,1517,1518,1199,1520,1201,1202,1203,1204,1205,1207,1521,1208,1522,1209,1210,1523,1524,1526,1211,1212,1527,1213,1528,1215,1529,1216,1530,1533,1217,1537,1218,1538,1219,1221,1540,1222,1541,1223,1542,1543,1544,1224,1225,1226,1227,1228,1546,1547,1229,1230,1549,1550,1232,1233,1551,1235,1552,1553,1554,1237,1555,1239,1240,1556,1558,1560,1243,1561,1562,1563,1245,1246,1247,1249,1250,1567,1251,1252,1569,1253,1254,1255,1570,1256,1260,1572,1573,1574,1262,1264,1575,1265,1267,1269,1270,1577,1272,1578,1579,1273,1582,1274,1275,1276,1583,1584,1585,1278,1587,1588,1589,1280,1590,1282,1591,1592,1593,1595,1285,1286,1287,1288,1596,1292,1293,1600,1295,1297,1298,1601,1299,1300,1301,1606,1303,1607,1304,1608,1305,1306,1307,1610,1611,1310,1311,1312,1313,1314,1614,1615,1315,1618,1619,1620,1319,1320,1321,1323,1623,1324,1624,1626,1627,1628,1629,1325,1631,1633,1634,1326,1327,1635,1328,1637,1638,1329,1331,1641,1643,1644,1332,1646,1334,1647,1648,1649,1650,1651,1338,1652,1653,1654,1339,1340,1341,1343,1658,1344,1659,1345,1660,1661,1662,1663,1664,1348,1349,1351,1665,1352,1666,1353,1667,1355,1668,1669,1671,1357,1358,1673,1359,1360,1675,1676,1361,1677,1678,1363,1679,1364,1681,1366,1367,1682,1683,1684,1368,1687,1689,1690,1369,1691,1371,1372,1373,1692,1374,1376,1694,1697,1698,1378,1069],"privDecls": [3147,3148,3149,3150,3151],"file": 36},{"kind": 7,"len": 2,"elem": 599},{"kind": 8,"name": "std.mutex","src": 431,"pubDecls": [3152],"privDecls": [3153,3154,3155,3156,3157,3158,3159],"file": 37},{"kind": 8,"name": "std.parker","src": 432,"pubDecls": [3160],"privDecls": [3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172],"file": 38},{"kind": 8,"name": "std.c.darwin.pthread_cond_t","src": 433,"pubDecls": [],"privDecls": [],"fields": [978,979]},{"kind": 8,"name": "std.c.darwin.pthread_mutex_t","src": 434,"pubDecls": [],"privDecls": [],"fields": [978,980]},{"kind": 8,"name": "std.hash.wyhash","src": 435,"pubDecls": [3173],"privDecls": [3174,3175,3176,3177,3178,3179,3180,3181,3182,3183],"file": 39},{"kind": 7,"len": 32,"elem": 349},{"kind": 15,"name": "std.os.SchedYieldError","errors": [62]},{"kind": 15,"name": "std.math.error:719:40","errors": [63]},{"kind": 7,"len": 1,"elem": 349},{"kind": 8,"name": "std.pdb.MsfStream","src": 436,"pubDecls": [3184,3185],"privDecls": [3186,3187,3188,3189,3190,3191,3192,3193],"fields": [458,385,983,470,413]},{"kind": 13,"child": 438},{"kind": 15,"name": "@typeOf(std.progress.Progress.start).ReturnType.ErrorSet","fn": 449,"errors": [64]},{"kind": 15,"name": "std.time.Error","errors": [64]},{"kind": 8,"name": "std.time.Timer","src": 437,"pubDecls": [3194,3195,3196,3197],"privDecls": [3198,3199,3200],"fields": [889,385,385]},{"kind": 8,"name": "std.progress","src": 438,"pubDecls": [3201],"privDecls": [3202,3203,3204],"file": 40},{"kind": 13,"child": 607},{"kind": 15,"name": "std.fmt.BufPrintError","errors": [65]},{"kind": 15,"name": "@typeOf(std.fmt.bufPrintWrite).ReturnType.ErrorSet","fn": 483,"errors": [65]},{"kind": 8,"name": "std.fmt.BufPrintContext","src": 439,"pubDecls": [],"privDecls": [],"fields": [362]},{"kind": 6,"elem": 616},{"kind": 6,"elem": 619},{"kind": 8,"name": "std.event.fs.CloseOperation","src": 440,"pubDecls": [3205,3206,3207,3208,3209],"privDecls": [3210,3211,3212],"fields": [985,984]},{"kind": 8,"name": "std.event.loop.Loop","src": 441,"pubDecls": [3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238],"privDecls": [3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252],"fields": [432,411,987,669,370,988,403,989]},{"kind": 6,"elem": 819},{"kind": 8,"name": "std.event.fs.Close","src": 442,"pubDecls": [],"privDecls": [],"fields": [471]},{"kind": 8,"name": "std.event.fs.Open","src": 443,"pubDecls": [3253],"privDecls": [],"fields": [350,470,470,990]},{"kind": 8,"name": "std.event.fs.WriteFile","src": 444,"pubDecls": [3254],"privDecls": [],"fields": [350,350,470,992]},{"kind": 8,"name": "std.event.fs.PWriteV","src": 445,"pubDecls": [3255],"privDecls": [],"fields": [471,993,370,459]},{"kind": 8,"name": "std.event.fs.WriteV","src": 446,"pubDecls": [3256],"privDecls": [],"fields": [471,993,459]},{"kind": 8,"name": "std.event.fs.PReadV","src": 447,"pubDecls": [3257],"privDecls": [],"fields": [471,994,370,506]},{"kind": 16,"name": "std.target.Arm32","src": 448,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]},{"kind": 16,"name": "std.target.Kalimba","src": 449,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "std.target.Arm64","src": 450,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 18,"name": "fn(type)var","generic": true,"args": [348]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 6,"const": true,"elem": 974},{"kind": 17,"name": "std.coff.Misc","src": 451,"pubDecls": [],"privDecls": [],"fields": [470,470]},{"kind": 8,"name": "std.special","src": 452,"pubDecls": [3258],"privDecls": [3259,3260,3261,3262],"file": 3},{"kind": 6,"len": 2,"elem": 660},{"kind": 6,"len": 2,"elem": 651},{"kind": 16,"name": "std.builtin.Size","src": 453,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 17,"name": "std.builtin.Data","src": 454,"pubDecls": [3263],"privDecls": [],"fields": [348,348,995]},{"kind": 13,"child": 348},{"kind": 6,"len": 2,"elem": 659},{"kind": 6,"len": 2,"elem": 662},{"kind": 6,"len": 2,"elem": 649},{"kind": 13,"child": 649},{"kind": 13,"child": 358},{"kind": 6,"len": 2,"elem": 664},{"kind": 6,"elem": 667},{"kind": 8,"name": "std.event.loop","src": 455,"pubDecls": [3264],"privDecls": [3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279],"file": 41},{"kind": 16,"name": "std.event.loop.Id","src": 456,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 4,"i": 16},{"kind": 7,"len": 16,"elem": 349},{"kind": 18,"name": "fn(*std.mem.Allocator,var)var","generic": true,"args": [432,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var)var","generic": true,"args": [432,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var)var","generic": true,"args": [432,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var,var)var","generic": true,"args": [432,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var,var)var","generic": true,"args": [432,348,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var)var","generic": true,"args": [432,348,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var,var,var)var","generic": true,"args": [432,null,null,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,var)var","generic": true,"args": [432,null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type)var","generic": true,"args": [432,348]},{"kind": 6,"elem": 413},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(*std.mem.Allocator,type,var)var","generic": true,"args": [432,348,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 8,"name": "std.meta.trait","src": 457,"pubDecls": [3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297],"privDecls": [3298,3299,3300,3301,3302,3303,3304,3305],"file": 42},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 8,"name": "std.thread","src": 458,"pubDecls": [3306],"privDecls": [3307,3308,3309,3310,3311,3312,3313],"file": 43},{"kind": 8,"name": "std.thread.Data","src": 459,"pubDecls": [],"privDecls": [],"fields": [886,454]},{"kind": 6,"elem": 996},{"kind": 8,"name": "std.os.bits","src": 460,"pubDecls": [1069,1379,1380,1381,1070,1071,1072,1073,1382,1074,1384,1385,1386,1075,1076,1387,1388,1077,1389,1078,1390,1079,1080,1392,1081,1082,1393,1395,1396,1086,1087,1397,1088,1399,1400,1401,1089,1090,1091,1402,1092,1403,1404,1405,1406,1407,1408,1096,1410,1411,1412,1413,1414,1097,1098,1099,1415,1416,1417,1100,1418,1420,1101,1421,1102,1423,1424,1103,1104,1425,1105,1426,1427,1106,1107,1428,1429,1109,1110,1111,1431,1433,1434,1112,1114,1115,1435,1116,1436,1117,1118,1119,1440,1120,1121,1122,1442,1445,1125,1126,1129,1446,1447,1448,1130,1131,1133,1450,1135,1136,1137,1452,1138,1140,1453,1454,1141,1455,1142,1143,1144,1457,1459,1460,1461,1462,1463,1464,1146,1147,1467,1468,1149,1469,1150,1151,1470,1152,1471,1472,1153,1473,1155,1474,1156,1475,1477,1157,1478,1479,1158,1159,1160,1161,1162,1481,1164,1165,1483,1167,1484,1486,1168,1489,1169,1170,1491,1171,1172,1492,1174,1494,1496,1175,1497,1498,1499,1500,1177,1501,1178,1179,1502,1503,1181,1182,1184,1505,1186,1187,1506,1507,1188,1508,1189,1509,1510,1190,1192,1512,1513,1514,1194,1195,1515,1196,1197,1517,1518,1199,1520,1201,1202,1203,1204,1205,1207,1521,1208,1522,1209,1210,1523,1524,1526,1211,1212,1527,1213,1528,1215,1529,1216,1530,1533,1217,1537,1218,1538,1219,1221,1540,1222,1541,1223,1542,1543,1544,1224,1225,1226,1227,1228,1546,1547,1229,1230,1549,1550,1231,1232,1233,1551,1235,1552,1553,1554,1237,1555,1239,1240,1556,1558,1560,1243,1561,1562,1563,1245,1246,1247,1249,1250,1567,1251,1252,1569,1253,1254,1255,1570,1256,1260,1572,1573,1574,1262,1264,1575,1265,1267,1269,1270,1577,1272,1578,1579,1273,1582,1274,1275,1276,1583,1584,1585,1278,1587,1588,1589,1280,1590,1282,1591,1592,1593,1595,1285,1286,1287,1288,1596,1292,1293,1600,1295,1297,1298,1601,1299,1300,1301,1606,1303,1607,1304,1608,1305,1306,1307,1610,1611,1310,1311,1312,1313,1314,1614,1615,1315,1618,1619,1620,1319,1320,1321,1323,1623,1324,1624,1626,1627,1628,1629,1325,1631,1633,1634,1326,1327,1635,1328,1637,1638,1329,1331,1641,1643,1644,1332,1646,1334,1647,1648,1649,1650,1651,1338,1652,1653,1654,1339,1340,1341,1343,1658,1344,1659,1345,1660,1661,1662,1663,1664,1348,1349,1351,1665,1352,1666,1353,1667,1355,1668,1669,1671,1357,1358,1673,1359,1360,1675,1676,1361,1677,1678,1363,1679,1364,1681,1366,1367,1682,1683,1684,1368,1687,1689,1690,1369,1691,1371,1372,1373,1692,1374,1376,1694,1697,1698,1378,1699],"privDecls": [3314],"file": 44},{"kind": 8,"name": "std.os.bits.iovec_const","src": 461,"pubDecls": [],"privDecls": [],"fields": [486,370]},{"kind": 8,"name": "std.os.bits.darwin.mach_timebase_info_data","src": 462,"pubDecls": [],"privDecls": [],"fields": [470,470]},{"kind": 8,"name": "std.os.bits.iovec","src": 463,"pubDecls": [],"privDecls": [],"fields": [438,370]},{"kind": 8,"name": "std.os.darwin","src": 464,"pubDecls": [1069,1379,1380,1381,1070,2652,1071,1072,1073,1382,1074,1384,1385,1386,1075,1076,1387,1388,1077,1078,1389,1390,1079,2653,1080,1392,2654,1081,1082,2655,1393,2656,2657,1395,1396,2658,1086,1087,1397,2659,1088,1399,1400,1401,1089,1090,1091,1402,1092,1403,1404,1405,2660,1406,1407,2661,2662,1408,2663,1096,1410,1411,1412,1413,1414,2664,1097,1098,1415,1416,1099,2665,1417,1100,1418,2666,2667,1420,1101,1421,1102,1423,1424,2668,1103,1104,1425,1105,1426,1427,1106,1107,2669,1428,1429,1109,1110,1111,1431,2670,1433,2671,1434,1112,2672,1114,1115,1435,1116,1436,2673,2674,1117,1118,2675,1119,2676,1440,1120,2677,1121,1122,1442,2678,1445,1125,1126,2679,2680,1129,1446,1447,1448,1130,1131,2681,1133,1450,2682,1135,1136,1137,1452,1138,2683,1453,2684,1140,1454,1141,1455,1142,1143,1144,1457,2685,2686,1459,1460,1461,1462,1463,1464,2687,1146,1147,1467,2688,2689,1468,1149,1469,1150,1151,1470,2690,1152,1471,1472,2691,1153,1473,1155,1474,1156,1475,1477,1157,1478,1479,1158,1159,1160,2692,1161,1162,1481,2693,1164,1165,2694,2695,1483,2696,2697,1167,1484,2698,1486,2699,1168,2700,1489,1169,1170,1491,1171,2701,1172,1492,1174,1494,2702,2703,1496,2704,2705,1175,2706,2707,2708,1497,1498,1499,1500,1177,1501,1178,1179,1502,1503,2709,1181,1182,1184,2710,2711,2712,1505,1186,1187,1506,1507,1188,1508,1189,1509,2713,1510,1190,2714,1192,2715,1512,1513,1514,1194,1195,1515,1196,1197,1517,2716,1518,2717,1199,1520,2718,2719,1201,1202,1203,2720,1204,1205,2721,1521,1208,1207,2722,2723,1522,1209,1523,1210,1524,1211,1526,1527,1213,1212,1528,2724,1215,1529,1216,1530,1533,1217,2725,2726,1537,1218,1538,2727,1219,1221,1540,1222,1541,1223,2728,1542,2729,1543,1544,1224,1225,1226,1227,1228,1546,2730,1547,1229,1230,1549,1550,1231,1232,1233,2731,1551,1235,1552,1553,1554,1237,1555,1239,1240,1556,2732,1558,1560,1243,1561,1562,1563,2733,2734,1245,1246,1247,2735,2736,2737,1249,1250,1567,2738,1251,1252,1569,1253,1254,1255,1570,1256,2739,2740,2741,1260,1572,1573,1574,1262,2742,2743,1264,1575,1265,2744,2745,2746,2747,1267,1269,1270,1577,1272,1578,1579,1273,2748,1582,1274,1275,1276,2749,1583,1584,1585,2750,1278,1587,1588,1589,1280,1590,1282,1591,1592,1593,2751,1595,1285,2752,1286,2753,1287,1288,1596,2754,2755,2756,2757,1292,1293,2758,2759,1600,2760,2761,2762,1295,1298,2763,1297,1601,1299,2764,2765,1300,1301,1606,2766,1303,1607,1304,1608,1305,1306,1307,2767,1610,2768,1611,2769,1310,1311,1312,1313,2770,2771,1314,1614,1615,1315,2772,2773,1618,1619,1620,2774,1319,1320,1321,1323,2775,2776,2777,1623,1324,1624,1626,2778,1627,1628,1629,1325,2779,1631,1633,2780,1634,2781,1327,1326,1635,1328,1637,2782,1638,1329,1331,1641,1643,1644,1332,1646,2783,1334,1647,1648,2784,1649,1650,1651,1338,2785,1652,1653,1654,1339,2786,2787,1340,1341,2788,1343,1658,1344,2789,1659,2790,1345,1660,1661,1662,1663,1664,1348,1349,1351,1665,1352,1666,1353,2791,1667,1355,1668,1669,1671,2792,2793,1357,2794,1358,1673,1359,1360,1675,1676,1361,1677,1678,1363,1679,1364,2795,1681,2796,1366,1367,1682,1683,1684,1368,1687,2797,2798,1689,2799,1690,1369,1691,1371,1372,1373,1692,1374,1376,1694,1697,1698,1378,1699],"privDecls": [3315,3316],"file": 45},{"kind": 8,"name": "std.os.bits.darwin.kevent64_s","src": 465,"pubDecls": [],"privDecls": [],"fields": [385,850,472,470,599,385,997]},{"kind": 6,"elem": 998},{"kind": 8,"name": "std.os.windows","src": 466,"pubDecls": [3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771],"privDecls": [3772,3773,3774,3775,3776,3777,3778,3779],"file": 46},{"kind": 18,"name": "fn(var)var","generic": true,"args": [null]},{"kind": 18,"name": "fn(var,var,var,var)var","generic": true,"args": [null,null,null,null]},{"kind": 18,"name": "fn(std.builtin.StackTrace,var,var,var,var)var","generic": true,"args": [461,null,null,null,null]},{"kind": 8,"name": "std.debug.leb128","src": 467,"pubDecls": [3780,3781,3782,3783],"privDecls": [3784,3785,3786,3787,3788,3789,3790,3791],"file": 47},{"kind": 18,"name": "fn([]const u8,var)var","generic": true,"args": [350,null]},{"kind": 18,"name": "fn(*std.debug.DebugInfo,var,var,var)var","generic": true,"args": [481,null,null,null]},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace,?usize,[]const u8,var)var","generic": true,"args": [429,430,350,null]},{"kind": 18,"name": "fn([]const u8,var)var","generic": true,"args": [350,null]},{"kind": 7,"len": 7,"elem": 349},{"kind": 18,"name": "fn(*[*]const u8,type,var)var","generic": true,"args": [510,348,null]},{"kind": 18,"name": "fn(var,var)var","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 8,"name": "std.debug.Module","src": 468,"pubDecls": [],"privDecls": [],"fields": [924,362,362,347,362,362,430]},{"kind": 13,"child": 460},{"kind": 18,"name": "fn(*std.debug.DebugInfo,var,var,var)var","generic": true,"args": [481,null,null,null]},{"kind": 13,"child": 514},{"kind": 16,"name": "std.io.Mode","src": 469,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn(*std.mem.Allocator,[]const u8,u29)var","generic": true,"args": [432,350,452]},{"kind": 18,"name": "fn([]u8,[]const u8,var)var","generic": true,"args": [362,350,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn([]const u8,[]const u8,var,var,var,var)var","generic": true,"args": [350,350,null,null,null,null]},{"kind": 16,"name": "std.fmt.Alignment","src": 470,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(*u32,var,var)var","generic": true,"args": [1003,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(var,var,var,var,var,var)var","generic": true,"args": [null,null,null,null,null,null]},{"kind": 8,"name": "std.pdb.ModInfo","src": 471,"pubDecls": [],"privDecls": [],"fields": [470,925,472,472,470,470,470,472,592,470,470,470]},{"kind": 8,"name": "std.pdb.SectionContribEntry","src": 472,"pubDecls": [],"privDecls": [],"fields": [472,592,470,470,470,472,592,470,470]},{"kind": 8,"name": "std.pdb.Pdb","src": 473,"pubDecls": [3792,3793,3794],"privDecls": [],"fields": [458,432,1004,597,597,927]},{"kind": 8,"name": "std.pdb.Msf","src": 474,"pubDecls": [],"privDecls": [3795],"fields": [807,1005]},{"kind": 8,"name": "std.coff.Coff","src": 475,"pubDecls": [3796,3797,3798,3799,3800],"privDecls": [3801],"fields": [458,432,930,929,381,851,470]},{"kind": 8,"name": "std.coff.OptionalHeader","src": 476,"pubDecls": [],"privDecls": [3802],"fields": [472,1007]},{"kind": 8,"name": "std.coff.CoffHeader","src": 477,"pubDecls": [],"privDecls": [],"fields": [472,472,470,470,470,472,472]},{"kind": 8,"name": "std.hash.auto_hash","src": 478,"pubDecls": [3803,3804,3805,3806,3807],"privDecls": [3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818],"file": 48},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(type,var,var)var","generic": true,"args": [348,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var,var)var","generic": true,"args": [348,null,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var,var)var","generic": true,"args": [348,null,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var)var","generic": true,"args": [348,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var)var","generic": true,"args": [348,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var,var)var","generic": true,"args": [348,null,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var,var)var","generic": true,"args": [348,null,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var,var)var","generic": true,"args": [348,null,null,null,null,null]},{"kind": 8,"name": "std.sort.Pull","src": 479,"pubDecls": [],"privDecls": [],"fields": [370,370,370,557]},{"kind": 18,"name": "fn(type,var,var,var,var,var)var","generic": true,"args": [348,null,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var,var)var","generic": true,"args": [348,null,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var)var","generic": true,"args": [348,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var)var","generic": true,"args": [348,null,null,null,null]},{"kind": 18,"name": "fn(type,var,var,var,var,var)var","generic": true,"args": [348,null,null,null,null,null]},{"kind": 8,"name": "std.c.darwin","src": 480,"pubDecls": [1069,1379,1380,1381,2652,1070,1071,1072,1073,1382,1074,1384,1385,1386,1075,1076,1077,1387,1388,1078,1389,1390,1079,1080,1392,2654,1081,2655,1082,2656,1393,1395,1396,1086,1087,1397,1088,1399,1400,1401,1089,1090,1091,1402,1092,1403,1404,1405,1406,1407,2662,1408,1096,1410,1411,1412,1413,1414,1097,1098,1099,1415,1416,1417,1100,1418,2666,2667,1420,1101,1421,1102,2668,1423,1424,1103,1104,1425,1105,1426,1427,1106,1107,1428,1109,1429,1110,1111,1431,2671,1433,1434,1112,1114,1115,1435,1116,1436,2673,1117,1118,1119,1440,1120,2677,1121,1122,1442,1445,1125,1126,2679,1129,1446,1447,1448,1130,1131,1133,2682,1450,1135,1136,1137,2683,1452,1138,1140,1453,1454,1141,1455,1142,1143,1144,1457,1459,1460,1461,1462,1463,1464,1146,1147,1467,1468,1149,1469,1150,1151,1470,1152,1471,1472,1153,1473,1155,1474,1156,1475,1477,1157,1478,1479,1158,1159,1160,1161,1162,1481,1164,1165,1483,1167,1484,1486,1168,1489,1169,1170,1491,1171,2701,1172,1492,1174,1494,2703,1496,2704,2705,1175,1497,1498,1499,1500,1177,1501,1178,1179,1502,1503,1181,1182,1184,2712,1505,1186,1187,1506,1507,1188,1508,1189,1509,1510,1190,1192,1512,1513,1514,1194,1195,1515,1196,1197,1517,1518,1199,1520,1201,1202,1203,2720,1204,1205,1207,1521,1208,2723,1522,1209,1210,1523,1524,1526,1211,1212,1527,1213,1528,1215,1529,1216,1530,1533,1217,1537,1218,1538,1219,1221,1540,1222,1541,1223,1542,2729,1543,1544,1224,1225,1226,1227,1228,1546,1547,1229,1230,1549,1550,1231,1232,1233,1551,1235,1552,1553,1554,1237,1555,1239,1240,1556,1558,1560,1243,1561,1562,1563,2733,1245,1246,1247,1249,1250,1567,2738,1251,1252,1569,1253,1254,1255,1570,1256,1260,1572,1573,1574,1262,1264,1575,1265,2744,2747,1267,1269,1270,1577,1272,1578,1579,1273,1582,1274,1275,1276,1583,1584,1585,1278,1587,1588,1589,1280,1590,1282,1591,1592,1593,2751,1595,1285,1286,1287,1288,1596,2756,1292,2758,1293,2762,1600,1295,1297,1298,1601,1299,1300,1301,1606,1303,1607,1304,1608,1305,1306,1307,1610,2769,1611,1310,1311,1312,1313,2771,1314,1614,1615,1315,1618,1619,1620,1319,1320,1321,1323,1623,1324,1624,1626,2778,1627,1628,1629,1325,1631,1633,2781,1634,1326,1327,1635,1328,1637,1638,1329,1331,1641,1643,1644,1332,1646,1334,1647,1648,1649,1650,1651,1338,2785,1652,1653,1654,1339,2786,1340,1341,1343,1658,1344,2789,2790,1659,1345,1660,1661,1662,1663,1664,1348,1349,1351,1665,1352,1666,1353,1667,1355,1668,1669,1671,2793,1357,1358,1673,1359,1360,1675,1676,1361,1677,1678,1363,1679,1364,1681,1366,1367,1682,1683,1684,1368,1687,1689,1690,1369,1691,1371,1372,1373,1692,1374,1376,1694,1697,1698,1378,1699],"privDecls": [3819,3820,3821,3822,3823,3824,3825,3826],"file": 49},{"kind": 18,"name": "extern fn() *c_int","generic": false,"ret": 1010},{"kind": 18,"name": "extern fn(?*std.os.bits.darwin.mach_timebase_info_data) void","generic": false,"ret": 394,"args": [1011]},{"kind": 8,"name": "std.macho.mach_header_64","src": 481,"pubDecls": [],"privDecls": [],"fields": [470,471,471,470,470,470,470,470]},{"kind": 18,"name": "extern fn([*]const u8, c_uint, ...) c_int","generic": false,"ret": 471,"args": [486,1012]},{"kind": 18,"name": "extern fn(*std.c.darwin.pthread_mutex_t) c_int","generic": false,"ret": 471,"args": [1013]},{"kind": 18,"name": "extern fn(noalias *std.c.darwin.pthread_cond_t, noalias *std.c.darwin.pthread_mutex_t) c_int","generic": false,"ret": 471,"args": [1014,1013]},{"kind": 18,"name": "extern fn([*]const u8) ?[*]u8","generic": false,"ret": 808,"args": [486]},{"kind": 18,"name": "extern fn(*std.c.darwin.pthread_cond_t) c_int","generic": false,"ret": 471,"args": [1014]},{"kind": 18,"name": "extern fn(c_int) c_int","generic": false,"ret": 471,"args": [471]},{"kind": 18,"name": "extern fn(*align(4096) c_void, usize) c_int","generic": false,"ret": 471,"args": [1015,370]},{"kind": 18,"name": "extern fn() c_int","generic": false,"ret": 471},{"kind": 18,"name": "extern fn(c_int, i64, c_int) i64","generic": false,"ret": 599,"args": [471,599,471]},{"kind": 18,"name": "extern fn(?*align(4096) c_void, usize, c_uint, c_uint, c_int, u64) *c_void","generic": false,"ret": 893,"args": [1016,370,1012,1012,471,385]},{"kind": 18,"name": "extern fn(*const std.os.bits.darwin.timespec, ?*std.os.bits.darwin.timespec) c_int","generic": false,"ret": 471,"args": [1017,1018]},{"kind": 18,"name": "extern fn(c_int, *std.os.bits.darwin.Stat) c_int","generic": false,"ret": 471,"args": [471,1019]},{"kind": 18,"name": "extern fn() u64","generic": false,"ret": 385},{"kind": 18,"name": "extern fn() noreturn","generic": false,"ret": 426},{"kind": 18,"name": "extern fn(c_int, [*]const u8, usize) isize","generic": false,"ret": 359,"args": [471,486,370]},{"kind": 18,"name": "extern fn(c_int, [*]u8, usize) isize","generic": false,"ret": 359,"args": [471,438,370]},{"kind": 8,"name": "std.fs.path","src": 482,"pubDecls": [3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857],"privDecls": [3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887],"file": 50},{"kind": 8,"name": "std.heap.DirectAllocator","src": 483,"pubDecls": [],"privDecls": [3888,3889,3890]},{"kind": 18,"name": "fn(*std.progress.Progress,[]const u8,var)var","generic": true,"args": [604,350,null]},{"kind": 18,"name": "fn(*std.progress.Progress,*usize,[]const u8,var)var","generic": true,"args": [604,609,350,null]},{"kind": 13,"child": 458},{"kind": 7,"len": 100,"elem": 349},{"kind": 8,"name": "std.spinlock","src": 484,"pubDecls": [3891],"privDecls": [3892,3893,3894,3895,3896],"file": 51},{"kind": 8,"name": "std.macho.section_64","src": 485,"pubDecls": [],"privDecls": [],"fields": [851,851,385,385,470,470,470,470,470,470,470,470]},{"kind": 8,"name": "std.macho.symtab_command","src": 486,"pubDecls": [],"privDecls": [],"fields": [470,470,470,470,470,470]},{"kind": 8,"name": "std.macho.segment_command_64","src": 487,"pubDecls": [],"privDecls": [],"fields": [470,470,851,385,385,385,385,471,471,470,470]},{"kind": 8,"name": "std.macho.load_command","src": 488,"pubDecls": [],"privDecls": [],"fields": [470,470]},{"kind": 4,"i": 64},{"kind": 7,"len": 40,"elem": 349},{"kind": 7,"len": 56,"elem": 349},{"kind": 7,"len": 5,"elem": 385},{"kind": 18,"name": "fn(u8,var)var","generic": true,"args": [349,null]},{"kind": 6,"len": 2,"elem": 470},{"kind": 8,"name": "std.event.fs.OsDataPosix","src": 489,"pubDecls": [],"privDecls": [],"fields": [347,619]},{"kind": 6,"elem": 820},{"kind": 13,"child": 985},{"kind": 8,"name": "std.event.loop.KEventData","src": 490,"pubDecls": [],"privDecls": [],"fields": [446,670,670,670,1020,446,355,619]},{"kind": 6,"len": 2,"elem": 1020},{"kind": 6,"len": 2,"elem": 667},{"kind": 14,"err": 732,"payload": 471},{"kind": 15,"name": "std.event.fs.Error","errors": [23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,0,2,5,7,8]},{"kind": 14,"err": 991,"payload": 394},{"kind": 6,"len": 2,"const": true,"elem": 888},{"kind": 6,"len": 2,"const": true,"elem": 890},{"kind": 8,"name": "std.builtin.FnDecl","src": 491,"pubDecls": [3897],"privDecls": [],"fields": [348,1021,656,347,347,347,574,348,520]},{"kind": 21,"name": "std.c.pthread_t"},{"kind": 7,"len": 2,"elem": 385},{"kind": 21,"name": "c_void"},{"kind": 8,"name": "std.os.windows.bits","src": 492,"pubDecls": [3317,3318,3319,3320,3322,3323,3324,3325,3326,3327,3329,3330,3333,3334,3335,3336,3337,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3351,3352,3354,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3368,3370,3372,3373,3374,3376,3377,3378,3380,3381,3382,3383,3386,3387,3389,3390,3392,3393,3394,3395,3396,3397,3398,3399,3401,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3417,3418,3420,3421,3422,3423,3424,3425,3426,3427,3429,3430,3431,3432,3434,3437,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3460,3462,3463,3464,3465,3466,3467,3468,3470,3471,3472,3474,3475,3477,3478,3479,3480,3482,3483,3484,3485,3486,3487,3489,3491,3492,3493,3494,3495,3497,3499,3500,3501,3504,3505,3506,3507,3508,3509,3511,3512,3513,3514,3515,3516,3518,3519,3521,3522,3524,3525,3526,3527,3528,3529,3530,3532,3533,3534,3537,3538,3539,3540,3541,3542,3545,3546,3548,3549,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3575,3577,3578,3579,3580,3581,3583,3584,3585,3587,3589,3591,3592,3593,3594,3596,3597,3598,3600,3601,3602,3603,3605,3606,3608,3609,3610,3611,3612,3614,3616,3617,3619,3620,3621,3623,3624,3625,3628,3630,3631,3632,3633,3634,3635,3637,3638,3639,3642,3643,3644,3645,3646,3648,3649,3650,3651,3652,3654,3655,3656,3657,3659,3660,3661,3662,3663,3664,3665,3666,3668,3669,3670,3672,3673,3674,3676,3677,3678,3680,3683,3684,3685,3687,3688,3690,3691,3692,3693,3695,3696,3697,3698,3699,3700,3702,3703,3704,3705,3707,3709,3710,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3724,3725,3726,3727,3728,3729,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3743,3745,3747,3748,3752,3753,3754,3755,3756,3757,3759,3760,3763,3764,3765,3766,3767,3769],"privDecls": [3898,3899,3900,3901],"file": 52},{"kind": 15,"name": "std.os.windows.CreateFileError","errors": [23,24,25,26,27,28,29,30,31]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 18,"name": "fn(type,var)var","generic": true,"args": [348,null]},{"kind": 6,"elem": 470},{"kind": 6,"elem": 928},{"kind": 6,"len": 2,"elem": 807},{"kind": 8,"name": "std.coff.DataDirectory","src": 493,"pubDecls": [],"privDecls": [],"fields": [470,470]},{"kind": 7,"len": 16,"elem": 1006},{"kind": 16,"name": "std.hash.auto_hash.HashStrategy","src": 494,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(var,var,var)var","generic": true,"args": [null,null,null]},{"kind": 6,"elem": 471},{"kind": 13,"child": 1022},{"kind": 4,"u": 32},{"kind": 6,"elem": 801},{"kind": 6,"elem": 800},{"kind": 6,"align": 4096,"elem": 998},{"kind": 13,"child": 1015},{"kind": 6,"const": true,"elem": 578},{"kind": 13,"child": 1023},{"kind": 6,"elem": 579},{"kind": 6,"elem": 698},{"kind": 16,"name": "std.builtin.Inline","src": 495,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 6,"elem": 889},{"kind": 6,"elem": 578}],"decls": [{"import": 615,"src": 496,"name": "append"},{"import": 615,"src": 497,"name": "createNode"},{"import": 615,"src": 498,"name": "Node","kind": "const","type": 348,"value": 616},{"import": 615,"src": 499,"name": "destroyNode"},{"import": 615,"src": 500,"name": "prepend"},{"import": 615,"src": 501,"name": "pop"},{"import": 615,"src": 502,"name": "insertAfter"},{"import": 615,"src": 503,"name": "init"},{"import": 615,"src": 504,"name": "insertBefore"},{"import": 615,"src": 505,"name": "concatByMoving"},{"import": 615,"src": 506,"name": "remove"},{"import": 615,"src": 507,"name": "popFirst"},{"import": 615,"src": 508,"name": "allocateNode"},{"import": 615,"src": 509,"name": "Self"},{"import": 618,"src": 510,"name": "dump"},{"import": 618,"src": 511,"name": "dumpToStream"},{"import": 618,"src": 512,"name": "Node","kind": "const","type": 348,"value": 619},{"import": 618,"src": 513,"name": "put"},{"import": 618,"src": 514,"name": "init"},{"import": 618,"src": 515,"name": "unget"},{"import": 618,"src": 516,"name": "get"},{"import": 618,"src": 517,"name": "Self"},{"import": 618,"src": 518,"name": "remove"},{"import": 618,"src": 519,"name": "isEmpty"},{"import": 621,"src": 520,"name": "Finish","kind": "const","type": 348,"value": 622},{"import": 621,"src": 521,"name": "Msg","kind": "const","type": 348,"value": 623},{"import": 615,"src": 522,"name": "createNode"},{"import": 615,"src": 523,"name": "Node","kind": "const","type": 348,"value": 624},{"import": 615,"src": 524,"name": "destroyNode"},{"import": 615,"src": 198,"name": "prepend","kind": "const","type": 240,"value": 301},{"import": 615,"src": 525,"name": "insertAfter"},{"import": 615,"src": 200,"name": "init","kind": "const","type": 241,"value": 303},{"import": 615,"src": 526,"name": "remove"},{"import": 615,"src": 527,"name": "allocateNode"},{"import": 615,"src": 528,"name": "popFirst"},{"import": 615,"src": 529,"name": "Self","kind": "const","type": 348,"value": 361},{"import": 626,"src": 530,"name": "set"},{"import": 626,"src": 108,"name": "ensureCapacity","kind": "const","type": 120,"value": 145},{"import": 626,"src": 531,"name": "setOrError"},{"import": 626,"src": 532,"name": "appendAssumeCapacity"},{"import": 626,"src": 533,"name": "swapRemoveOrError"},{"import": 626,"src": 534,"name": "at"},{"import": 626,"src": 109,"name": "capacity","kind": "const","type": 121,"value": 146},{"import": 626,"src": 535,"name": "swapRemove"},{"import": 626,"src": 536,"name": "iterator"},{"import": 626,"src": 537,"name": "pop"},{"import": 626,"src": 113,"name": "toSliceConst","kind": "const","type": 127,"value": 152},{"import": 626,"src": 538,"name": "appendSlice"},{"import": 626,"src": 539,"name": "insertSlice"},{"import": 626,"src": 540,"name": "fromOwnedSlice"},{"import": 626,"src": 541,"name": "SliceConst","kind": "const","type": 348,"value": 523},{"import": 626,"src": 106,"name": "append","kind": "const","type": 118,"value": 143},{"import": 626,"src": 542,"name": "resize"},{"import": 626,"src": 543,"name": "deinit"},{"import": 626,"src": 544,"name": "insert"},{"import": 626,"src": 107,"name": "addOne","kind": "const","type": 119,"value": 144},{"import": 626,"src": 110,"name": "addOneAssumeCapacity","kind": "const","type": 123,"value": 148},{"import": 626,"src": 545,"name": "Iterator"},{"import": 626,"src": 546,"name": "shrink"},{"import": 626,"src": 547,"name": "Slice","kind": "const","type": 348,"value": 520},{"import": 626,"src": 548,"name": "toOwnedSlice"},{"import": 626,"src": 549,"name": "orderedRemove"},{"import": 626,"src": 104,"name": "init","kind": "const","type": 116,"value": 141},{"import": 626,"src": 183,"name": "count","kind": "const","type": 121,"value": 266},{"import": 626,"src": 550,"name": "popOrNull"},{"import": 626,"src": 551,"name": "toSlice"},{"import": 626,"src": 552,"name": "Self","kind": "const","type": 348,"value": 364},{"import": 627,"src": 553,"name": "WriteFn","kind": "const","type": 348,"value": 42},{"import": 627,"src": 554,"name": "writeIntLittle"},{"import": 627,"src": 555,"name": "writeInt"},{"import": 627,"src": 37,"name": "print","kind": "const","type": 628,"value": 560},{"import": 627,"src": 556,"name": "writeIntNative"},{"import": 627,"src": 557,"name": "Error","kind": "const","type": 348,"value": 368},{"import": 627,"src": 558,"name": "writeIntForeign"},{"import": 627,"src": 123,"name": "writeByte","kind": "const","type": 146,"value": 171},{"import": 627,"src": 559,"name": "writeByteNTimes"},{"import": 627,"src": 560,"name": "writeIntBig"},{"import": 627,"src": 124,"name": "write","kind": "const","type": 42,"value": 172},{"import": 627,"src": 561,"name": "Self","kind": "const","type": 348,"value": 367},{"import": 629,"src": 562,"name": "exeFileExt"},{"import": 629,"src": 563,"name": "getArchPtrBitWidth"},{"import": 629,"src": 564,"name": "zigTriple"},{"import": 629,"src": 565,"name": "getAbi"},{"import": 629,"src": 566,"name": "stack_align"},{"import": 629,"src": 567,"name": "subArchName"},{"import": 629,"src": 67,"name": "isDarwin","kind": "const","type": 68,"value": 91},{"import": 629,"src": 568,"name": "getArch"},{"import": 629,"src": 569,"name": "zigTripleNoSubArch"},{"import": 629,"src": 570,"name": "isMinGW"},{"import": 629,"src": 571,"name": "parseArchSub"},{"import": 629,"src": 572,"name": "staticLibSuffix"},{"import": 629,"src": 573,"name": "isWindows"},{"import": 629,"src": 574,"name": "oFileExt"},{"import": 629,"src": 575,"name": "isFreeBSD"},{"import": 629,"src": 576,"name": "isGnu"},{"import": 629,"src": 577,"name": "allocDescription"},{"import": 629,"src": 578,"name": "dynamicLibSuffix"},{"import": 629,"src": 579,"name": "Os","kind": "const","type": 348,"value": 373},{"import": 629,"src": 580,"name": "Abi","kind": "const","type": 348,"value": 630},{"import": 629,"src": 581,"name": "Cross","kind": "const","type": 348,"value": 631},{"import": 629,"src": 582,"name": "osRequiresLibC"},{"import": 629,"src": 583,"name": "ParseArchSubError"},{"import": 629,"src": 584,"name": "linuxTriple"},{"import": 629,"src": 585,"name": "wantSharedLibSymLinks"},{"import": 629,"src": 586,"name": "ObjectFormat"},{"import": 629,"src": 587,"name": "current","kind": "const","type": 374,"value": null},{"import": 629,"src": 588,"name": "Executor"},{"import": 629,"src": 589,"name": "parseOs"},{"import": 629,"src": 68,"name": "getOs","kind": "const","type": 69,"value": 92},{"import": 629,"src": 590,"name": "libPrefix"},{"import": 629,"src": 591,"name": "Arch","kind": "const","type": 348,"value": 632},{"import": 629,"src": 592,"name": "isNetBSD"},{"import": 629,"src": 593,"name": "SubSystem"},{"import": 629,"src": 594,"name": "parse"},{"import": 629,"src": 595,"name": "isLinux"},{"import": 629,"src": 596,"name": "getExternalExecutor"},{"import": 629,"src": 597,"name": "parseAbi"},{"import": 629,"src": 598,"name": "isUefi"},{"import": 629,"src": 599,"name": "defaultAbi"},{"import": 629,"src": 600,"name": "isWasm"},{"import": 629,"src": 601,"name": "archSubArchName"},{"import": 633,"src": 602,"name": "clone"},{"import": 633,"src": 603,"name": "ensureCapacity"},{"import": 633,"src": 82,"name": "getOrPut","kind": "const","type": 87,"value": 112},{"import": 633,"src": 604,"name": "putNoClobber"},{"import": 633,"src": 605,"name": "iterator"},{"import": 633,"src": 606,"name": "KV","kind": "const","type": 348,"value": 634},{"import": 633,"src": 83,"name": "get","kind": "const","type": 88,"value": 113},{"import": 633,"src": 607,"name": "GetOrPutResult","kind": "const","type": 348,"value": 635},{"import": 633,"src": 608,"name": "clear"},{"import": 633,"src": 609,"name": "putAssumeCapacity"},{"import": 633,"src": 610,"name": "deinit"},{"import": 633,"src": 611,"name": "getOrPutValue"},{"import": 633,"src": 612,"name": "getValue"},{"import": 633,"src": 613,"name": "put"},{"import": 633,"src": 614,"name": "Iterator"},{"import": 633,"src": 72,"name": "init","kind": "const","type": 76,"value": 99},{"import": 633,"src": 615,"name": "count"},{"import": 633,"src": 616,"name": "contains"},{"import": 633,"src": 97,"name": "remove","kind": "const","type": 106,"value": 131},{"import": 633,"src": 617,"name": "removeAssertDiscard"},{"import": 633,"src": 618,"name": "optimizedCapacity"},{"import": 633,"src": 87,"name": "initCapacity","kind": "const","type": 92,"value": 117},{"import": 633,"src": 173,"name": "keyToIndex","kind": "const","type": 204,"value": 251},{"import": 633,"src": 619,"name": "Self","kind": "const","type": 348,"value": 377},{"import": 633,"src": 85,"name": "autoCapacity","kind": "const","type": 90,"value": 115},{"import": 633,"src": 84,"name": "incrementModificationCount","kind": "const","type": 89,"value": 114},{"import": 633,"src": 174,"name": "constrainIndex","kind": "const","type": 205,"value": 252},{"import": 633,"src": 620,"name": "InternalPutResult","kind": "const","type": 348,"value": 496},{"import": 633,"src": 88,"name": "internalPut","kind": "const","type": 94,"value": 119},{"import": 633,"src": 621,"name": "Entry","kind": "const","type": 348,"value": 636},{"import": 633,"src": 86,"name": "ensureCapacityExact","kind": "const","type": 91,"value": 116},{"import": 633,"src": 172,"name": "internalGet","kind": "const","type": 203,"value": 249},{"import": 626,"src": 530,"name": "set"},{"import": 626,"src": 108,"name": "ensureCapacity"},{"import": 626,"src": 531,"name": "setOrError"},{"import": 626,"src": 532,"name": "appendAssumeCapacity"},{"import": 626,"src": 533,"name": "swapRemoveOrError"},{"import": 626,"src": 534,"name": "at"},{"import": 626,"src": 109,"name": "capacity"},{"import": 626,"src": 535,"name": "swapRemove"},{"import": 626,"src": 536,"name": "iterator"},{"import": 626,"src": 537,"name": "pop"},{"import": 626,"src": 113,"name": "toSliceConst"},{"import": 626,"src": 538,"name": "appendSlice"},{"import": 626,"src": 539,"name": "insertSlice"},{"import": 626,"src": 540,"name": "fromOwnedSlice"},{"import": 626,"src": 541,"name": "SliceConst"},{"import": 626,"src": 106,"name": "append"},{"import": 626,"src": 542,"name": "resize"},{"import": 626,"src": 543,"name": "deinit"},{"import": 626,"src": 544,"name": "insert"},{"import": 626,"src": 107,"name": "addOne"},{"import": 626,"src": 110,"name": "addOneAssumeCapacity"},{"import": 626,"src": 545,"name": "Iterator"},{"import": 626,"src": 546,"name": "shrink"},{"import": 626,"src": 547,"name": "Slice","kind": "const","type": 348,"value": 640},{"import": 626,"src": 548,"name": "toOwnedSlice"},{"import": 626,"src": 549,"name": "orderedRemove"},{"import": 626,"src": 104,"name": "init"},{"import": 626,"src": 183,"name": "count"},{"import": 626,"src": 550,"name": "popOrNull"},{"import": 626,"src": 551,"name": "toSlice"},{"import": 626,"src": 552,"name": "Self"},{"import": 615,"src": 496,"name": "append"},{"import": 615,"src": 497,"name": "createNode"},{"import": 615,"src": 498,"name": "Node","kind": "const","type": 348,"value": 619},{"import": 615,"src": 499,"name": "destroyNode"},{"import": 615,"src": 500,"name": "prepend"},{"import": 615,"src": 501,"name": "pop"},{"import": 615,"src": 502,"name": "insertAfter"},{"import": 615,"src": 503,"name": "init"},{"import": 615,"src": 504,"name": "insertBefore"},{"import": 615,"src": 505,"name": "concatByMoving"},{"import": 615,"src": 506,"name": "remove"},{"import": 615,"src": 507,"name": "popFirst"},{"import": 615,"src": 508,"name": "allocateNode"},{"import": 615,"src": 509,"name": "Self"},{"import": 626,"src": 530,"name": "set"},{"import": 626,"src": 108,"name": "ensureCapacity","kind": "const","type": 131,"value": 156},{"import": 626,"src": 531,"name": "setOrError"},{"import": 626,"src": 532,"name": "appendAssumeCapacity"},{"import": 626,"src": 533,"name": "swapRemoveOrError"},{"import": 626,"src": 534,"name": "at"},{"import": 626,"src": 109,"name": "capacity","kind": "const","type": 132,"value": 157},{"import": 626,"src": 535,"name": "swapRemove"},{"import": 626,"src": 536,"name": "iterator"},{"import": 626,"src": 537,"name": "pop"},{"import": 626,"src": 113,"name": "toSliceConst"},{"import": 626,"src": 538,"name": "appendSlice"},{"import": 626,"src": 539,"name": "insertSlice"},{"import": 626,"src": 540,"name": "fromOwnedSlice"},{"import": 626,"src": 541,"name": "SliceConst"},{"import": 626,"src": 106,"name": "append","kind": "const","type": 129,"value": 154},{"import": 626,"src": 542,"name": "resize"},{"import": 626,"src": 543,"name": "deinit"},{"import": 626,"src": 544,"name": "insert"},{"import": 626,"src": 107,"name": "addOne","kind": "const","type": 130,"value": 155},{"import": 626,"src": 110,"name": "addOneAssumeCapacity","kind": "const","type": 134,"value": 159},{"import": 626,"src": 545,"name": "Iterator"},{"import": 626,"src": 546,"name": "shrink"},{"import": 626,"src": 547,"name": "Slice","kind": "const","type": 348,"value": 530},{"import": 626,"src": 548,"name": "toOwnedSlice"},{"import": 626,"src": 549,"name": "orderedRemove"},{"import": 626,"src": 104,"name": "init","kind": "const","type": 125,"value": 150},{"import": 626,"src": 183,"name": "count","kind": "const","type": 132,"value": 268},{"import": 626,"src": 550,"name": "popOrNull"},{"import": 626,"src": 551,"name": "toSlice"},{"import": 626,"src": 552,"name": "Self","kind": "const","type": 348,"value": 391},{"import": 422,"src": 138,"name": "assertExternal","kind": "const","type": 642,"value": 561},{"import": 422,"src": 47,"name": "assertInternal","kind": "const","type": 643,"value": 562},{"import": 422,"src": 300,"name": "useExternal","kind": "const","type": 421,"value": 559},{"import": 422,"src": 289,"name": "useInternal","kind": "const","type": 395,"value": 547},{"import": 644,"src": 622,"name": "Struct","kind": "const","type": 348,"value": 645},{"import": 644,"src": 623,"name": "Array","kind": "const","type": 348,"value": 646},{"import": 644,"src": 624,"name": "ErrorUnion","kind": "const","type": 348,"value": 647},{"import": 644,"src": 625,"name": "Pointer","kind": "const","type": 348,"value": 648},{"import": 644,"src": 626,"name": "EnumField","kind": "const","type": 348,"value": 649},{"import": 644,"src": 627,"name": "ContainerLayout","kind": "const","type": 348,"value": 650},{"import": 644,"src": 628,"name": "Declaration","kind": "const","type": 348,"value": 651},{"import": 644,"src": 629,"name": "Union","kind": "const","type": 348,"value": 652},{"import": 644,"src": 630,"name": "ErrorSet","kind": "const","type": 348,"value": 653},{"import": 644,"src": 631,"name": "Optional","kind": "const","type": 348,"value": 654},{"import": 644,"src": 632,"name": "Enum","kind": "const","type": 348,"value": 655},{"import": 644,"src": 633,"name": "CallingConvention","kind": "const","type": 348,"value": 656},{"import": 644,"src": 634,"name": "Vector","kind": "const","type": 348,"value": 657},{"import": 644,"src": 635,"name": "Float","kind": "const","type": 348,"value": 658},{"import": 644,"src": 636,"name": "UnionField","kind": "const","type": 348,"value": 659},{"import": 644,"src": 637,"name": "StructField","kind": "const","type": 348,"value": 660},{"import": 644,"src": 638,"name": "AnyFrame","kind": "const","type": 348,"value": 661},{"import": 644,"src": 639,"name": "Error","kind": "const","type": 348,"value": 662},{"import": 644,"src": 640,"name": "Fn","kind": "const","type": 348,"value": 663},{"import": 644,"src": 641,"name": "FnArg","kind": "const","type": 348,"value": 664},{"import": 644,"src": 642,"name": "Int","kind": "const","type": 348,"value": 665},{"import": 666,"src": 643,"name": "pop"},{"import": 666,"src": 644,"name": "init"},{"import": 666,"src": 645,"name": "Self"},{"import": 666,"src": 646,"name": "pushFirst"},{"import": 666,"src": 647,"name": "Node","kind": "const","type": 348,"value": 667},{"import": 666,"src": 648,"name": "push"},{"import": 666,"src": 649,"name": "isEmpty"},{"import": 666,"src": 650,"name": "lock_init","kind": "const","type": 349,"value": null},{"import": 422,"src": 651,"name": "wasm_allocator"},{"import": 422,"src": 8,"name": "init","kind": "const","type": 12,"value": 18},{"import": 422,"src": 51,"name": "unsafeCeilPowerOfTwo","kind": "const","type": 671,"value": 563},{"import": 422,"src": 133,"name": "allocNode","kind": "const","type": 165,"value": 196},{"import": 422,"src": 45,"name": "realloc","kind": "const","type": 48,"value": 67},{"import": 422,"src": 652,"name": "Frame","kind": "const","type": 348,"value": 672},{"import": 422,"src": 653,"name": "config"},{"import": 422,"src": 187,"name": "freeListOfSize","kind": "const","type": 228,"value": 288},{"import": 422,"src": 48,"name": "unsafeLog2Int","kind": "const","type": 673,"value": 564},{"import": 422,"src": 12,"name": "debugCountAll","kind": "const","type": 13,"value": 19},{"import": 422,"src": 654,"name": "Self","kind": "const","type": 348,"value": 406},{"import": 422,"src": 17,"name": "debugCount","kind": "const","type": 54,"value": 69},{"import": 422,"src": 9,"name": "freeListIndex","kind": "const","type": 54,"value": 285},{"import": 422,"src": 137,"name": "free","kind": "const","type": 169,"value": 201},{"import": 422,"src": 52,"name": "unsafeAlignForward","kind": "const","type": 52,"value": 197},{"import": 422,"src": 655,"name": "FreeList","kind": "const","type": 348,"value": 465},{"import": 422,"src": 136,"name": "chunkify","kind": "const","type": 168,"value": 200},{"import": 422,"src": 11,"name": "padToFrameSize","kind": "const","type": 54,"value": 284},{"import": 422,"src": 46,"name": "shrink","kind": "const","type": 34,"value": 68},{"import": 422,"src": 132,"name": "findFreeNode","kind": "const","type": 164,"value": 195},{"import": 422,"src": 656,"name": "debugDump"},{"import": 422,"src": 657,"name": "JumboMatchStrategy","kind": "const","type": 348,"value": 676},{"import": 422,"src": 658,"name": "Validation","kind": "const","type": 348,"value": 396},{"import": 422,"src": 659,"name": "ShrinkStrategy","kind": "const","type": 348,"value": 677},{"import": 422,"src": 660,"name": "BuddyStrategy","kind": "const","type": 348,"value": 678},{"import": 422,"src": 651,"name": "wasm_allocator"},{"import": 422,"src": 8,"name": "init","kind": "const","type": 5,"value": 8},{"import": 422,"src": 51,"name": "unsafeCeilPowerOfTwo","kind": "const","type": 679,"value": 565},{"import": 422,"src": 133,"name": "allocNode","kind": "const","type": 155,"value": 185},{"import": 422,"src": 45,"name": "realloc","kind": "const","type": 48,"value": 56},{"import": 422,"src": 652,"name": "Frame","kind": "const","type": 348,"value": 680},{"import": 422,"src": 653,"name": "config","kind": "const","type": 407,"value": null},{"import": 422,"src": 187,"name": "freeListOfSize","kind": "const","type": 222,"value": 279},{"import": 422,"src": 48,"name": "unsafeLog2Int","kind": "const","type": 681,"value": 566},{"import": 422,"src": 12,"name": "debugCountAll","kind": "const","type": 8,"value": 12},{"import": 422,"src": 654,"name": "Self","kind": "const","type": 348,"value": 408},{"import": 422,"src": 17,"name": "debugCount","kind": "const","type": 6,"value": 17},{"import": 422,"src": 9,"name": "freeListIndex","kind": "const","type": 6,"value": 9},{"import": 422,"src": 137,"name": "free","kind": "const","type": 159,"value": 189},{"import": 422,"src": 52,"name": "unsafeAlignForward","kind": "const","type": 52,"value": 64},{"import": 422,"src": 655,"name": "FreeList","kind": "const","type": 348,"value": 464},{"import": 422,"src": 136,"name": "chunkify","kind": "const","type": 158,"value": 188},{"import": 422,"src": 11,"name": "padToFrameSize","kind": "const","type": 6,"value": 11},{"import": 422,"src": 46,"name": "shrink","kind": "const","type": 34,"value": 57},{"import": 422,"src": 132,"name": "findFreeNode","kind": "const","type": 154,"value": 184},{"import": 422,"src": 656,"name": "debugDump"},{"import": 618,"src": 510,"name": "dump"},{"import": 618,"src": 511,"name": "dumpToStream"},{"import": 618,"src": 512,"name": "Node","kind": "const","type": 348,"value": 616},{"import": 618,"src": 513,"name": "put"},{"import": 618,"src": 514,"name": "init"},{"import": 618,"src": 515,"name": "unget"},{"import": 618,"src": 516,"name": "get"},{"import": 618,"src": 517,"name": "Self"},{"import": 618,"src": 518,"name": "remove"},{"import": 618,"src": 519,"name": "isEmpty"},{"import": 683,"src": 661,"name": "readByte"},{"import": 683,"src": 662,"name": "readIntBig"},{"import": 683,"src": 663,"name": "readStruct"},{"import": 683,"src": 664,"name": "skipBytes"},{"import": 683,"src": 180,"name": "read"},{"import": 683,"src": 665,"name": "readAllAlloc"},{"import": 683,"src": 666,"name": "readUntilDelimiterBuffer"},{"import": 683,"src": 667,"name": "readIntForeign"},{"import": 683,"src": 668,"name": "ReadFn","kind": "const","type": 348,"value": 684},{"import": 683,"src": 669,"name": "readIntNative"},{"import": 683,"src": 96,"name": "readFull"},{"import": 683,"src": 95,"name": "readNoEof"},{"import": 683,"src": 670,"name": "readByteSigned"},{"import": 683,"src": 671,"name": "readVarInt"},{"import": 683,"src": 672,"name": "skipUntilDelimiterOrEof"},{"import": 683,"src": 673,"name": "Error","kind": "const","type": 348,"value": 414},{"import": 683,"src": 674,"name": "readIntLittle"},{"import": 683,"src": 675,"name": "readUntilDelimiterOrEof"},{"import": 683,"src": 676,"name": "readUntilDelimiterAlloc"},{"import": 683,"src": 677,"name": "readAllBuffer"},{"import": 683,"src": 678,"name": "readInt"},{"import": 683,"src": 679,"name": "Self","kind": "const","type": 348,"value": 413},{"import": 683,"src": 661,"name": "readByte"},{"import": 683,"src": 662,"name": "readIntBig"},{"import": 683,"src": 663,"name": "readStruct"},{"import": 683,"src": 664,"name": "skipBytes"},{"import": 683,"src": 180,"name": "read","kind": "const","type": 104,"value": 259},{"import": 683,"src": 665,"name": "readAllAlloc"},{"import": 683,"src": 666,"name": "readUntilDelimiterBuffer"},{"import": 683,"src": 667,"name": "readIntForeign"},{"import": 683,"src": 668,"name": "ReadFn","kind": "const","type": 348,"value": 104},{"import": 683,"src": 669,"name": "readIntNative"},{"import": 683,"src": 96,"name": "readFull","kind": "const","type": 104,"value": 129},{"import": 683,"src": 95,"name": "readNoEof","kind": "const","type": 103,"value": 128},{"import": 683,"src": 670,"name": "readByteSigned"},{"import": 683,"src": 671,"name": "readVarInt"},{"import": 683,"src": 672,"name": "skipUntilDelimiterOrEof"},{"import": 683,"src": 673,"name": "Error","kind": "const","type": 348,"value": 417},{"import": 683,"src": 674,"name": "readIntLittle"},{"import": 683,"src": 675,"name": "readUntilDelimiterOrEof"},{"import": 683,"src": 676,"name": "readUntilDelimiterAlloc"},{"import": 683,"src": 677,"name": "readAllBuffer"},{"import": 683,"src": 678,"name": "readInt"},{"import": 683,"src": 679,"name": "Self","kind": "const","type": 348,"value": 416},{"import": 422,"src": 293,"name": "ZeeAlloc","kind": "const","type": 405,"value": 552},{"import": 422,"src": 680,"name": "ZeeAllocDefaults","kind": "const","type": 348,"value": 408},{"import": 422,"src": 681,"name": "Config","kind": "const","type": 348,"value": 407},{"import": 422,"src": 682,"name": "ExportC"},{"import": 422,"src": 683,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 422,"src": 684,"name": "page_index","kind": "const","type": 358,"value": null},{"import": 422,"src": 26,"name": "testAllocatorAligned","kind": "const","type": 686,"value": 567},{"import": 422,"src": 685,"name": "testAllocatorAlignedShrink"},{"import": 422,"src": 686,"name": "min_frame_size","kind": "const","type": 358,"value": null},{"import": 422,"src": 687,"name": "wasm_page_allocator"},{"import": 422,"src": 688,"name": "std","kind": "const","type": 348,"value": 424},{"import": 422,"src": 24,"name": "testAllocator","kind": "const","type": 21,"value": 27},{"import": 422,"src": 689,"name": "testAllocatorLargeAlignment"},{"import": 422,"src": 690,"name": "llvm.wasm.memory.grow.i32"},{"import": 422,"src": 691,"name": "min_payload_size","kind": "const","type": 358,"value": null},{"import": 422,"src": 692,"name": "jumbo_index","kind": "const","type": 358,"value": null},{"import": 422,"src": 693,"name": "testing","kind": "const","type": 348,"value": 687},{"import": 422,"src": 694,"name": "meta_size","kind": "const","type": 358,"value": null},{"import": 422,"src": 695,"name": "assertIf"},{"import": 422,"src": 696,"name": "Allocator","kind": "const","type": 348,"value": 675},{"import": 423,"src": 697,"name": "test_functions","kind": "const","type": 688,"value": null},{"import": 423,"src": 698,"name": "position_independent_code"},{"import": 644,"src": 699,"name": "AtomicRmwOp","kind": "const","type": 348,"value": 689},{"import": 423,"src": 700,"name": "link_libc","kind": "const","type": 347,"value": null},{"import": 644,"src": 0,"name": "default_panic","kind": "const","type": 0,"value": 0},{"import": 423,"src": 701,"name": "object_format"},{"import": 423,"src": 702,"name": "arch","kind": "const","type": 690,"value": null},{"import": 423,"src": 703,"name": "endian","kind": "const","type": 512,"value": null},{"import": 423,"src": 704,"name": "mode","kind": "const","type": 691,"value": null},{"import": 644,"src": 705,"name": "FloatMode"},{"import": 423,"src": 706,"name": "os","kind": "const","type": 373,"value": null},{"import": 644,"src": 707,"name": "TypeId","kind": "const","type": 348,"value": 399},{"import": 644,"src": 708,"name": "AtomicOrder","kind": "const","type": 348,"value": 692},{"import": 423,"src": 709,"name": "abi","kind": "const","type": 630,"value": null},{"import": 644,"src": 710,"name": "ObjectFormat"},{"import": 644,"src": 711,"name": "StackTrace","kind": "const","type": 348,"value": 461},{"import": 423,"src": 712,"name": "is_test"},{"import": 644,"src": 713,"name": "PanicFn","kind": "const","type": 348,"value": 0},{"import": 423,"src": 714,"name": "glibc_version"},{"import": 644,"src": 715,"name": "Arch","kind": "const","type": 348,"value": 632},{"import": 423,"src": 716,"name": "valgrind_support"},{"import": 644,"src": 717,"name": "subsystem"},{"import": 644,"src": 718,"name": "SubSystem"},{"import": 644,"src": 719,"name": "Mode","kind": "const","type": 348,"value": 691},{"import": 644,"src": 720,"name": "Endian","kind": "const","type": 348,"value": 512},{"import": 644,"src": 721,"name": "panic","kind": "const","type": 0,"value": 0},{"import": 423,"src": 722,"name": "strip_debug_info","kind": "const","type": 347,"value": null},{"import": 423,"src": 723,"name": "single_threaded","kind": "const","type": 347,"value": null},{"import": 644,"src": 724,"name": "Os","kind": "const","type": 348,"value": 373},{"import": 644,"src": 725,"name": "Version"},{"import": 644,"src": 726,"name": "Abi","kind": "const","type": 348,"value": 630},{"import": 644,"src": 727,"name": "GlobalLinkage","kind": "const","type": 348,"value": 693},{"import": 423,"src": 728,"name": "have_error_return_tracing"},{"import": 644,"src": 729,"name": "TypeInfo","kind": "const","type": 348,"value": 694},{"import": 423,"src": 730,"name": "TestFn","kind": "const","type": 348,"value": 695},{"import": 424,"src": 731,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 424,"src": 732,"name": "DynLib"},{"import": 424,"src": 733,"name": "builtin","kind": "const","type": 348,"value": 644},{"import": 424,"src": 734,"name": "SinglyLinkedList","kind": "const","type": 360,"value": 533},{"import": 424,"src": 735,"name": "PackedIntArrayEndian"},{"import": 424,"src": 736,"name": "PackedIntArray"},{"import": 424,"src": 737,"name": "math","kind": "const","type": 348,"value": 697},{"import": 424,"src": 738,"name": "Thread","kind": "const","type": 348,"value": 698},{"import": 424,"src": 739,"name": "BufSet"},{"import": 424,"src": 740,"name": "fifo"},{"import": 424,"src": 741,"name": "os","kind": "const","type": 348,"value": 699},{"import": 424,"src": 742,"name": "debug","kind": "const","type": 348,"value": 700},{"import": 424,"src": 743,"name": "Buffer"},{"import": 424,"src": 744,"name": "dwarf","kind": "const","type": 348,"value": 701},{"import": 424,"src": 745,"name": "testing","kind": "const","type": 348,"value": 687},{"import": 424,"src": 746,"name": "BufferOutStream"},{"import": 424,"src": 747,"name": "event","kind": "const","type": 348,"value": 702},{"import": 424,"src": 748,"name": "unicode"},{"import": 424,"src": 749,"name": "build"},{"import": 424,"src": 750,"name": "AlignedArrayList"},{"import": 424,"src": 751,"name": "http"},{"import": 424,"src": 752,"name": "elf"},{"import": 424,"src": 753,"name": "SegmentedList"},{"import": 424,"src": 754,"name": "ascii"},{"import": 424,"src": 755,"name": "io","kind": "const","type": 348,"value": 703},{"import": 424,"src": 756,"name": "ChildProcess"},{"import": 424,"src": 757,"name": "hash_map","kind": "const","type": 348,"value": 633},{"import": 424,"src": 758,"name": "ThreadParker","kind": "const","type": 348,"value": 582},{"import": 424,"src": 759,"name": "fmt","kind": "const","type": 348,"value": 704},{"import": 424,"src": 760,"name": "base64"},{"import": 424,"src": 761,"name": "atomic","kind": "const","type": 348,"value": 705},{"import": 424,"src": 762,"name": "TailQueue","kind": "const","type": 351,"value": 530},{"import": 424,"src": 763,"name": "json"},{"import": 424,"src": 764,"name": "lazyInit"},{"import": 424,"src": 765,"name": "pdb","kind": "const","type": 348,"value": 706},{"import": 424,"src": 766,"name": "BufMap"},{"import": 424,"src": 767,"name": "coff","kind": "const","type": 348,"value": 707},{"import": 424,"src": 768,"name": "crypto"},{"import": 424,"src": 769,"name": "hash","kind": "const","type": 348,"value": 708},{"import": 424,"src": 770,"name": "sort","kind": "const","type": 348,"value": 709},{"import": 424,"src": 771,"name": "c","kind": "const","type": 348,"value": 710},{"import": 424,"src": 772,"name": "cstr"},{"import": 424,"src": 773,"name": "rb"},{"import": 424,"src": 774,"name": "rand"},{"import": 424,"src": 775,"name": "meta","kind": "const","type": 348,"value": 711},{"import": 424,"src": 776,"name": "net"},{"import": 424,"src": 777,"name": "fs","kind": "const","type": 348,"value": 712},{"import": 424,"src": 778,"name": "heap","kind": "const","type": 348,"value": 713},{"import": 424,"src": 779,"name": "AutoHashMap"},{"import": 424,"src": 780,"name": "Mutex","kind": "const","type": 348,"value": 581},{"import": 424,"src": 781,"name": "PriorityQueue"},{"import": 424,"src": 782,"name": "time","kind": "const","type": 348,"value": 714},{"import": 424,"src": 783,"name": "Progress","kind": "const","type": 348,"value": 715},{"import": 424,"src": 784,"name": "Target","kind": "const","type": 348,"value": 374},{"import": 424,"src": 785,"name": "packed_int_array"},{"import": 424,"src": 786,"name": "valgrind"},{"import": 424,"src": 787,"name": "PackedIntSliceEndian"},{"import": 424,"src": 788,"name": "HashMap","kind": "const","type": 376,"value": 540},{"import": 424,"src": 789,"name": "zig"},{"import": 424,"src": 790,"name": "ArrayList","kind": "const","type": 363,"value": 534},{"import": 424,"src": 791,"name": "SpinLock","kind": "const","type": 348,"value": 716},{"import": 424,"src": 792,"name": "PackedIntSlice"},{"import": 424,"src": 793,"name": "process","kind": "const","type": 348,"value": 717},{"import": 424,"src": 794,"name": "macho","kind": "const","type": 348,"value": 718},{"import": 424,"src": 795,"name": "BloomFilter"},{"import": 424,"src": 796,"name": "StringHashMap"},{"import": 425,"src": 256,"name": "main","kind": "const","type": 1,"value": 447},{"import": 425,"src": 797,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 425,"src": 798,"name": "io"},{"import": 425,"src": 799,"name": "std","kind": "const","type": 348,"value": 424},{"import": 425,"src": 800,"name": "test_fn_list","kind": "const","type": 688,"value": null},{"import": 713,"src": 801,"name": "reset"},{"import": 713,"src": 6,"name": "init","kind": "const","type": 3,"value": 6},{"import": 713,"src": 43,"name": "shrink","kind": "const","type": 34,"value": 54},{"import": 713,"src": 40,"name": "realloc","kind": "const","type": 45,"value": 51},{"import": 713,"src": 42,"name": "alloc","kind": "const","type": 46,"value": 53},{"import": 731,"src": 802,"name": "Error","kind": "const","type": 348,"value": 368},{"import": 731,"src": 803,"name": "Stream","kind": "const","type": 348,"value": 367},{"import": 731,"src": 60,"name": "writeFn","kind": "const","type": 42,"value": 84},{"import": 731,"src": 36,"name": "outStream","kind": "const","type": 41,"value": 47},{"import": 731,"src": 804,"name": "seekableStream"},{"import": 731,"src": 805,"name": "OpenError","kind": "const","type": 348,"value": 732},{"import": 731,"src": 91,"name": "getEndPos","kind": "const","type": 98,"value": 123},{"import": 731,"src": 806,"name": "mode"},{"import": 731,"src": 169,"name": "isTty","kind": "const","type": 200,"value": 244},{"import": 731,"src": 177,"name": "stat","kind": "const","type": 208,"value": 256},{"import": 731,"src": 807,"name": "openReadW"},{"import": 731,"src": 176,"name": "openReadC","kind": "const","type": 207,"value": 255},{"import": 731,"src": 92,"name": "close","kind": "const","type": 99,"value": 124},{"import": 731,"src": 808,"name": "openWriteNoClobber"},{"import": 731,"src": 59,"name": "openHandle","kind": "const","type": 61,"value": 83},{"import": 731,"src": 809,"name": "openWrite"},{"import": 731,"src": 249,"name": "seekTo","kind": "const","type": 305,"value": 438},{"import": 731,"src": 810,"name": "Mode","kind": "const","type": 348,"value": 470},{"import": 731,"src": 811,"name": "UpdateTimesError"},{"import": 731,"src": 812,"name": "Stat","kind": "const","type": 348,"value": 733},{"import": 731,"src": 813,"name": "InStream","kind": "const","type": 348,"value": 503},{"import": 731,"src": 122,"name": "read","kind": "const","type": 145,"value": 170},{"import": 731,"src": 814,"name": "seekFromEnd"},{"import": 731,"src": 815,"name": "seekBy"},{"import": 731,"src": 816,"name": "ReadError","kind": "const","type": 348,"value": 417},{"import": 731,"src": 817,"name": "ModeError"},{"import": 731,"src": 818,"name": "SeekError","kind": "const","type": 348,"value": 734},{"import": 731,"src": 819,"name": "getPos"},{"import": 731,"src": 820,"name": "writev_iovec"},{"import": 731,"src": 821,"name": "default_mode"},{"import": 731,"src": 822,"name": "openWriteModeW"},{"import": 731,"src": 140,"name": "write","kind": "const","type": 175,"value": 210},{"import": 731,"src": 94,"name": "inStream","kind": "const","type": 102,"value": 127},{"import": 731,"src": 823,"name": "OutStream","kind": "const","type": 348,"value": 457},{"import": 731,"src": 824,"name": "openWriteModeC"},{"import": 731,"src": 825,"name": "openWriteMode"},{"import": 731,"src": 826,"name": "openWriteNoClobberW"},{"import": 731,"src": 827,"name": "GetPosError","kind": "const","type": 348,"value": 735},{"import": 731,"src": 828,"name": "StatError","kind": "const","type": 348,"value": 736},{"import": 731,"src": 258,"name": "supportsAnsiEscapeCodes","kind": "const","type": 200,"value": 450},{"import": 731,"src": 90,"name": "openRead","kind": "const","type": 97,"value": 122},{"import": 731,"src": 829,"name": "SeekableStream"},{"import": 731,"src": 830,"name": "WriteError","kind": "const","type": 348,"value": 368},{"import": 731,"src": 831,"name": "access"},{"import": 731,"src": 832,"name": "updateTimes"},{"import": 731,"src": 833,"name": "accessW"},{"import": 731,"src": 834,"name": "accessC"},{"import": 731,"src": 835,"name": "openWriteNoClobberC"},{"import": 422,"src": 186,"name": "removeAfter","kind": "const","type": 221,"value": 278},{"import": 422,"src": 44,"name": "init","kind": "const","type": 47,"value": 55},{"import": 422,"src": 185,"name": "root","kind": "const","type": 220,"value": 277},{"import": 422,"src": 190,"name": "remove"},{"import": 422,"src": 188,"name": "prepend","kind": "const","type": 223,"value": 280},{"import": 422,"src": 186,"name": "removeAfter","kind": "const","type": 227,"value": 287},{"import": 422,"src": 44,"name": "init","kind": "const","type": 53,"value": 66},{"import": 422,"src": 185,"name": "root","kind": "const","type": 226,"value": 286},{"import": 422,"src": 190,"name": "remove","kind": "const","type": 231,"value": 291},{"import": 422,"src": 188,"name": "prepend","kind": "const","type": 229,"value": 289},{"import": 700,"src": 70,"name": "addressLessThan","kind": "const","type": 74,"value": 97},{"import": 700,"src": 144,"name": "address","kind": "const","type": 180,"value": 217},{"import": 731,"src": 836,"name": "Error","kind": "const","type": 348,"value": 417},{"import": 731,"src": 837,"name": "Stream","kind": "const","type": 348,"value": 416},{"import": 731,"src": 179,"name": "readFn","kind": "const","type": 104,"value": 258},{"import": 700,"src": 105,"name": "allocator","kind": "const","type": 117,"value": 142},{"import": 700,"src": 838,"name": "OFileTable","kind": "const","type": 348,"value": 377},{"import": 700,"src": 115,"name": "checkLineMatch","kind": "const","type": 136,"value": 161},{"import": 700,"src": 112,"name": "init","kind": "const","type": 126,"value": 151},{"import": 700,"src": 125,"name": "deinit","kind": "const","type": 147,"value": 174},{"import": 700,"src": 127,"name": "init","kind": "const","type": 150,"value": 179},{"import": 700,"src": 128,"name": "next","kind": "const","type": 151,"value": 180},{"import": 700,"src": 839,"name": "fp_adjust_factor","kind": "const","type": 358,"value": null},{"import": 713,"src": 143,"name": "init","kind": "const","type": 178,"value": 213},{"import": 713,"src": 840,"name": "deinit"},{"import": 713,"src": 199,"name": "shrink","kind": "const","type": 34,"value": 302},{"import": 713,"src": 197,"name": "createNode","kind": "const","type": 239,"value": 300},{"import": 713,"src": 195,"name": "realloc","kind": "const","type": 237,"value": 298},{"import": 713,"src": 196,"name": "alloc","kind": "const","type": 238,"value": 299},{"import": 713,"src": 841,"name": "BufNode","kind": "const","type": 348,"value": 624},{"import": 709,"src": 146,"name": "init","kind": "const","type": 182,"value": 219},{"import": 709,"src": 147,"name": "finished","kind": "const","type": 183,"value": 220},{"import": 709,"src": 151,"name": "length","kind": "const","type": 187,"value": 224},{"import": 709,"src": 148,"name": "nextRange","kind": "const","type": 184,"value": 221},{"import": 709,"src": 152,"name": "begin","kind": "const","type": 188,"value": 225},{"import": 709,"src": 155,"name": "nextLevel","kind": "const","type": 183,"value": 229},{"import": 709,"src": 149,"name": "length","kind": "const","type": 185,"value": 222},{"import": 709,"src": 154,"name": "init","kind": "const","type": 191,"value": 228},{"import": 796,"src": 211,"name": "mtime","kind": "const","type": 251,"value": 320},{"import": 796,"src": 212,"name": "ctime","kind": "const","type": 251,"value": 321},{"import": 796,"src": 210,"name": "atime","kind": "const","type": 251,"value": 319},{"import": 798,"src": 842,"name": "deinit"},{"import": 798,"src": 214,"name": "init","kind": "const","type": 265,"value": 347},{"import": 798,"src": 216,"name": "acquire","kind": "const","type": 267,"value": 349},{"import": 798,"src": 843,"name": "Held","kind": "const","type": 348,"value": 583},{"import": 798,"src": 844,"name": "Sleeping","kind": "const","type": 358,"value": null},{"import": 798,"src": 845,"name": "SPIN_THREAD","kind": "const","type": 358,"value": null},{"import": 798,"src": 846,"name": "SPIN_CPU_COUNT","kind": "const","type": 358,"value": null},{"import": 798,"src": 847,"name": "Locked","kind": "const","type": 358,"value": null},{"import": 798,"src": 848,"name": "SPIN_CPU","kind": "const","type": 358,"value": null},{"import": 798,"src": 849,"name": "Unlocked","kind": "const","type": 358,"value": null},{"import": 799,"src": 227,"name": "unpark","kind": "const","type": 281,"value": 384},{"import": 799,"src": 215,"name": "init","kind": "const","type": 266,"value": 348},{"import": 799,"src": 850,"name": "deinit"},{"import": 799,"src": 226,"name": "park","kind": "const","type": 280,"value": 383},{"import": 799,"src": 851,"name": "c","kind": "const","type": 348,"value": 710},{"import": 798,"src": 217,"name": "release","kind": "const","type": 268,"value": 350},{"import": 802,"src": 852,"name": "hash"},{"import": 802,"src": 218,"name": "init","kind": "const","type": 269,"value": 352},{"import": 802,"src": 233,"name": "update","kind": "const","type": 287,"value": 402},{"import": 802,"src": 220,"name": "final","kind": "const","type": 271,"value": 354},{"import": 802,"src": 853,"name": "hash"},{"import": 802,"src": 228,"name": "init","kind": "const","type": 282,"value": 386},{"import": 802,"src": 241,"name": "update","kind": "const","type": 295,"value": 419},{"import": 802,"src": 230,"name": "final","kind": "const","type": 283,"value": 388},{"import": 802,"src": 244,"name": "round","kind": "const","type": 295,"value": 429},{"import": 812,"src": 261,"name": "activate","kind": "const","type": 317,"value": 453},{"import": 812,"src": 270,"name": "completeOne","kind": "const","type": 317,"value": 475},{"import": 812,"src": 263,"name": "end","kind": "const","type": 317,"value": 456},{"import": 812,"src": 260,"name": "start","kind": "const","type": 316,"value": 452},{"import": 615,"src": 276,"name": "SinglyLinkedList","kind": "const","type": 360,"value": 533},{"import": 615,"src": 273,"name": "TailQueue","kind": "const","type": 351,"value": 530},{"import": 615,"src": 854,"name": "std"},{"import": 615,"src": 855,"name": "Allocator"},{"import": 615,"src": 856,"name": "debug"},{"import": 615,"src": 857,"name": "assert"},{"import": 615,"src": 858,"name": "testing"},{"import": 615,"src": 859,"name": "mem"},{"import": 615,"src": 860,"name": "init"},{"import": 618,"src": 274,"name": "Queue","kind": "const","type": 354,"value": 531},{"import": 618,"src": 861,"name": "builtin"},{"import": 618,"src": 862,"name": "put_thread_count"},{"import": 618,"src": 863,"name": "AtomicRmwOp"},{"import": 618,"src": 864,"name": "puts_per_thread"},{"import": 618,"src": 865,"name": "std","kind": "const","type": 348,"value": 424},{"import": 618,"src": 866,"name": "startPuts"},{"import": 618,"src": 867,"name": "AtomicOrder"},{"import": 618,"src": 868,"name": "expect"},{"import": 618,"src": 869,"name": "assert"},{"import": 618,"src": 870,"name": "Context"},{"import": 618,"src": 871,"name": "startGets"},{"import": 615,"src": 860,"name": "init"},{"import": 621,"src": 872,"name": "preadvWindows"},{"import": 621,"src": 873,"name": "RequestNode","kind": "const","type": 348,"value": 619},{"import": 621,"src": 874,"name": "PReadVError"},{"import": 621,"src": 875,"name": "openReadWrite"},{"import": 621,"src": 876,"name": "writeFileMode"},{"import": 621,"src": 877,"name": "pwriteWindows"},{"import": 621,"src": 878,"name": "preadv"},{"import": 621,"src": 879,"name": "preadWindows"},{"import": 621,"src": 880,"name": "pwritev"},{"import": 621,"src": 881,"name": "pwritevPosix"},{"import": 621,"src": 882,"name": "openWrite"},{"import": 621,"src": 883,"name": "PWriteVError"},{"import": 621,"src": 884,"name": "InStream"},{"import": 621,"src": 885,"name": "openPosix"},{"import": 621,"src": 886,"name": "preadvPosix"},{"import": 621,"src": 887,"name": "Request","kind": "const","type": 348,"value": 356},{"import": 621,"src": 888,"name": "pwritevWindows"},{"import": 621,"src": 889,"name": "writevPosix"},{"import": 621,"src": 890,"name": "OutStream"},{"import": 621,"src": 891,"name": "CloseOperation","kind": "const","type": 348,"value": 819},{"import": 621,"src": 892,"name": "openWriteMode"},{"import": 621,"src": 893,"name": "readFile"},{"import": 621,"src": 894,"name": "openRead"},{"import": 621,"src": 895,"name": "writeFile"},{"import": 621,"src": 896,"name": "WatchEventId"},{"import": 621,"src": 897,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 621,"src": 898,"name": "Loop","kind": "const","type": 348,"value": 820},{"import": 621,"src": 899,"name": "hashString"},{"import": 621,"src": 900,"name": "test_tmp_dir"},{"import": 621,"src": 901,"name": "os","kind": "const","type": 348,"value": 699},{"import": 621,"src": 902,"name": "testing"},{"import": 621,"src": 903,"name": "testFsWatch"},{"import": 621,"src": 904,"name": "event","kind": "const","type": 348,"value": 702},{"import": 621,"src": 905,"name": "testFsWatchCantFail"},{"import": 621,"src": 906,"name": "writeFileWindows"},{"import": 621,"src": 907,"name": "std","kind": "const","type": 348,"value": 424},{"import": 621,"src": 908,"name": "File","kind": "const","type": 348,"value": 458},{"import": 621,"src": 909,"name": "windows"},{"import": 621,"src": 910,"name": "eqlString"},{"import": 621,"src": 911,"name": "fd_t","kind": "const","type": 348,"value": 471},{"import": 621,"src": 912,"name": "writeFileModeThread"},{"import": 621,"src": 913,"name": "assert"},{"import": 621,"src": 914,"name": "mem"},{"import": 621,"src": 915,"name": "Close","kind": "const","type": 348,"value": 822},{"import": 621,"src": 916,"name": "Open","kind": "const","type": 348,"value": 823},{"import": 621,"src": 917,"name": "WriteFile","kind": "const","type": 348,"value": 824},{"import": 621,"src": 918,"name": "PWriteV","kind": "const","type": 348,"value": 825},{"import": 621,"src": 919,"name": "WriteV","kind": "const","type": 348,"value": 826},{"import": 621,"src": 920,"name": "PReadV","kind": "const","type": 348,"value": 827},{"import": 615,"src": 921,"name": "removeNext"},{"import": 615,"src": 922,"name": "insertAfter"},{"import": 615,"src": 923,"name": "init"},{"import": 626,"src": 277,"name": "ArrayList","kind": "const","type": 363,"value": 534},{"import": 626,"src": 283,"name": "AlignedArrayList","kind": "const","type": 380,"value": 541},{"import": 626,"src": 924,"name": "std","kind": "const","type": 348,"value": 424},{"import": 626,"src": 925,"name": "Allocator","kind": "const","type": 348,"value": 675},{"import": 626,"src": 926,"name": "Item"},{"import": 626,"src": 927,"name": "debug","kind": "const","type": 348,"value": 700},{"import": 626,"src": 928,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 626,"src": 929,"name": "testing"},{"import": 626,"src": 930,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 627,"src": 279,"name": "OutStream","kind": "const","type": 366,"value": 536},{"import": 627,"src": 931,"name": "stack_size"},{"import": 627,"src": 932,"name": "default_stack_size"},{"import": 627,"src": 933,"name": "builtin"},{"import": 627,"src": 934,"name": "std","kind": "const","type": 348,"value": 424},{"import": 627,"src": 935,"name": "root"},{"import": 627,"src": 936,"name": "mem"},{"import": 629,"src": 937,"name": "Target","kind": "const","type": 348,"value": 374},{"import": 629,"src": 938,"name": "builtin","kind": "const","type": 348,"value": 644},{"import": 629,"src": 939,"name": "std","kind": "const","type": 348,"value": 424},{"import": 629,"src": 940,"name": "mem"},{"import": 629,"src": 941,"name": "Arm32","kind": "const","type": 348,"value": 828},{"import": 629,"src": 942,"name": "Kalimba","kind": "const","type": 348,"value": 829},{"import": 629,"src": 943,"name": "Mips"},{"import": 629,"src": 944,"name": "Arm64","kind": "const","type": 348,"value": 830},{"import": 633,"src": 945,"name": "getAutoEqlFn"},{"import": 633,"src": 946,"name": "hashString"},{"import": 633,"src": 291,"name": "getTrivialEqlFn","kind": "const","type": 401,"value": 550},{"import": 633,"src": 947,"name": "getAutoHashStratFn"},{"import": 633,"src": 948,"name": "AutoHashMap"},{"import": 633,"src": 142,"name": "getAutoHashFn","kind": "const","type": 831,"value": 568},{"import": 633,"src": 282,"name": "HashMap","kind": "const","type": 376,"value": 540},{"import": 633,"src": 949,"name": "eqlString"},{"import": 633,"src": 299,"name": "getHashPtrAddrFn","kind": "const","type": 420,"value": 558},{"import": 633,"src": 950,"name": "StringHashMap"},{"import": 633,"src": 951,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 633,"src": 952,"name": "Wyhash","kind": "const","type": 348,"value": 585},{"import": 633,"src": 953,"name": "math","kind": "const","type": 348,"value": 697},{"import": 633,"src": 954,"name": "std","kind": "const","type": 348,"value": 424},{"import": 633,"src": 955,"name": "debug","kind": "const","type": 348,"value": 700},{"import": 633,"src": 956,"name": "meta"},{"import": 633,"src": 957,"name": "testing"},{"import": 633,"src": 958,"name": "debug_u32","kind": "const","type": 348,"value": 470},{"import": 633,"src": 959,"name": "Allocator","kind": "const","type": 348,"value": 675},{"import": 633,"src": 960,"name": "want_modification_safety","kind": "const","type": 347,"value": null},{"import": 633,"src": 961,"name": "autoHash","kind": "const","type": 832,"value": 569},{"import": 633,"src": 962,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 633,"src": 963,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 707,"src": 964,"name": "Misc","kind": "const","type": 348,"value": 834},{"import": 644,"src": 965,"name": "root","kind": "const","type": 348,"value": 835},{"import": 644,"src": 966,"name": "std","kind": "const","type": 348,"value": 424},{"import": 644,"src": 967,"name": "Size","kind": "const","type": 348,"value": 838},{"import": 644,"src": 968,"name": "Data","kind": "const","type": 348,"value": 839},{"import": 666,"src": 292,"name": "Stack","kind": "const","type": 402,"value": 551},{"import": 666,"src": 969,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 666,"src": 970,"name": "put_thread_count"},{"import": 666,"src": 971,"name": "puts_per_thread"},{"import": 666,"src": 972,"name": "std"},{"import": 666,"src": 973,"name": "startPuts"},{"import": 666,"src": 974,"name": "AtomicOrder"},{"import": 666,"src": 975,"name": "expect"},{"import": 666,"src": 976,"name": "assert"},{"import": 666,"src": 977,"name": "Context"},{"import": 666,"src": 978,"name": "startGets"},{"import": 848,"src": 979,"name": "Id","kind": "const","type": 348,"value": 849},{"import": 848,"src": 980,"name": "overlapped_init","kind": "const","type": 394,"value": null},{"import": 848,"src": 981,"name": "Overlapped","kind": "const","type": 348,"value": 394},{"import": 848,"src": 982,"name": "EventFd","kind": "const","type": 348,"value": 404},{"import": 848,"src": 983,"name": "Basic"},{"import": 848,"src": 984,"name": "KEventBasic"},{"import": 848,"src": 985,"name": "KEventFd","kind": "const","type": 348,"value": 404},{"import": 422,"src": 20,"name": "restorePayload","kind": "const","type": 161,"value": 192},{"import": 422,"src": 23,"name": "isAllocated","kind": "const","type": 170,"value": 202},{"import": 422,"src": 21,"name": "validate","kind": "const","type": 225,"value": 282},{"import": 422,"src": 189,"name": "restoreAddr","kind": "const","type": 230,"value": 290},{"import": 422,"src": 131,"name": "payloadSlice","kind": "const","type": 163,"value": 194},{"import": 422,"src": 134,"name": "init","kind": "const","type": 166,"value": 198},{"import": 422,"src": 135,"name": "markAllocated","kind": "const","type": 167,"value": 199},{"import": 422,"src": 130,"name": "payloadSize","kind": "const","type": 162,"value": 193},{"import": 422,"src": 22,"name": "isCorrectSize","kind": "const","type": 19,"value": 283},{"import": 422,"src": 986,"name": "alignment","kind": "const","type": 358,"value": null},{"import": 422,"src": 987,"name": "allocated_signal","kind": "const","type": 547,"value": null},{"import": 696,"src": 18,"name": "destroy","kind": "const","type": 852,"value": 570},{"import": 696,"src": 19,"name": "realloc","kind": "const","type": 853,"value": 571},{"import": 696,"src": 25,"name": "shrink","kind": "const","type": 854,"value": 572},{"import": 696,"src": 988,"name": "Error","kind": "const","type": 348,"value": 722},{"import": 696,"src": 55,"name": "alignedShrink","kind": "const","type": 855,"value": 573},{"import": 696,"src": 27,"name": "alignedAlloc","kind": "const","type": 856,"value": 574},{"import": 696,"src": 15,"name": "alloc","kind": "const","type": 857,"value": 575},{"import": 696,"src": 53,"name": "alignedRealloc","kind": "const","type": 858,"value": 576},{"import": 696,"src": 16,"name": "free","kind": "const","type": 859,"value": 577},{"import": 696,"src": 13,"name": "create","kind": "const","type": 860,"value": 578},{"import": 422,"src": 20,"name": "restorePayload","kind": "const","type": 17,"value": 23},{"import": 422,"src": 23,"name": "isAllocated","kind": "const","type": 20,"value": 26},{"import": 422,"src": 21,"name": "validate","kind": "const","type": 18,"value": 24},{"import": 422,"src": 189,"name": "restoreAddr"},{"import": 422,"src": 131,"name": "payloadSlice","kind": "const","type": 153,"value": 183},{"import": 422,"src": 134,"name": "init","kind": "const","type": 156,"value": 186},{"import": 422,"src": 135,"name": "markAllocated","kind": "const","type": 157,"value": 187},{"import": 422,"src": 130,"name": "payloadSize","kind": "const","type": 152,"value": 182},{"import": 422,"src": 22,"name": "isCorrectSize","kind": "const","type": 19,"value": 25},{"import": 422,"src": 986,"name": "alignment","kind": "const","type": 358,"value": null},{"import": 422,"src": 987,"name": "allocated_signal","kind": "const","type": 441,"value": null},{"import": 683,"src": 989,"name": "default_stack_size"},{"import": 683,"src": 990,"name": "stack_size"},{"import": 683,"src": 296,"name": "InStream","kind": "const","type": 412,"value": 555},{"import": 683,"src": 991,"name": "builtin"},{"import": 683,"src": 992,"name": "root"},{"import": 683,"src": 993,"name": "math"},{"import": 683,"src": 994,"name": "std","kind": "const","type": 348,"value": 424},{"import": 683,"src": 995,"name": "assert"},{"import": 683,"src": 996,"name": "Buffer"},{"import": 683,"src": 997,"name": "mem"},{"import": 687,"src": 10,"name": "expectEqual","kind": "const","type": 862,"value": 579},{"import": 687,"src": 998,"name": "expectEqualSlices"},{"import": 687,"src": 14,"name": "expect","kind": "const","type": 4,"value": 14},{"import": 687,"src": 999,"name": "expectError"},{"import": 687,"src": 1000,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 687,"src": 1001,"name": "std","kind": "const","type": 348,"value": 424},{"import": 687,"src": 1002,"name": "TypeId"},{"import": 696,"src": 1003,"name": "toSlice"},{"import": 696,"src": 1004,"name": "subArrayPtr"},{"import": 696,"src": 246,"name": "set","kind": "const","type": 863,"value": 580},{"import": 696,"src": 202,"name": "reverse","kind": "const","type": 864,"value": 581},{"import": 696,"src": 1005,"name": "writeIntSliceBig"},{"import": 696,"src": 100,"name": "readIntSliceNative","kind": "const","type": 865,"value": 582},{"import": 696,"src": 1006,"name": "toBytes"},{"import": 696,"src": 156,"name": "rotate","kind": "const","type": 866,"value": 583},{"import": 696,"src": 170,"name": "len","kind": "const","type": 867,"value": 584},{"import": 696,"src": 1007,"name": "bytesToValue"},{"import": 696,"src": 1008,"name": "writeIntForeign"},{"import": 696,"src": 79,"name": "toSliceConst","kind": "const","type": 868,"value": 585},{"import": 696,"src": 1009,"name": "separate"},{"import": 696,"src": 1010,"name": "SplitIterator"},{"import": 696,"src": 1011,"name": "max"},{"import": 696,"src": 1012,"name": "startsWith"},{"import": 696,"src": 1013,"name": "indexOfScalarPos"},{"import": 696,"src": 1014,"name": "writeIntSliceNative"},{"import": 696,"src": 1015,"name": "indexOf"},{"import": 696,"src": 118,"name": "copy","kind": "const","type": 869,"value": 586},{"import": 696,"src": 1016,"name": "writeInt"},{"import": 696,"src": 145,"name": "swap","kind": "const","type": 870,"value": 587},{"import": 696,"src": 1017,"name": "lastIndexOfScalar"},{"import": 696,"src": 1018,"name": "Compare"},{"import": 696,"src": 1019,"name": "writeIntSliceLittle"},{"import": 696,"src": 1020,"name": "min"},{"import": 696,"src": 181,"name": "readIntNative","kind": "const","type": 871,"value": 588},{"import": 696,"src": 1021,"name": "readIntSliceBig"},{"import": 696,"src": 1022,"name": "indexOfAnyPos"},{"import": 696,"src": 1023,"name": "writeIntLittle"},{"import": 696,"src": 1024,"name": "trimLeft"},{"import": 696,"src": 234,"name": "asBytes","kind": "const","type": 872,"value": 589},{"import": 696,"src": 1025,"name": "readVarInt"},{"import": 696,"src": 1026,"name": "isAligned"},{"import": 696,"src": 1027,"name": "writeIntSlice"},{"import": 696,"src": 206,"name": "dupe","kind": "const","type": 873,"value": 590},{"import": 696,"src": 1028,"name": "join"},{"import": 696,"src": 1029,"name": "concat"},{"import": 696,"src": 1030,"name": "bytesAsValue"},{"import": 696,"src": 1031,"name": "toNative"},{"import": 696,"src": 1032,"name": "indexOfPos"},{"import": 696,"src": 1033,"name": "nativeToLittle"},{"import": 696,"src": 129,"name": "alignBackward","kind": "const","type": 36,"value": 181},{"import": 696,"src": 182,"name": "readIntSlice","kind": "const","type": 874,"value": 591},{"import": 696,"src": 1034,"name": "nativeTo"},{"import": 696,"src": 1035,"name": "lastIndexOfAny"},{"import": 696,"src": 1036,"name": "TokenIterator"},{"import": 696,"src": 1037,"name": "littleToNative"},{"import": 696,"src": 1038,"name": "bigToNative"},{"import": 696,"src": 41,"name": "alignForward","kind": "const","type": 36,"value": 52},{"import": 696,"src": 1039,"name": "indexOfScalar"},{"import": 696,"src": 1040,"name": "nativeToBig"},{"import": 696,"src": 1041,"name": "writeIntNative"},{"import": 696,"src": 1042,"name": "Allocator","kind": "const","type": 348,"value": 675},{"import": 696,"src": 1043,"name": "compare"},{"import": 696,"src": 1044,"name": "indexOfAny"},{"import": 696,"src": 1045,"name": "readIntBig"},{"import": 696,"src": 1046,"name": "lessThan"},{"import": 696,"src": 1047,"name": "endsWith"},{"import": 696,"src": 1048,"name": "trim"},{"import": 696,"src": 1049,"name": "tokenize"},{"import": 696,"src": 222,"name": "readIntForeign","kind": "const","type": 875,"value": 592},{"import": 696,"src": 1050,"name": "writeIntSliceForeign"},{"import": 696,"src": 1051,"name": "readIntSliceLittle","kind": "const","type": 865,"value": 582},{"import": 696,"src": 1052,"name": "trimRight"},{"import": 696,"src": 1053,"name": "secureZero"},{"import": 696,"src": 1054,"name": "writeIntBig"},{"import": 696,"src": 1055,"name": "page_size","kind": "const","type": 358,"value": null},{"import": 696,"src": 1056,"name": "lastIndexOf"},{"import": 696,"src": 1057,"name": "readIntLittle"},{"import": 696,"src": 1058,"name": "readIntSliceForeign"},{"import": 696,"src": 1059,"name": "copyBackwards"},{"import": 696,"src": 1060,"name": "allEqual"},{"import": 696,"src": 98,"name": "eql","kind": "const","type": 346,"value": 529},{"import": 696,"src": 213,"name": "readInt","kind": "const","type": 876,"value": 593},{"import": 696,"src": 1061,"name": "BytesAsValueReturnType"},{"import": 696,"src": 1062,"name": "testWriteIntImpl"},{"import": 696,"src": 1063,"name": "meta","kind": "const","type": 348,"value": 711},{"import": 696,"src": 1064,"name": "SubArrayPtrReturnType"},{"import": 696,"src": 1065,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 696,"src": 1066,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 696,"src": 298,"name": "AsBytesReturnType","kind": "const","type": 418,"value": 557},{"import": 696,"src": 1067,"name": "math","kind": "const","type": 348,"value": 697},{"import": 696,"src": 1068,"name": "debug","kind": "const","type": 348,"value": 700},{"import": 696,"src": 1069,"name": "testing"},{"import": 696,"src": 1070,"name": "trait","kind": "const","type": 348,"value": 877},{"import": 696,"src": 1071,"name": "testReadIntImpl"},{"import": 696,"src": 1072,"name": "std","kind": "const","type": 348,"value": 424},{"import": 696,"src": 1073,"name": "mem"},{"import": 697,"src": 1074,"name": "pi_2"},{"import": 697,"src": 1075,"name": "ceil"},{"import": 697,"src": 1076,"name": "isNan"},{"import": 697,"src": 1077,"name": "isSignalNan"},{"import": 697,"src": 1078,"name": "cosh"},{"import": 697,"src": 1079,"name": "floor"},{"import": 697,"src": 1080,"name": "nan_u128"},{"import": 697,"src": 1081,"name": "modf64_result"},{"import": 697,"src": 1082,"name": "hypot"},{"import": 697,"src": 1083,"name": "inf_u16"},{"import": 697,"src": 1084,"name": "absFloat"},{"import": 697,"src": 1085,"name": "f64_true_min"},{"import": 697,"src": 1086,"name": "rotr"},{"import": 697,"src": 1087,"name": "absCast"},{"import": 697,"src": 1088,"name": "cbrt"},{"import": 697,"src": 1089,"name": "round"},{"import": 697,"src": 1090,"name": "nan_f32"},{"import": 697,"src": 1091,"name": "divFloor"},{"import": 697,"src": 1092,"name": "ceilPowerOfTwo"},{"import": 697,"src": 242,"name": "mulWide","kind": "const","type": 878,"value": 594},{"import": 697,"src": 1093,"name": "sinh"},{"import": 697,"src": 1094,"name": "inf_u32"},{"import": 697,"src": 1095,"name": "shr"},{"import": 697,"src": 1096,"name": "asinh"},{"import": 697,"src": 275,"name": "maxInt","kind": "const","type": 357,"value": 532},{"import": 697,"src": 1097,"name": "sin"},{"import": 697,"src": 1098,"name": "f64_toint"},{"import": 697,"src": 93,"name": "cast","kind": "const","type": 879,"value": 595},{"import": 697,"src": 1099,"name": "f128_true_min"},{"import": 697,"src": 1100,"name": "two_sqrtpi"},{"import": 697,"src": 1101,"name": "acosh"},{"import": 697,"src": 1102,"name": "frexp32_result"},{"import": 697,"src": 1103,"name": "Complex"},{"import": 697,"src": 1104,"name": "raiseOverflow"},{"import": 697,"src": 1105,"name": "inf_f128"},{"import": 697,"src": 1106,"name": "inf"},{"import": 697,"src": 287,"name": "Log2Int","kind": "const","type": 390,"value": 545},{"import": 697,"src": 295,"name": "log2_int","kind": "const","type": 410,"value": 554},{"import": 697,"src": 1107,"name": "add"},{"import": 697,"src": 1108,"name": "atanh"},{"import": 697,"src": 1109,"name": "lossyCast"},{"import": 697,"src": 1110,"name": "modf"},{"import": 697,"src": 1111,"name": "mod"},{"import": 697,"src": 1112,"name": "f32_max"},{"import": 697,"src": 1113,"name": "two_pi"},{"import": 697,"src": 1114,"name": "sqrt1_2"},{"import": 697,"src": 1115,"name": "tan"},{"import": 697,"src": 1116,"name": "ilogb"},{"import": 697,"src": 1117,"name": "cos"},{"import": 697,"src": 1118,"name": "f64_epsilon"},{"import": 697,"src": 1119,"name": "inf_u64"},{"import": 697,"src": 1120,"name": "asin"},{"import": 697,"src": 54,"name": "isPowerOfTwo","kind": "const","type": 400,"value": 549},{"import": 697,"src": 1121,"name": "nan_u16"},{"import": 697,"src": 1122,"name": "inf_f32"},{"import": 697,"src": 1123,"name": "f32_true_min"},{"import": 697,"src": 1124,"name": "fabs"},{"import": 697,"src": 1125,"name": "complex"},{"import": 697,"src": 1126,"name": "atan"},{"import": 697,"src": 1127,"name": "raiseDivByZero"},{"import": 697,"src": 1128,"name": "snan"},{"import": 697,"src": 1129,"name": "f16_true_min"},{"import": 697,"src": 1130,"name": "isNegativeInf"},{"import": 697,"src": 1131,"name": "log10e"},{"import": 697,"src": 1132,"name": "f32_toint"},{"import": 697,"src": 1133,"name": "pow"},{"import": 697,"src": 1134,"name": "pi_4"},{"import": 697,"src": 1135,"name": "log2","kind": "const","type": 365,"value": 535},{"import": 697,"src": 1136,"name": "inf_f64"},{"import": 697,"src": 1137,"name": "log2_int_ceil"},{"import": 697,"src": 1138,"name": "scalbn"},{"import": 697,"src": 1139,"name": "e"},{"import": 697,"src": 1140,"name": "ceilPowerOfTwoPromote"},{"import": 697,"src": 1141,"name": "f16_min"},{"import": 697,"src": 1142,"name": "expm1"},{"import": 697,"src": 1143,"name": "signbit"},{"import": 697,"src": 1144,"name": "shlExact"},{"import": 697,"src": 1145,"name": "nan_f128"},{"import": 697,"src": 1146,"name": "frexp"},{"import": 697,"src": 1147,"name": "f32_min"},{"import": 697,"src": 1148,"name": "frexp64_result"},{"import": 697,"src": 1149,"name": "f16_epsilon"},{"import": 697,"src": 1150,"name": "rem"},{"import": 697,"src": 1151,"name": "ln10"},{"import": 697,"src": 1152,"name": "sub"},{"import": 697,"src": 1153,"name": "floatMantissaBits"},{"import": 697,"src": 50,"name": "max","kind": "const","type": 375,"value": 539},{"import": 697,"src": 1154,"name": "nan_u32"},{"import": 697,"src": 1155,"name": "acos"},{"import": 697,"src": 1156,"name": "f16_max"},{"import": 697,"src": 201,"name": "floorPowerOfTwo","kind": "const","type": 880,"value": 596},{"import": 697,"src": 1157,"name": "exp"},{"import": 697,"src": 1158,"name": "f64_min"},{"import": 697,"src": 1159,"name": "log10"},{"import": 697,"src": 1160,"name": "nan_f16"},{"import": 697,"src": 1161,"name": "f128_toint"},{"import": 697,"src": 1162,"name": "IntFittingRange"},{"import": 697,"src": 1163,"name": "nan_u64"},{"import": 697,"src": 1164,"name": "rotl"},{"import": 697,"src": 1165,"name": "sqrt2"},{"import": 697,"src": 1166,"name": "log"},{"import": 697,"src": 1167,"name": "raiseUnderflow"},{"import": 697,"src": 31,"name": "min","kind": "const","type": 881,"value": 597},{"import": 697,"src": 284,"name": "minInt","kind": "const","type": 386,"value": 542},{"import": 697,"src": 1168,"name": "negate"},{"import": 697,"src": 1169,"name": "alignCast"},{"import": 697,"src": 1170,"name": "f16_toint"},{"import": 697,"src": 1171,"name": "isInf"},{"import": 697,"src": 1172,"name": "modf32_result"},{"import": 697,"src": 1173,"name": "f128_epsilon"},{"import": 697,"src": 56,"name": "mul","kind": "const","type": 882,"value": 598},{"import": 697,"src": 1174,"name": "f128_min"},{"import": 697,"src": 1175,"name": "divExact"},{"import": 697,"src": 1176,"name": "negateCast"},{"import": 697,"src": 1177,"name": "isFinite"},{"import": 697,"src": 1178,"name": "nan_f64"},{"import": 697,"src": 1179,"name": "f128_max"},{"import": 697,"src": 1180,"name": "f32_epsilon"},{"import": 697,"src": 1181,"name": "forceEval"},{"import": 697,"src": 1182,"name": "isNormal"},{"import": 697,"src": 1183,"name": "raiseInvalid"},{"import": 697,"src": 1184,"name": "shl"},{"import": 697,"src": 1185,"name": "ln2"},{"import": 697,"src": 1186,"name": "big"},{"import": 697,"src": 1187,"name": "nan"},{"import": 697,"src": 1188,"name": "f64_max"},{"import": 697,"src": 1189,"name": "inf_f16"},{"import": 697,"src": 1190,"name": "raiseInexact"},{"import": 697,"src": 1191,"name": "inf_u128"},{"import": 697,"src": 1192,"name": "copysign"},{"import": 697,"src": 1193,"name": "fma"},{"import": 697,"src": 1194,"name": "isPositiveInf"},{"import": 697,"src": 1195,"name": "sqrt","kind": "const","type": 883,"value": 599},{"import": 697,"src": 1196,"name": "tanh"},{"import": 697,"src": 1197,"name": "approxEq"},{"import": 697,"src": 1198,"name": "trunc"},{"import": 697,"src": 1199,"name": "floatExponentBits"},{"import": 697,"src": 1200,"name": "one_pi"},{"import": 697,"src": 1201,"name": "exp2"},{"import": 697,"src": 1202,"name": "log1p"},{"import": 697,"src": 1203,"name": "AlignCastError"},{"import": 697,"src": 1204,"name": "pi"},{"import": 697,"src": 1205,"name": "log2e"},{"import": 697,"src": 1206,"name": "powi"},{"import": 697,"src": 1207,"name": "absInt"},{"import": 697,"src": 1208,"name": "divTrunc"},{"import": 697,"src": 1209,"name": "atan2"},{"import": 697,"src": 281,"name": "Min","kind": "const","type": 371,"value": 538},{"import": 697,"src": 1210,"name": "ln"},{"import": 697,"src": 1211,"name": "testAbsFloat"},{"import": 697,"src": 1212,"name": "testDivFloor"},{"import": 697,"src": 1213,"name": "testCeilPowerOfTwo"},{"import": 697,"src": 1214,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 697,"src": 1215,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 697,"src": 1216,"name": "testMod"},{"import": 697,"src": 1217,"name": "TypeId"},{"import": 697,"src": 1218,"name": "testCeilPowerOfTwoPromote"},{"import": 697,"src": 1219,"name": "testRem"},{"import": 697,"src": 1220,"name": "testFloorPowerOfTwo"},{"import": 697,"src": 1221,"name": "testOverflow"},{"import": 697,"src": 1222,"name": "testDivExact"},{"import": 697,"src": 1223,"name": "testing"},{"import": 697,"src": 1224,"name": "std","kind": "const","type": 348,"value": 424},{"import": 697,"src": 1225,"name": "testAbsInt"},{"import": 697,"src": 1226,"name": "testDivTrunc"},{"import": 884,"src": 1227,"name": "Id"},{"import": 884,"src": 1228,"name": "wait"},{"import": 884,"src": 1229,"name": "Data","kind": "const","type": 348,"value": 885},{"import": 884,"src": 1230,"name": "cpuCount"},{"import": 884,"src": 1231,"name": "Handle","kind": "const","type": 348,"value": 886},{"import": 884,"src": 1232,"name": "handle"},{"import": 884,"src": 1233,"name": "getCurrentId"},{"import": 884,"src": 1234,"name": "CpuCountError"},{"import": 884,"src": 1235,"name": "use_pthreads","kind": "const","type": 347,"value": null},{"import": 884,"src": 1236,"name": "spawn"},{"import": 884,"src": 1237,"name": "SpawnError"},{"import": 796,"src": 1238,"name": "EXDEV"},{"import": 796,"src": 1239,"name": "SIGPIPE"},{"import": 796,"src": 1240,"name": "NOTE_ABSOLUTE"},{"import": 796,"src": 1241,"name": "SIGTERM"},{"import": 796,"src": 1242,"name": "ECONNABORTED"},{"import": 796,"src": 1243,"name": "MAP_FILE"},{"import": 796,"src": 1244,"name": "S_IFSOCK"},{"import": 796,"src": 1245,"name": "EV_SYSFLAGS"},{"import": 796,"src": 1246,"name": "R_OK"},{"import": 796,"src": 1247,"name": "PF_INET6"},{"import": 796,"src": 1248,"name": "WEXITSTATUS"},{"import": 796,"src": 1249,"name": "S_IXUSR"},{"import": 796,"src": 1250,"name": "DT_BLK"},{"import": 796,"src": 1251,"name": "NOTE_EXTEND"},{"import": 699,"src": 1252,"name": "poll"},{"import": 699,"src": 1253,"name": "epoll_create1"},{"import": 699,"src": 1254,"name": "execvpeC"},{"import": 796,"src": 1255,"name": "PF_IMPLINK"},{"import": 796,"src": 1256,"name": "NOTE_LEEWAY"},{"import": 796,"src": 1257,"name": "O_DP_GETRAWUNENCRYPTED"},{"import": 796,"src": 1258,"name": "O_EXLOCK"},{"import": 796,"src": 1259,"name": "STDOUT_FILENO","kind": "const","type": 358,"value": null},{"import": 796,"src": 1260,"name": "EADDRNOTAVAIL"},{"import": 796,"src": 1261,"name": "HOST_NAME_MAX"},{"import": 699,"src": 1262,"name": "SeekError","kind": "const","type": 348,"value": 734},{"import": 699,"src": 1263,"name": "res_mkquery"},{"import": 699,"src": 1264,"name": "RecvFromError"},{"import": 796,"src": 1265,"name": "NOTE_OOB"},{"import": 796,"src": 1266,"name": "PROT_NONE"},{"import": 796,"src": 1267,"name": "SIG_BLOCK"},{"import": 887,"src": 1268,"name": "iovec_const","kind": "const","type": 348,"value": 888},{"import": 796,"src": 1269,"name": "sa_family_t"},{"import": 796,"src": 1270,"name": "AF_LOCAL"},{"import": 796,"src": 1271,"name": "AF_IPX"},{"import": 796,"src": 1272,"name": "O_FSYNC"},{"import": 796,"src": 1273,"name": "SIGCHLD"},{"import": 796,"src": 1274,"name": "ESTALE"},{"import": 796,"src": 1275,"name": "STDERR_FILENO","kind": "const","type": 358,"value": null},{"import": 796,"src": 1276,"name": "S_IRWXG"},{"import": 699,"src": 1277,"name": "gethostname"},{"import": 796,"src": 1278,"name": "O_RDWR"},{"import": 796,"src": 1279,"name": "ENOTDIR","kind": "const","type": 358,"value": null},{"import": 796,"src": 1280,"name": "SIGEMT"},{"import": 796,"src": 1281,"name": "EBADRPC"},{"import": 699,"src": 1282,"name": "send"},{"import": 796,"src": 1283,"name": "NOTE_EXITSTATUS"},{"import": 796,"src": 1284,"name": "PF_CHAOS"},{"import": 796,"src": 1285,"name": "mach_timebase_info_data","kind": "const","type": 348,"value": 889},{"import": 796,"src": 1286,"name": "PF_INET"},{"import": 796,"src": 1287,"name": "EBADMSG"},{"import": 796,"src": 1288,"name": "SIGSYS"},{"import": 796,"src": 1289,"name": "AF_IMPLINK"},{"import": 796,"src": 1290,"name": "EEXIST","kind": "const","type": 358,"value": null},{"import": 796,"src": 1291,"name": "CALENDAR_CLOCK"},{"import": 699,"src": 1292,"name": "MProtectError"},{"import": 699,"src": 1293,"name": "sysctl"},{"import": 796,"src": 1294,"name": "sockaddr"},{"import": 796,"src": 1295,"name": "S_IWOTH"},{"import": 699,"src": 1296,"name": "openatC"},{"import": 699,"src": 1297,"name": "KQueueError"},{"import": 796,"src": 1298,"name": "SIGIOT"},{"import": 796,"src": 1299,"name": "EINVAL","kind": "const","type": 358,"value": null},{"import": 796,"src": 1300,"name": "EISCONN"},{"import": 699,"src": 1301,"name": "lseek_CUR"},{"import": 796,"src": 1302,"name": "S_ISDIR"},{"import": 699,"src": 1303,"name": "inotify_add_watch"},{"import": 796,"src": 1304,"name": "EDQUOT","kind": "const","type": 358,"value": null},{"import": 796,"src": 1305,"name": "EMSGSIZE"},{"import": 796,"src": 1306,"name": "AF_SIP"},{"import": 796,"src": 1307,"name": "ENEEDAUTH"},{"import": 699,"src": 1308,"name": "dl_iterate_phdr"},{"import": 796,"src": 1309,"name": "PATH_MAX","kind": "const","type": 358,"value": null},{"import": 796,"src": 1310,"name": "PF_SIP"},{"import": 796,"src": 1311,"name": "SIGURG"},{"import": 796,"src": 1312,"name": "EOVERFLOW","kind": "const","type": 358,"value": null},{"import": 796,"src": 1313,"name": "O_ACCMODE"},{"import": 699,"src": 1314,"name": "DeleteDirError"},{"import": 796,"src": 1315,"name": "EV_UDATA_SPECIFIC"},{"import": 796,"src": 1316,"name": "SA_NOCLDWAIT"},{"import": 699,"src": 1317,"name": "futimens"},{"import": 796,"src": 1318,"name": "SIGABRT"},{"import": 796,"src": 1319,"name": "S_ISSOCK"},{"import": 796,"src": 1320,"name": "PF_LINK"},{"import": 796,"src": 1321,"name": "AF_CHAOS"},{"import": 796,"src": 1322,"name": "EV_ERROR"},{"import": 699,"src": 1323,"name": "UnexpectedError","kind": "const","type": 348,"value": 550},{"import": 796,"src": 1324,"name": "AF_HYLINK"},{"import": 796,"src": 1325,"name": "ENOSYS","kind": "const","type": 358,"value": null},{"import": 796,"src": 1326,"name": "SA_NOCLDSTOP"},{"import": 796,"src": 1327,"name": "natural_t"},{"import": 796,"src": 1328,"name": "ESHLIBVERS"},{"import": 796,"src": 1329,"name": "SS_DISABLE"},{"import": 796,"src": 1330,"name": "NOTE_SECONDS"},{"import": 796,"src": 1331,"name": "PF_HYLINK"},{"import": 699,"src": 1332,"name": "symlink"},{"import": 796,"src": 1333,"name": "EACCES","kind": "const","type": 358,"value": null},{"import": 796,"src": 1334,"name": "S_IWUSR"},{"import": 699,"src": 1335,"name": "BindError"},{"import": 796,"src": 1336,"name": "AF_PUP"},{"import": 796,"src": 1337,"name": "WSTOPSIG"},{"import": 796,"src": 1338,"name": "EV_DISABLE"},{"import": 796,"src": 1339,"name": "O_EVTONLY"},{"import": 796,"src": 1340,"name": "MAP_HASSEMAPHORE"},{"import": 796,"src": 1341,"name": "AF_ISDN"},{"import": 699,"src": 1342,"name": "MakeDirError"},{"import": 796,"src": 1343,"name": "SIGINFO"},{"import": 796,"src": 1344,"name": "AT_EACCESS"},{"import": 699,"src": 1345,"name": "kevent"},{"import": 796,"src": 1346,"name": "SIGTTIN"},{"import": 796,"src": 1347,"name": "EIDRM"},{"import": 796,"src": 1348,"name": "NOTE_EXIT_DETAIL"},{"import": 699,"src": 1349,"name": "UnlinkError"},{"import": 796,"src": 1350,"name": "S_ISBLK"},{"import": 796,"src": 1351,"name": "NOTE_FUNLOCK"},{"import": 699,"src": 1352,"name": "setreuid"},{"import": 796,"src": 1353,"name": "NOTE_RENAME"},{"import": 699,"src": 1354,"name": "sched_getaffinity"},{"import": 796,"src": 1355,"name": "ENOTSOCK"},{"import": 796,"src": 1356,"name": "PF_KEY"},{"import": 796,"src": 1357,"name": "EVFILT_PROC"},{"import": 796,"src": 1358,"name": "SOCK_SEQPACKET"},{"import": 796,"src": 1359,"name": "NOTE_DELETE"},{"import": 699,"src": 1360,"name": "EpollCtlError"},{"import": 796,"src": 1361,"name": "O_SYNC"},{"import": 699,"src": 1362,"name": "SysCtlError"},{"import": 796,"src": 1363,"name": "sockaddr_in6"},{"import": 796,"src": 1364,"name": "AF_INET"},{"import": 796,"src": 1365,"name": "NOTE_EXIT_DETAIL_MASK"},{"import": 796,"src": 1366,"name": "EVFILT_WRITE"},{"import": 699,"src": 1367,"name": "netbsd"},{"import": 796,"src": 1368,"name": "EV_POLL"},{"import": 699,"src": 1369,"name": "dn_expand"},{"import": 796,"src": 1370,"name": "SYSPROTO_CONTROL"},{"import": 796,"src": 1371,"name": "EPROCLIM"},{"import": 796,"src": 1372,"name": "DT_WHT"},{"import": 796,"src": 1373,"name": "AF_NETBIOS"},{"import": 796,"src": 1374,"name": "SIGQUIT"},{"import": 699,"src": 1375,"name": "sendto"},{"import": 796,"src": 1376,"name": "X_OK"},{"import": 796,"src": 1377,"name": "EHOSTDOWN"},{"import": 796,"src": 1378,"name": "ECONNRESET","kind": "const","type": 358,"value": null},{"import": 796,"src": 1379,"name": "IPPROTO_UDP"},{"import": 796,"src": 1380,"name": "fd_t","kind": "const","type": 348,"value": 471},{"import": 796,"src": 1381,"name": "SEEK_END"},{"import": 796,"src": 1382,"name": "EDEADLK"},{"import": 699,"src": 1383,"name": "pipe"},{"import": 796,"src": 1384,"name": "sigset_t"},{"import": 796,"src": 1385,"name": "AF_APPLETALK"},{"import": 796,"src": 1386,"name": "EBADMACHO"},{"import": 796,"src": 1387,"name": "PF_PUP"},{"import": 796,"src": 1388,"name": "EQFULL"},{"import": 699,"src": 1389,"name": "createNullDelimitedEnvMap"},{"import": 796,"src": 1390,"name": "NOTE_FFAND"},{"import": 796,"src": 1391,"name": "EV_ONESHOT"},{"import": 796,"src": 1392,"name": "MINSIGSTKSZ"},{"import": 796,"src": 1393,"name": "AF_MAX"},{"import": 796,"src": 1394,"name": "EVFILT_READ"},{"import": 796,"src": 1395,"name": "S_IFCHR"},{"import": 796,"src": 1396,"name": "AF_PIP"},{"import": 796,"src": 1397,"name": "SIGUSR1"},{"import": 796,"src": 1398,"name": "O_TRUNC"},{"import": 796,"src": 1399,"name": "NOTE_EXIT_DECRYPTFAIL"},{"import": 887,"src": 1400,"name": "iovec","kind": "const","type": 348,"value": 890},{"import": 796,"src": 1401,"name": "SIGPOLL"},{"import": 796,"src": 1402,"name": "empty_sigset"},{"import": 699,"src": 1403,"name": "kqueue"},{"import": 796,"src": 1404,"name": "AT_SYMLINK_NOFOLLOW"},{"import": 699,"src": 1405,"name": "readlinkatC"},{"import": 796,"src": 1406,"name": "MAP_NOCACHE"},{"import": 699,"src": 1407,"name": "environ","kind": "var","type": 602,"value": "undefined"},{"import": 796,"src": 1408,"name": "EAGAIN","kind": "const","type": 358,"value": null},{"import": 796,"src": 1409,"name": "ENOSPC","kind": "const","type": 358,"value": null},{"import": 699,"src": 1410,"name": "KEventError"},{"import": 699,"src": 1411,"name": "FutimensError"},{"import": 796,"src": 1412,"name": "SA_ONSTACK"},{"import": 699,"src": 1413,"name": "SendError"},{"import": 796,"src": 1414,"name": "PF_UNSPEC"},{"import": 796,"src": 1415,"name": "EVFILT_EXCEPT"},{"import": 796,"src": 1416,"name": "addrinfo"},{"import": 699,"src": 224,"name": "sched_yield","kind": "const","type": 278,"value": 381},{"import": 796,"src": 1417,"name": "SA_SIGINFO"},{"import": 796,"src": 1418,"name": "EV_ENABLE"},{"import": 796,"src": 1419,"name": "EV_FLAG1"},{"import": 796,"src": 1420,"name": "EVFILT_SYSCOUNT"},{"import": 796,"src": 1421,"name": "AF_NS"},{"import": 796,"src": 1422,"name": "NOTE_LINK"},{"import": 796,"src": 1423,"name": "SIGALRM"},{"import": 796,"src": 1424,"name": "NOTE_WRITE"},{"import": 699,"src": 1425,"name": "argv","kind": "var","type": 602,"value": "undefined"},{"import": 699,"src": 1426,"name": "exit"},{"import": 699,"src": 1427,"name": "ForkError"},{"import": 796,"src": 1428,"name": "AF_KEY"},{"import": 699,"src": 1429,"name": "ReadLinkError"},{"import": 796,"src": 1430,"name": "S_IXOTH"},{"import": 699,"src": 1431,"name": "pipe2"},{"import": 796,"src": 1432,"name": "S_IWGRP"},{"import": 796,"src": 1433,"name": "KEVENT_FLAG_NONE"},{"import": 699,"src": 1434,"name": "getrandom"},{"import": 796,"src": 1435,"name": "SIGINT"},{"import": 699,"src": 1436,"name": "system","kind": "const","type": 348,"value": 710},{"import": 796,"src": 1437,"name": "SOCK_STREAM"},{"import": 796,"src": 1438,"name": "EWOULDBLOCK"},{"import": 699,"src": 1439,"name": "darwin","kind": "const","type": 348,"value": 891},{"import": 796,"src": 1440,"name": "SA_USERTRAMP"},{"import": 796,"src": 1441,"name": "Kevent","kind": "const","type": 348,"value": 670},{"import": 796,"src": 1442,"name": "PROT_EXEC"},{"import": 796,"src": 1443,"name": "EMFILE","kind": "const","type": 358,"value": null},{"import": 796,"src": 1444,"name": "AF_CNT"},{"import": 699,"src": 57,"name": "mmap","kind": "const","type": 59,"value": 81},{"import": 796,"src": 1445,"name": "EBADEXEC"},{"import": 699,"src": 1446,"name": "MMapError","kind": "const","type": 348,"value": 742},{"import": 796,"src": 1447,"name": "PF_ECMA"},{"import": 699,"src": 1448,"name": "GetHostNameError"},{"import": 796,"src": 1449,"name": "EDESTADDRREQ","kind": "const","type": 358,"value": null},{"import": 699,"src": 1450,"name": "GetRandomError"},{"import": 699,"src": 1451,"name": "readv"},{"import": 796,"src": 1452,"name": "pid_t"},{"import": 796,"src": 1453,"name": "IPPROTO_TCP"},{"import": 796,"src": 1454,"name": "S_IFMT"},{"import": 796,"src": 1455,"name": "NOTE_SIGNAL"},{"import": 699,"src": 1456,"name": "getcwd"},{"import": 699,"src": 1457,"name": "setuid"},{"import": 699,"src": 1458,"name": "chdirC"},{"import": 796,"src": 1459,"name": "S_ISCHR"},{"import": 796,"src": 1460,"name": "SOCK_RAW"},{"import": 699,"src": 1461,"name": "sigaltstack"},{"import": 796,"src": 1462,"name": "ENOENT","kind": "const","type": 358,"value": null},{"import": 699,"src": 1463,"name": "rmdir"},{"import": 796,"src": 1464,"name": "SIGTSTP"},{"import": 796,"src": 1465,"name": "PF_DLI"},{"import": 796,"src": 1466,"name": "NOTE_FORK"},{"import": 796,"src": 1467,"name": "O_CLOEXEC","kind": "const","type": 358,"value": null},{"import": 796,"src": 1468,"name": "ESHUTDOWN"},{"import": 699,"src": 1469,"name": "access"},{"import": 796,"src": 1470,"name": "NOTE_EXIT_CSERROR"},{"import": 796,"src": 1471,"name": "EUSERS"},{"import": 796,"src": 1472,"name": "ESPIPE","kind": "const","type": 358,"value": null},{"import": 796,"src": 1473,"name": "EPROTOTYPE"},{"import": 796,"src": 1474,"name": "AF_LINK"},{"import": 699,"src": 33,"name": "abort","kind": "const","type": 38,"value": 44},{"import": 699,"src": 1475,"name": "mkdirC"},{"import": 796,"src": 1476,"name": "NOTE_VM_PRESSURE_SUDDEN_TERMINATE"},{"import": 796,"src": 1477,"name": "S_IFWHT"},{"import": 796,"src": 1478,"name": "EVFILT_AIO"},{"import": 796,"src": 1479,"name": "AT_SYMLINK_FOLLOW"},{"import": 796,"src": 1480,"name": "EBUSY","kind": "const","type": 358,"value": null},{"import": 796,"src": 1481,"name": "WNOHANG"},{"import": 699,"src": 1482,"name": "inotify_add_watchC"},{"import": 699,"src": 1483,"name": "realpath"},{"import": 699,"src": 178,"name": "close","kind": "const","type": 209,"value": 257},{"import": 796,"src": 1484,"name": "MAP_FIXED"},{"import": 796,"src": 1485,"name": "O_NONBLOCK"},{"import": 796,"src": 1486,"name": "S_IFLNK"},{"import": 699,"src": 1487,"name": "waitpid"},{"import": 796,"src": 1488,"name": "ENAMETOOLONG","kind": "const","type": 358,"value": null},{"import": 796,"src": 1489,"name": "WIFSTOPPED"},{"import": 796,"src": 1490,"name": "AF_RTIP"},{"import": 796,"src": 1491,"name": "MAP_ANONYMOUS","kind": "const","type": 358,"value": null},{"import": 796,"src": 1492,"name": "S_ISUID"},{"import": 796,"src": 1493,"name": "EVFILT_TIMER"},{"import": 796,"src": 1494,"name": "MAP_NORESERVE"},{"import": 699,"src": 1495,"name": "lseek_CUR_get"},{"import": 796,"src": 1496,"name": "S_ISGID"},{"import": 796,"src": 1497,"name": "EAFNOSUPPORT"},{"import": 699,"src": 1498,"name": "execvpe"},{"import": 796,"src": 1499,"name": "EV_DISPATCH2"},{"import": 699,"src": 1500,"name": "clock_gettime"},{"import": 699,"src": 1501,"name": "realpathC"},{"import": 699,"src": 1502,"name": "RealPathError"},{"import": 796,"src": 1503,"name": "O_POPUP"},{"import": 796,"src": 1504,"name": "EV_OOBAND"},{"import": 796,"src": 1505,"name": "O_EXCL"},{"import": 796,"src": 1506,"name": "AF_OSI"},{"import": 699,"src": 139,"name": "unexpectedErrno","kind": "const","type": 174,"value": 209},{"import": 796,"src": 1507,"name": "in_port_t"},{"import": 796,"src": 1508,"name": "NOTE_MACHTIME"},{"import": 796,"src": 1509,"name": "kevent64_s","kind": "const","type": 348,"value": 892},{"import": 699,"src": 1510,"name": "EpollCreateError"},{"import": 699,"src": 1511,"name": "rmdirC"},{"import": 796,"src": 1512,"name": "EFBIG","kind": "const","type": 358,"value": null},{"import": 796,"src": 1513,"name": "PF_LAT"},{"import": 699,"src": 1514,"name": "unexpected_error_tracing","kind": "const","type": 347,"value": null},{"import": 796,"src": 1515,"name": "timespec","kind": "const","type": 348,"value": 578},{"import": 796,"src": 1516,"name": "ERPCMISMATCH"},{"import": 796,"src": 1517,"name": "mach_timespec_t"},{"import": 699,"src": 1518,"name": "preadv"},{"import": 796,"src": 1519,"name": "AF_PPP"},{"import": 699,"src": 1520,"name": "pwritev"},{"import": 796,"src": 1521,"name": "ENOMEM","kind": "const","type": 358,"value": null},{"import": 796,"src": 1522,"name": "NOTE_VM_ERROR"},{"import": 796,"src": 1523,"name": "ENODEV","kind": "const","type": 358,"value": null},{"import": 796,"src": 1524,"name": "SIGXCPU"},{"import": 796,"src": 1525,"name": "SIGUSR2"},{"import": 699,"src": 1526,"name": "SocketError"},{"import": 796,"src": 1527,"name": "O_WRONLY"},{"import": 796,"src": 1528,"name": "NOTE_FFCOPY"},{"import": 699,"src": 184,"name": "read","kind": "const","type": 217,"value": 271},{"import": 796,"src": 1529,"name": "O_LARGEFILE","kind": "const","type": 358,"value": null},{"import": 796,"src": 1530,"name": "PF_XTP"},{"import": 796,"src": 1531,"name": "ENOLCK"},{"import": 796,"src": 1532,"name": "EPWROFF"},{"import": 699,"src": 1533,"name": "GetCwdError"},{"import": 796,"src": 1534,"name": "NOTE_VM_PRESSURE"},{"import": 796,"src": 1535,"name": "W_OK"},{"import": 796,"src": 1536,"name": "DT_DIR"},{"import": 796,"src": 1537,"name": "PF_DECnet"},{"import": 699,"src": 1538,"name": "realpathW"},{"import": 796,"src": 1539,"name": "AF_UNIX"},{"import": 699,"src": 1540,"name": "AccessError"},{"import": 796,"src": 1541,"name": "ELOOP","kind": "const","type": 358,"value": null},{"import": 796,"src": 1542,"name": "S_IRWXO"},{"import": 796,"src": 1543,"name": "SIG_SETMASK"},{"import": 796,"src": 1544,"name": "ENOSR"},{"import": 796,"src": 1545,"name": "EV_FLAG0"},{"import": 699,"src": 1546,"name": "OpenError","kind": "const","type": 348,"value": 795},{"import": 796,"src": 1547,"name": "IPPROTO_ICMPV6"},{"import": 796,"src": 1548,"name": "AF_COIP"},{"import": 796,"src": 1549,"name": "WIFSIGNALED"},{"import": 796,"src": 1550,"name": "AF_CCITT"},{"import": 796,"src": 1551,"name": "ENOATTR"},{"import": 796,"src": 1552,"name": "AT_REMOVEDIR"},{"import": 796,"src": 1553,"name": "AF_DATAKIT"},{"import": 699,"src": 1554,"name": "fork"},{"import": 796,"src": 1555,"name": "ECONNREFUSED"},{"import": 796,"src": 1556,"name": "ECANCELED"},{"import": 699,"src": 1557,"name": "lseek_END"},{"import": 796,"src": 1558,"name": "SIGPROF"},{"import": 796,"src": 1559,"name": "AF_LAT"},{"import": 796,"src": 1560,"name": "EVFILT_FS"},{"import": 699,"src": 1561,"name": "PipeError"},{"import": 796,"src": 1562,"name": "PF_ROUTE"},{"import": 796,"src": 1563,"name": "mach_port_name_t"},{"import": 796,"src": 1564,"name": "sockaddr_un"},{"import": 796,"src": 1565,"name": "SOCK_MAXADDRLEN"},{"import": 796,"src": 1566,"name": "SIGBUS"},{"import": 796,"src": 1567,"name": "ECHILD"},{"import": 796,"src": 1568,"name": "EPROTONOSUPPORT"},{"import": 796,"src": 1569,"name": "EPIPE","kind": "const","type": 358,"value": null},{"import": 796,"src": 1570,"name": "MAP_SHARED"},{"import": 796,"src": 1571,"name": "SIGWINCH"},{"import": 699,"src": 1572,"name": "readlink"},{"import": 796,"src": 1573,"name": "ETXTBSY","kind": "const","type": 358,"value": null},{"import": 796,"src": 1574,"name": "EV_ADD"},{"import": 796,"src": 1575,"name": "NOTE_ATTRIB"},{"import": 796,"src": 1576,"name": "KEVENT_FLAG_ERROR_EVENTS"},{"import": 796,"src": 1577,"name": "EVFILT_VNODE"},{"import": 796,"src": 1578,"name": "EV_RECEIPT"},{"import": 796,"src": 1579,"name": "SOCK_DGRAM"},{"import": 796,"src": 1580,"name": "timeval"},{"import": 796,"src": 1581,"name": "EPERM","kind": "const","type": 358,"value": null},{"import": 699,"src": 1582,"name": "symlinkat"},{"import": 796,"src": 1583,"name": "PF_ISO"},{"import": 796,"src": 1584,"name": "PF_PIP"},{"import": 699,"src": 1585,"name": "inotify_rm_watch"},{"import": 796,"src": 1586,"name": "KEVENT_FLAG_IMMEDIATE"},{"import": 796,"src": 1587,"name": "ENODATA"},{"import": 796,"src": 1588,"name": "ENFILE","kind": "const","type": 358,"value": null},{"import": 796,"src": 1589,"name": "DT_FIFO"},{"import": 796,"src": 1590,"name": "EADDRINUSE"},{"import": 796,"src": 1591,"name": "ENOTSUP"},{"import": 796,"src": 1592,"name": "ENOTBLK"},{"import": 699,"src": 1593,"name": "SigaltstackError"},{"import": 796,"src": 1594,"name": "ENXIO","kind": "const","type": 358,"value": null},{"import": 699,"src": 1595,"name": "getsockoptError"},{"import": 796,"src": 1596,"name": "EIO","kind": "const","type": 358,"value": null},{"import": 796,"src": 1597,"name": "NOTE_EXIT"},{"import": 796,"src": 1598,"name": "O_ASYNC"},{"import": 796,"src": 1599,"name": "PF_DATAKIT"},{"import": 699,"src": 1600,"name": "unlinkC"},{"import": 699,"src": 250,"name": "lseek_SET","kind": "const","type": 307,"value": 440},{"import": 699,"src": 1601,"name": "open"},{"import": 796,"src": 1602,"name": "O_DP_GETRAWENCRYPTED"},{"import": 699,"src": 1603,"name": "renameW"},{"import": 796,"src": 1604,"name": "AF_DLI"},{"import": 699,"src": 1605,"name": "epoll_ctl"},{"import": 699,"src": 1606,"name": "UnlinkatError"},{"import": 796,"src": 1607,"name": "SA_RESETHAND"},{"import": 796,"src": 1608,"name": "host_t"},{"import": 796,"src": 1609,"name": "clock_serv_t"},{"import": 796,"src": 1610,"name": "S_IRWXU"},{"import": 699,"src": 1611,"name": "connect"},{"import": 796,"src": 1612,"name": "stack_t"},{"import": 699,"src": 1613,"name": "SchedYieldError","kind": "const","type": 348,"value": 804},{"import": 796,"src": 1614,"name": "PF_APPLETALK"},{"import": 796,"src": 1615,"name": "clock_res_t"},{"import": 796,"src": 1616,"name": "EHOSTUNREACH"},{"import": 796,"src": 1617,"name": "PF_OSI"},{"import": 699,"src": 1618,"name": "RaiseError"},{"import": 796,"src": 1619,"name": "EVFILT_USER"},{"import": 699,"src": 1620,"name": "unlinkatC"},{"import": 796,"src": 1621,"name": "ENOPOLICY"},{"import": 796,"src": 1622,"name": "O_DIRECTORY"},{"import": 796,"src": 1623,"name": "NOTE_EXEC"},{"import": 796,"src": 1624,"name": "PF_CNT"},{"import": 796,"src": 1625,"name": "EINTR","kind": "const","type": 358,"value": null},{"import": 796,"src": 1626,"name": "ENOTEMPTY"},{"import": 699,"src": 1627,"name": "linux"},{"import": 699,"src": 1628,"name": "raise"},{"import": 796,"src": 1629,"name": "S_IFBLK"},{"import": 796,"src": 1630,"name": "O_RDONLY","kind": "const","type": 358,"value": null},{"import": 796,"src": 1631,"name": "EMLINK"},{"import": 796,"src": 1632,"name": "NOTE_NONE"},{"import": 796,"src": 1633,"name": "IPPROTO_IP"},{"import": 796,"src": 1634,"name": "EPROGUNAVAIL"},{"import": 796,"src": 1635,"name": "EV_CLEAR"},{"import": 796,"src": 1636,"name": "NOTE_EXIT_MEMORY"},{"import": 796,"src": 1637,"name": "AF_XTP"},{"import": 699,"src": 208,"name": "openC","kind": "const","type": 249,"value": 317},{"import": 796,"src": 1638,"name": "NOTE_NSECONDS"},{"import": 796,"src": 1639,"name": "EPROTO"},{"import": 796,"src": 1640,"name": "AF_UNSPEC"},{"import": 699,"src": 1641,"name": "ReadError","kind": "const","type": 348,"value": 417},{"import": 796,"src": 1642,"name": "O_PATH"},{"import": 699,"src": 205,"name": "getenv","kind": "const","type": 245,"value": 312},{"import": 796,"src": 1643,"name": "PF_MAX"},{"import": 796,"src": 1644,"name": "EDOM"},{"import": 699,"src": 1645,"name": "setgid"},{"import": 796,"src": 1646,"name": "PF_PPP"},{"import": 699,"src": 1647,"name": "chdir"},{"import": 699,"src": 1648,"name": "symlinkatC"},{"import": 796,"src": 1649,"name": "DT_LNK"},{"import": 699,"src": 1650,"name": "WriteError","kind": "const","type": 348,"value": 368},{"import": 796,"src": 1651,"name": "DT_REG"},{"import": 796,"src": 1652,"name": "AF_ISO"},{"import": 699,"src": 1653,"name": "EventFdError"},{"import": 796,"src": 1654,"name": "AF_SYSTEM"},{"import": 699,"src": 1655,"name": "dup2"},{"import": 796,"src": 1656,"name": "EV_DISPATCH"},{"import": 796,"src": 1657,"name": "WIFEXITED"},{"import": 796,"src": 1658,"name": "SEEK_SET","kind": "const","type": 358,"value": null},{"import": 796,"src": 1659,"name": "ESRCH"},{"import": 796,"src": 1660,"name": "ENOTRECOVERABLE"},{"import": 796,"src": 1661,"name": "NOTE_FFOR"},{"import": 796,"src": 1662,"name": "PF_SYSTEM"},{"import": 796,"src": 1663,"name": "SS_ONSTACK"},{"import": 699,"src": 1664,"name": "kill"},{"import": 796,"src": 1665,"name": "SIGTRAP"},{"import": 796,"src": 1666,"name": "NOTE_TRIGGER"},{"import": 796,"src": 1667,"name": "NOTE_BACKGROUND"},{"import": 796,"src": 1668,"name": "ELAST"},{"import": 796,"src": 1669,"name": "S_IRGRP"},{"import": 796,"src": 1670,"name": "PROT_READ","kind": "const","type": 358,"value": null},{"import": 699,"src": 1671,"name": "setregid"},{"import": 796,"src": 1672,"name": "PROT_WRITE","kind": "const","type": 358,"value": null},{"import": 796,"src": 1673,"name": "EV_VANISHED"},{"import": 796,"src": 1674,"name": "EVFILT_SIGNAL"},{"import": 796,"src": 1675,"name": "S_ISFIFO"},{"import": 699,"src": 1676,"name": "mkdir"},{"import": 796,"src": 1677,"name": "EMULTIHOP"},{"import": 796,"src": 1678,"name": "ENETRESET"},{"import": 699,"src": 1679,"name": "getsockname"},{"import": 796,"src": 1680,"name": "AF_SYS_CONTROL"},{"import": 796,"src": 1681,"name": "O_DSYNC"},{"import": 796,"src": 1682,"name": "EBADF","kind": "const","type": 358,"value": null},{"import": 796,"src": 1683,"name": "ENOEXEC"},{"import": 796,"src": 1684,"name": "ENOLINK"},{"import": 699,"src": 1685,"name": "accessW"},{"import": 796,"src": 1686,"name": "NOTE_REVOKE"},{"import": 796,"src": 1687,"name": "SOCK_RDM"},{"import": 796,"src": 1688,"name": "SEEK_CUR"},{"import": 796,"src": 1689,"name": "SIGIO"},{"import": 796,"src": 1690,"name": "EILSEQ"},{"import": 699,"src": 1691,"name": "SchedGetAffinityError"},{"import": 699,"src": 1692,"name": "PollError"},{"import": 796,"src": 1693,"name": "DT_SOCK"},{"import": 699,"src": 1694,"name": "INotifyAddWatchError"},{"import": 699,"src": 1695,"name": "ExecveError"},{"import": 699,"src": 1696,"name": "unlinkat"},{"import": 796,"src": 1697,"name": "NOTE_LOWAT"},{"import": 796,"src": 1698,"name": "EDEVERR"},{"import": 699,"src": 32,"name": "munmap","kind": "const","type": 37,"value": 43},{"import": 796,"src": 1699,"name": "DT_UNKNOWN"},{"import": 796,"src": 1700,"name": "SA_RESTART"},{"import": 796,"src": 1701,"name": "PF_COIP"},{"import": 796,"src": 1702,"name": "WTERMSIG"},{"import": 796,"src": 1703,"name": "NOTE_PDATAMASK"},{"import": 699,"src": 1704,"name": "readlinkC"},{"import": 796,"src": 1705,"name": "EPFNOSUPPORT"},{"import": 796,"src": 1706,"name": "S_IXGRP"},{"import": 699,"src": 1707,"name": "inotify_init1"},{"import": 796,"src": 1708,"name": "PF_SNA"},{"import": 796,"src": 1709,"name": "EPROGMISMATCH"},{"import": 796,"src": 1710,"name": "SYSPROTO_EVENT"},{"import": 796,"src": 1711,"name": "mach_port_t"},{"import": 796,"src": 1712,"name": "PF_LOCAL"},{"import": 796,"src": 1713,"name": "ENETDOWN"},{"import": 796,"src": 1714,"name": "PF_NETBIOS"},{"import": 796,"src": 1715,"name": "S_IROTH"},{"import": 699,"src": 1716,"name": "unlink"},{"import": 796,"src": 1717,"name": "PF_NATM"},{"import": 699,"src": 265,"name": "getenvC","kind": "const","type": 321,"value": 464},{"import": 796,"src": 1718,"name": "S_IFDIR"},{"import": 796,"src": 1719,"name": "EPROCUNAVAIL"},{"import": 796,"src": 1720,"name": "PF_NS"},{"import": 796,"src": 1721,"name": "NOTE_FFNOP"},{"import": 699,"src": 1722,"name": "mprotect"},{"import": 699,"src": 1723,"name": "socket"},{"import": 699,"src": 1724,"name": "freebsd"},{"import": 796,"src": 1725,"name": "EREMOTE"},{"import": 699,"src": 1726,"name": "accessC"},{"import": 796,"src": 1727,"name": "IPPROTO_IPV6"},{"import": 796,"src": 1728,"name": "STDIN_FILENO"},{"import": 699,"src": 1729,"name": "SymLinkError"},{"import": 796,"src": 1730,"name": "S_IRUSR"},{"import": 796,"src": 1731,"name": "S_IWHT"},{"import": 796,"src": 1732,"name": "SIGCONT"},{"import": 796,"src": 1733,"name": "O_CREAT"},{"import": 699,"src": 1734,"name": "sysctlbynameC"},{"import": 796,"src": 1735,"name": "S_ISLNK"},{"import": 796,"src": 1736,"name": "S_IFIFO"},{"import": 796,"src": 1737,"name": "AF_INET6"},{"import": 699,"src": 1738,"name": "uefi"},{"import": 699,"src": 1739,"name": "listen"},{"import": 796,"src": 1740,"name": "ENETUNREACH"},{"import": 796,"src": 1741,"name": "SA_NODEFER"},{"import": 796,"src": 1742,"name": "NOTE_PCTRLMASK"},{"import": 796,"src": 1743,"name": "Sigaction"},{"import": 699,"src": 232,"name": "nanosleep","kind": "const","type": 286,"value": 400},{"import": 796,"src": 1744,"name": "Stat","kind": "const","type": 348,"value": 579},{"import": 796,"src": 1745,"name": "EV_EOF"},{"import": 796,"src": 1746,"name": "dirent"},{"import": 796,"src": 1747,"name": "EVFILT_MACHPORT"},{"import": 796,"src": 1748,"name": "ENOPROTOOPT"},{"import": 796,"src": 1749,"name": "NOTE_CRITICAL"},{"import": 796,"src": 1750,"name": "F_OK"},{"import": 699,"src": 1751,"name": "execveC"},{"import": 796,"src": 1752,"name": "ENOMSG"},{"import": 796,"src": 1753,"name": "PF_IPX"},{"import": 699,"src": 1754,"name": "gettimeofday"},{"import": 699,"src": 1755,"name": "ClockGetTimeError"},{"import": 699,"src": 209,"name": "fstat","kind": "const","type": 250,"value": 318},{"import": 796,"src": 1756,"name": "MAP_FAILED","kind": "const","type": 893,"value": null},{"import": 796,"src": 1757,"name": "AF_ECMA"},{"import": 699,"src": 1758,"name": "openat"},{"import": 699,"src": 207,"name": "isatty","kind": "const","type": 247,"value": 314},{"import": 699,"src": 1759,"name": "windows","kind": "const","type": 348,"value": 894},{"import": 699,"src": 1760,"name": "GetSockNameError"},{"import": 796,"src": 1761,"name": "NOTE_VM_PRESSURE_TERMINATE"},{"import": 796,"src": 1762,"name": "EAUTH"},{"import": 796,"src": 1763,"name": "AF_SNA"},{"import": 699,"src": 1764,"name": "DnExpandError"},{"import": 796,"src": 1765,"name": "ENOBUFS","kind": "const","type": 358,"value": null},{"import": 796,"src": 1766,"name": "SIGSEGV"},{"import": 699,"src": 1767,"name": "wasi"},{"import": 699,"src": 1768,"name": "sigaction"},{"import": 796,"src": 1769,"name": "socklen_t"},{"import": 796,"src": 1770,"name": "SIGVTALRM"},{"import": 699,"src": 1771,"name": "KillError"},{"import": 699,"src": 1772,"name": "writev"},{"import": 796,"src": 1773,"name": "NOTE_FFCTRLMASK"},{"import": 796,"src": 1774,"name": "timezone"},{"import": 796,"src": 1775,"name": "SIGSTKSZ"},{"import": 699,"src": 1776,"name": "AcceptError"},{"import": 699,"src": 1777,"name": "bind"},{"import": 796,"src": 1778,"name": "SA_64REGSET"},{"import": 796,"src": 1779,"name": "SIGHUP"},{"import": 699,"src": 1780,"name": "symlinkC"},{"import": 796,"src": 1781,"name": "ERANGE"},{"import": 796,"src": 1782,"name": "PF_CCITT"},{"import": 796,"src": 1783,"name": "ETIME"},{"import": 796,"src": 1784,"name": "SIGSTOP"},{"import": 699,"src": 1785,"name": "recvfrom"},{"import": 796,"src": 1786,"name": "EINPROGRESS"},{"import": 699,"src": 1787,"name": "FStatError","kind": "const","type": 348,"value": 736},{"import": 796,"src": 1788,"name": "SIGFPE"},{"import": 796,"src": 1789,"name": "SIGTTOU"},{"import": 796,"src": 1790,"name": "O_NOCTTY"},{"import": 699,"src": 1791,"name": "eventfd"},{"import": 796,"src": 1792,"name": "AF_NATM"},{"import": 796,"src": 1793,"name": "AT_FDCWD"},{"import": 699,"src": 1794,"name": "SetIdError"},{"import": 699,"src": 1795,"name": "ChangeCurDirError"},{"import": 796,"src": 1796,"name": "PF_ISDN"},{"import": 699,"src": 1797,"name": "epoll_wait"},{"import": 796,"src": 1798,"name": "PF_RTIP"},{"import": 796,"src": 1799,"name": "AF_E164"},{"import": 699,"src": 192,"name": "write","kind": "const","type": 235,"value": 295},{"import": 796,"src": 1800,"name": "EROFS"},{"import": 796,"src": 1801,"name": "off_t","kind": "const","type": 348,"value": 599},{"import": 796,"src": 1802,"name": "O_APPEND"},{"import": 796,"src": 1803,"name": "NOTE_USECONDS"},{"import": 796,"src": 1804,"name": "ENOSTR"},{"import": 796,"src": 1805,"name": "S_IFREG"},{"import": 796,"src": 1806,"name": "ENOTTY"},{"import": 796,"src": 1807,"name": "EV_DELETE"},{"import": 796,"src": 1808,"name": "O_NOFOLLOW"},{"import": 699,"src": 1809,"name": "freeNullDelimitedEnvMap"},{"import": 699,"src": 1810,"name": "zen"},{"import": 699,"src": 1811,"name": "INotifyInitError"},{"import": 796,"src": 1812,"name": "MAP_PRIVATE","kind": "const","type": 358,"value": null},{"import": 796,"src": 1813,"name": "sockaddr_in"},{"import": 796,"src": 1814,"name": "ESOCKTNOSUPPORT"},{"import": 796,"src": 1815,"name": "O_SHLOCK"},{"import": 796,"src": 1816,"name": "EOWNERDEAD"},{"import": 796,"src": 1817,"name": "S_ISVTX"},{"import": 796,"src": 1818,"name": "EFAULT","kind": "const","type": 358,"value": null},{"import": 796,"src": 1819,"name": "O_ALERT"},{"import": 796,"src": 1820,"name": "E2BIG"},{"import": 796,"src": 1821,"name": "AF_ROUTE"},{"import": 796,"src": 1822,"name": "EFTYPE"},{"import": 796,"src": 1823,"name": "IPPROTO_ICMP"},{"import": 699,"src": 1824,"name": "accept4"},{"import": 796,"src": 1825,"name": "kern_return_t"},{"import": 699,"src": 1826,"name": "errno","kind": "const","type": 895,"value": 600},{"import": 796,"src": 1827,"name": "PF_UNIX"},{"import": 699,"src": 1828,"name": "renameC"},{"import": 796,"src": 1829,"name": "SIGILL"},{"import": 796,"src": 1830,"name": "SIGXFSZ"},{"import": 796,"src": 1831,"name": "SIGKILL"},{"import": 796,"src": 1832,"name": "O_SYMLINK"},{"import": 796,"src": 1833,"name": "EALREADY"},{"import": 699,"src": 1834,"name": "ConnectError"},{"import": 796,"src": 1835,"name": "ETOOMANYREFS"},{"import": 796,"src": 1836,"name": "NOTE_MACH_CONTINUOUS_TIME"},{"import": 796,"src": 1837,"name": "DT_CHR"},{"import": 796,"src": 1838,"name": "WUNTRACED"},{"import": 699,"src": 1839,"name": "rename"},{"import": 699,"src": 1840,"name": "isCygwinPty"},{"import": 796,"src": 1841,"name": "ENOTCONN"},{"import": 699,"src": 1842,"name": "clock_getres"},{"import": 796,"src": 1843,"name": "S_ISREG"},{"import": 796,"src": 1844,"name": "ETIMEDOUT"},{"import": 796,"src": 1845,"name": "AF_DECnet"},{"import": 796,"src": 1846,"name": "NOTE_FFLAGSMASK"},{"import": 699,"src": 1847,"name": "dragonfly"},{"import": 796,"src": 1848,"name": "EBADARCH"},{"import": 699,"src": 175,"name": "toPosixPath","kind": "const","type": 206,"value": 254},{"import": 699,"src": 1849,"name": "unlinkatW"},{"import": 796,"src": 1850,"name": "EVFILT_VM"},{"import": 796,"src": 1851,"name": "SIG_UNBLOCK"},{"import": 796,"src": 1852,"name": "EISDIR","kind": "const","type": 358,"value": null},{"import": 699,"src": 1853,"name": "ListenError"},{"import": 699,"src": 1854,"name": "elf"},{"import": 699,"src": 1855,"name": "math","kind": "const","type": 348,"value": 697},{"import": 699,"src": 1856,"name": "std","kind": "const","type": 348,"value": 424},{"import": 699,"src": 1857,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 699,"src": 1858,"name": "getRandomBytesDevURandom"},{"import": 699,"src": 1859,"name": "RenameError"},{"import": 699,"src": 1860,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 699,"src": 1861,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 699,"src": 1862,"name": "MAX_PATH_BYTES"},{"import": 699,"src": 1863,"name": "dl"},{"import": 700,"src": 1864,"name": "LineInfo","kind": "const","type": 348,"value": 539},{"import": 700,"src": 1865,"name": "attachSegfaultHandler"},{"import": 700,"src": 1866,"name": "captureStackTrace"},{"import": 700,"src": 1867,"name": "writeCurrentStackTraceWindows"},{"import": 700,"src": 39,"name": "dumpCurrentStackTrace","kind": "const","type": 44,"value": 50},{"import": 700,"src": 34,"name": "getStderrStream","kind": "const","type": 39,"value": 45},{"import": 700,"src": 1868,"name": "have_segfault_handling_support","kind": "const","type": 347,"value": null},{"import": 700,"src": 126,"name": "writeCurrentStackTrace","kind": "const","type": 896,"value": 601},{"import": 700,"src": 38,"name": "dumpStackTrace","kind": "const","type": 43,"value": 49},{"import": 700,"src": 1869,"name": "DebugInfo","kind": "const","type": 348,"value": 514},{"import": 700,"src": 1870,"name": "enable_segfault_handler","kind": "const","type": 347,"value": null},{"import": 700,"src": 74,"name": "writeStackTrace","kind": "const","type": 897,"value": 602},{"import": 700,"src": 1871,"name": "leb","kind": "const","type": 348,"value": 898},{"import": 700,"src": 1872,"name": "DwarfInfo"},{"import": 700,"src": 64,"name": "getSelfDebugInfo","kind": "const","type": 65,"value": 88},{"import": 700,"src": 49,"name": "panic","kind": "const","type": 899,"value": 603},{"import": 700,"src": 1873,"name": "DwarfInStream"},{"import": 700,"src": 7,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 700,"src": 1874,"name": "DwarfSeekableStream"},{"import": 700,"src": 75,"name": "printSourceAtAddress","kind": "const","type": 900,"value": 604},{"import": 700,"src": 1875,"name": "StackIterator","kind": "const","type": 348,"value": 542},{"import": 700,"src": 1876,"name": "OpenSelfDebugInfoError"},{"import": 700,"src": 1877,"name": "FailingAllocator"},{"import": 700,"src": 5,"name": "panicExtra","kind": "const","type": 901,"value": 605},{"import": 700,"src": 253,"name": "maybeEnableSegfaultHandler","kind": "const","type": 311,"value": 444},{"import": 700,"src": 1878,"name": "runtime_safety","kind": "const","type": 347,"value": null},{"import": 700,"src": 1879,"name": "dumpStackTraceFromBase"},{"import": 700,"src": 1880,"name": "dumpStackPointerAddr"},{"import": 700,"src": 1881,"name": "getStderrMutex"},{"import": 700,"src": 1882,"name": "failing_allocator"},{"import": 700,"src": 65,"name": "openSelfDebugInfo","kind": "const","type": 66,"value": 89},{"import": 700,"src": 1883,"name": "printSourceAtAddressPosix"},{"import": 700,"src": 1884,"name": "openDwarfDebugInfo"},{"import": 700,"src": 1885,"name": "printSourceAtAddressDwarf"},{"import": 700,"src": 191,"name": "warn","kind": "const","type": 902,"value": 606},{"import": 700,"src": 1886,"name": "global_allocator"},{"import": 700,"src": 1887,"name": "openElfDebugInfo"},{"import": 700,"src": 1888,"name": "readAllocBytes"},{"import": 700,"src": 1889,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 700,"src": 1890,"name": "populateModule"},{"import": 700,"src": 1891,"name": "WHITE","kind": "const","type": 903,"value": null},{"import": 700,"src": 1892,"name": "getAbbrevTable"},{"import": 700,"src": 1893,"name": "handleSegfaultWindows"},{"import": 700,"src": 101,"name": "readIntMem","kind": "const","type": 904,"value": 607},{"import": 700,"src": 1894,"name": "parseFormValueTargetAddrSize"},{"import": 700,"src": 1895,"name": "DW","kind": "const","type": 348,"value": 701},{"import": 700,"src": 1896,"name": "readStringRaw"},{"import": 700,"src": 1897,"name": "panicking","kind": "var","type": 349,"value": null},{"import": 700,"src": 1898,"name": "os","kind": "const","type": 348,"value": 699},{"import": 700,"src": 1899,"name": "FileEntry","kind": "const","type": 348,"value": 392},{"import": 700,"src": 1900,"name": "readSparseBitVector"},{"import": 700,"src": 1901,"name": "stderr_file_out_stream","kind": "var","type": 457,"value": "undefined"},{"import": 700,"src": 1902,"name": "RESET","kind": "const","type": 788,"value": null},{"import": 700,"src": 1903,"name": "elf"},{"import": 700,"src": 69,"name": "openSelfDebugInfoMacOs","kind": "const","type": 70,"value": 93},{"import": 700,"src": 1904,"name": "Func"},{"import": 700,"src": 103,"name": "readByteSignedMem","kind": "const","type": 115,"value": 140},{"import": 700,"src": 99,"name": "readInitialLengthMem","kind": "const","type": 108,"value": 133},{"import": 700,"src": 1905,"name": "MachoSymbol","kind": "const","type": 348,"value": 479},{"import": 700,"src": 1906,"name": "parseFormValueBlock"},{"import": 700,"src": 1907,"name": "io","kind": "const","type": 348,"value": 703},{"import": 700,"src": 1908,"name": "LineNumberProgram","kind": "const","type": 348,"value": 522},{"import": 700,"src": 1909,"name": "CYAN"},{"import": 700,"src": 1910,"name": "root","kind": "const","type": 348,"value": 835},{"import": 700,"src": 1911,"name": "Constant"},{"import": 700,"src": 1912,"name": "maxInt"},{"import": 700,"src": 1913,"name": "parseAbbrevTable"},{"import": 700,"src": 1914,"name": "coff","kind": "const","type": 348,"value": 707},{"import": 700,"src": 1915,"name": "scanAllCompileUnits"},{"import": 700,"src": 1916,"name": "parseDie"},{"import": 700,"src": 1917,"name": "parseFormValueConstant"},{"import": 700,"src": 1918,"name": "DIM","kind": "const","type": 788,"value": null},{"import": 700,"src": 1919,"name": "GREEN","kind": "const","type": 903,"value": null},{"import": 700,"src": 1920,"name": "getSymbolNameDwarf"},{"import": 700,"src": 1921,"name": "fs","kind": "const","type": 348,"value": 712},{"import": 700,"src": 1922,"name": "setTtyColor"},{"import": 700,"src": 1923,"name": "File","kind": "const","type": 348,"value": 458},{"import": 700,"src": 1924,"name": "parseFormValueBlockLen"},{"import": 700,"src": 121,"name": "printLineFromFileAnyOs","kind": "const","type": 905,"value": 608},{"import": 700,"src": 1925,"name": "openSelfDebugInfoWindows"},{"import": 700,"src": 120,"name": "printLineInfo","kind": "const","type": 906,"value": 609},{"import": 700,"src": 1926,"name": "AbbrevTable"},{"import": 700,"src": 1927,"name": "Die"},{"import": 700,"src": 1928,"name": "process","kind": "const","type": 348,"value": 717},{"import": 700,"src": 1929,"name": "macho","kind": "const","type": 348,"value": 718},{"import": 700,"src": 66,"name": "getDebugInfoAllocator","kind": "const","type": 67,"value": 90},{"import": 700,"src": 1930,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 700,"src": 1931,"name": "windows_segfault_handle"},{"import": 700,"src": 1932,"name": "debug_info_allocator","kind": "var","type": 777,"value": null},{"import": 700,"src": 1933,"name": "CompileUnit"},{"import": 700,"src": 1934,"name": "TtyColor"},{"import": 700,"src": 1935,"name": "parseFormValueRef"},{"import": 700,"src": 1936,"name": "math"},{"import": 700,"src": 1937,"name": "global_fixed_allocator"},{"import": 700,"src": 1938,"name": "stderr_file","kind": "var","type": 458,"value": "undefined"},{"import": 700,"src": 1939,"name": "FormValue"},{"import": 700,"src": 1940,"name": "openSelfDebugInfoPosix"},{"import": 700,"src": 1941,"name": "global_allocator_mem"},{"import": 700,"src": 1942,"name": "findCompileUnit"},{"import": 700,"src": 1943,"name": "readInitialLength"},{"import": 700,"src": 73,"name": "wantTtyColor","kind": "const","type": 77,"value": 101},{"import": 700,"src": 1944,"name": "AbbrevTableEntry"},{"import": 700,"src": 81,"name": "getLineNumberInfoMacOs","kind": "const","type": 86,"value": 111},{"import": 700,"src": 1945,"name": "Module","kind": "const","type": 348,"value": 907},{"import": 700,"src": 1946,"name": "resetSegfaultHandler"},{"import": 700,"src": 1947,"name": "stderr_stream","kind": "var","type": 908,"value": null},{"import": 700,"src": 1948,"name": "stderr_mutex","kind": "var","type": 581,"value": null},{"import": 700,"src": 1949,"name": "scanAllFunctions"},{"import": 700,"src": 1950,"name": "pdb","kind": "const","type": 348,"value": 706},{"import": 700,"src": 1951,"name": "PcRange"},{"import": 700,"src": 111,"name": "readStringMem","kind": "const","type": 124,"value": 149},{"import": 700,"src": 102,"name": "readByteMem","kind": "const","type": 114,"value": 139},{"import": 700,"src": 1952,"name": "findDwarfSectionFromElf"},{"import": 700,"src": 1953,"name": "std","kind": "const","type": 348,"value": 424},{"import": 700,"src": 1954,"name": "parseFormValueDwarfOffsetSize"},{"import": 700,"src": 1955,"name": "printSourceAtAddressWindows"},{"import": 700,"src": 78,"name": "machoSearchSymbols","kind": "const","type": 82,"value": 106},{"import": 700,"src": 1956,"name": "AbbrevAttr"},{"import": 700,"src": 1957,"name": "getString"},{"import": 700,"src": 1958,"name": "handleSegfaultLinux"},{"import": 700,"src": 76,"name": "printSourceAtAddressMacOs","kind": "const","type": 909,"value": 610},{"import": 700,"src": 1959,"name": "AbbrevTableHeader"},{"import": 700,"src": 1960,"name": "getAbbrevTableEntry"},{"import": 700,"src": 1961,"name": "windows"},{"import": 700,"src": 1962,"name": "self_debug_info","kind": "var","type": 910,"value": null},{"import": 700,"src": 1963,"name": "getLineNumberInfoDwarf"},{"import": 700,"src": 1964,"name": "ArrayList","kind": "const","type": 363,"value": 534},{"import": 700,"src": 1965,"name": "parseFormValue"},{"import": 700,"src": 1966,"name": "MachOFile","kind": "const","type": 348,"value": 379},{"import": 700,"src": 1967,"name": "debug_info_arena_allocator","kind": "var","type": 552,"value": "undefined"},{"import": 700,"src": 1968,"name": "RED"},{"import": 701,"src": 1969,"name": "ATE_HP_signed_fixed"},{"import": 701,"src": 1970,"name": "AT_GNU_exclusive_locks_required"},{"import": 701,"src": 1971,"name": "OP_lit1"},{"import": 701,"src": 1972,"name": "CFA_MIPS_advance_loc8"},{"import": 701,"src": 1973,"name": "CFA_expression"},{"import": 701,"src": 1974,"name": "OP_const4s"},{"import": 701,"src": 1975,"name": "OP_GNU_uninit"},{"import": 701,"src": 1976,"name": "OP_push_object_address"},{"import": 701,"src": 1977,"name": "AT_subscr_data"},{"import": 701,"src": 1978,"name": "ATE_HP_float128"},{"import": 701,"src": 1979,"name": "FORM_strp"},{"import": 701,"src": 1980,"name": "OP_GNU_entry_value"},{"import": 701,"src": 1981,"name": "CFA_val_expression"},{"import": 701,"src": 1982,"name": "CHILDREN_no"},{"import": 701,"src": 1983,"name": "OP_breg0"},{"import": 701,"src": 1984,"name": "OP_reg4"},{"import": 701,"src": 1985,"name": "FORM_GNU_ref_alt"},{"import": 701,"src": 1986,"name": "OP_lit4"},{"import": 701,"src": 1987,"name": "LNE_lo_user"},{"import": 701,"src": 1988,"name": "AT_GNU_shared_locks_required"},{"import": 701,"src": 1989,"name": "OP_reg13"},{"import": 701,"src": 1990,"name": "OP_reg30"},{"import": 701,"src": 1991,"name": "OP_lit21"},{"import": 701,"src": 1992,"name": "AT_GNU_ranges_base"},{"import": 701,"src": 1993,"name": "AT_VMS_rtnbeg_pd_address"},{"import": 701,"src": 1994,"name": "AT_data_location"},{"import": 701,"src": 1995,"name": "OP_reg20"},{"import": 701,"src": 1996,"name": "AT_elemental"},{"import": 701,"src": 1997,"name": "AT_small"},{"import": 701,"src": 1998,"name": "AT_HP_proc_per_section"},{"import": 701,"src": 1999,"name": "AT_HP_is_result_param"},{"import": 701,"src": 2000,"name": "LANG_PLI"},{"import": 701,"src": 2001,"name": "OP_reg1"},{"import": 701,"src": 2002,"name": "OP_HP_unmod_range"},{"import": 701,"src": 2003,"name": "OP_lit14"},{"import": 701,"src": 2004,"name": "OP_breg25"},{"import": 701,"src": 2005,"name": "TAG_module"},{"import": 701,"src": 2006,"name": "AT_decimal_scale"},{"import": 701,"src": 2007,"name": "AT_PGI_lstride"},{"import": 701,"src": 2008,"name": "OP_reg16"},{"import": 701,"src": 2009,"name": "OP_abs"},{"import": 701,"src": 2010,"name": "AT_body_begin"},{"import": 701,"src": 2011,"name": "OP_plus"},{"import": 701,"src": 2012,"name": "AT_start_scope"},{"import": 701,"src": 2013,"name": "TAG_HP_array_descriptor"},{"import": 701,"src": 2014,"name": "TAG_GNU_formal_parameter_pack"},{"import": 701,"src": 2015,"name": "AT_priority"},{"import": 701,"src": 2016,"name": "AT_PGI_soffset"},{"import": 701,"src": 2017,"name": "AT_external"},{"import": 701,"src": 2018,"name": "AT_HP_prof_version_id"},{"import": 701,"src": 2019,"name": "OP_deref"},{"import": 701,"src": 2020,"name": "OP_breg15"},{"import": 701,"src": 2021,"name": "TAG_label"},{"import": 701,"src": 2022,"name": "ATE_HP_complex_float128"},{"import": 701,"src": 2023,"name": "AT_import"},{"import": 701,"src": 2024,"name": "ATE_numeric_string"},{"import": 701,"src": 2025,"name": "OP_breg22"},{"import": 701,"src": 2026,"name": "LANG_hi_user"},{"import": 701,"src": 2027,"name": "LANG_Cobol74"},{"import": 701,"src": 2028,"name": "TAG_class_template"},{"import": 701,"src": 2029,"name": "TAG_constant"},{"import": 701,"src": 2030,"name": "OP_over"},{"import": 701,"src": 2031,"name": "CFA_lo_user"},{"import": 701,"src": 2032,"name": "LANG_C_plus_plus"},{"import": 701,"src": 2033,"name": "AT_location"},{"import": 701,"src": 2034,"name": "TAG_variant_part"},{"import": 701,"src": 2035,"name": "TAG_upc_shared_type"},{"import": 701,"src": 2036,"name": "TAG_PGI_interface_block"},{"import": 701,"src": 2037,"name": "AT_signature"},{"import": 701,"src": 2038,"name": "FORM_GNU_strp_alt"},{"import": 701,"src": 2039,"name": "OP_breg18"},{"import": 701,"src": 2040,"name": "TAG_with_stmt"},{"import": 701,"src": 2041,"name": "AT_HP_raw_data_ptr"},{"import": 701,"src": 2042,"name": "LANG_C11"},{"import": 701,"src": 2043,"name": "TAG_namespace"},{"import": 701,"src": 2044,"name": "LANG_lo_user"},{"import": 701,"src": 2045,"name": "LANG_UPC"},{"import": 701,"src": 2046,"name": "FORM_block2"},{"import": 701,"src": 2047,"name": "AT_GNAT_descriptive_type"},{"import": 701,"src": 2048,"name": "OP_call4"},{"import": 701,"src": 2049,"name": "ATE_HP_complex_float80"},{"import": 701,"src": 2050,"name": "TAG_try_block"},{"import": 701,"src": 2051,"name": "LNE_define_file","kind": "const","type": 358,"value": null},{"import": 701,"src": 2052,"name": "AT_stmt_list"},{"import": 701,"src": 2053,"name": "CFA_def_cfa"},{"import": 701,"src": 2054,"name": "ATE_unsigned_char"},{"import": 701,"src": 2055,"name": "AT_frame_base"},{"import": 701,"src": 2056,"name": "AT_vtable_elem_location"},{"import": 701,"src": 2057,"name": "AT_common_reference"},{"import": 701,"src": 2058,"name": "AT_abstract_origin"},{"import": 701,"src": 2059,"name": "AT_HP_opt_level"},{"import": 701,"src": 2060,"name": "ATE_HP_unsigned_fixed"},{"import": 701,"src": 2061,"name": "TAG_set_type"},{"import": 701,"src": 2062,"name": "AT_mac_info"},{"import": 701,"src": 2063,"name": "AT_lo_user"},{"import": 701,"src": 2064,"name": "OP_const2u"},{"import": 701,"src": 2065,"name": "LANG_Fortran90"},{"import": 701,"src": 2066,"name": "CFA_restore"},{"import": 701,"src": 2067,"name": "TAG_padding"},{"import": 701,"src": 2068,"name": "AT_GNU_dwo_name"},{"import": 701,"src": 2069,"name": "FORM_ref8"},{"import": 701,"src": 2070,"name": "AT_virtuality"},{"import": 701,"src": 2071,"name": "FORM_GNU_str_index"},{"import": 701,"src": 2072,"name": "TAG_GNU_template_template_param"},{"import": 701,"src": 2073,"name": "TAG_packed_type"},{"import": 701,"src": 2074,"name": "OP_pick"},{"import": 701,"src": 2075,"name": "LNE_hi_user"},{"import": 701,"src": 2076,"name": "CFA_advance_loc2"},{"import": 701,"src": 2077,"name": "AT_HP_default_location"},{"import": 701,"src": 2078,"name": "OP_minus"},{"import": 701,"src": 2079,"name": "AT_MIPS_linkage_name"},{"import": 701,"src": 2080,"name": "TAG_base_type"},{"import": 701,"src": 2081,"name": "LNS_fixed_advance_pc","kind": "const","type": 358,"value": null},{"import": 701,"src": 2082,"name": "TAG_GNU_template_parameter_pack"},{"import": 701,"src": 2083,"name": "TAG_lo_user"},{"import": 701,"src": 2084,"name": "OP_reg28"},{"import": 701,"src": 2085,"name": "AT_GNU_template_name"},{"import": 701,"src": 2086,"name": "AT_HP_unit_name"},{"import": 701,"src": 2087,"name": "LANG_C99"},{"import": 701,"src": 2088,"name": "OP_breg5"},{"import": 701,"src": 2089,"name": "TAG_variable"},{"import": 701,"src": 2090,"name": "OP_reg9"},{"import": 701,"src": 2091,"name": "OP_mul"},{"import": 701,"src": 2092,"name": "OP_lit7"},{"import": 701,"src": 2093,"name": "AT_GNU_all_call_sites"},{"import": 701,"src": 2094,"name": "TAG_GNU_call_site_parameter"},{"import": 701,"src": 2095,"name": "OP_lit24"},{"import": 701,"src": 2096,"name": "CFA_val_offset"},{"import": 701,"src": 2097,"name": "TAG_subrange_type"},{"import": 701,"src": 2098,"name": "AT_GNU_tail_call"},{"import": 701,"src": 2099,"name": "LNE_end_sequence","kind": "const","type": 358,"value": null},{"import": 701,"src": 2100,"name": "LANG_Fortran08"},{"import": 701,"src": 2101,"name": "ATE_HP_zoned_decimal"},{"import": 701,"src": 2102,"name": "OP_reg25"},{"import": 701,"src": 2103,"name": "OP_shr"},{"import": 701,"src": 2104,"name": "TAG_restrict_type"},{"import": 701,"src": 2105,"name": "AT_variable_parameter"},{"import": 701,"src": 2106,"name": "ATE_decimal_float"},{"import": 701,"src": 2107,"name": "OP_breg2"},{"import": 701,"src": 2108,"name": "LANG_Go"},{"import": 701,"src": 2109,"name": "LANG_HP_Pascal91"},{"import": 701,"src": 2110,"name": "OP_neg"},{"import": 701,"src": 2111,"name": "OP_reg6"},{"import": 701,"src": 2112,"name": "CFA_hi_user"},{"import": 701,"src": 2113,"name": "OP_not"},{"import": 701,"src": 2114,"name": "OP_lit11"},{"import": 701,"src": 2115,"name": "LNS_copy","kind": "const","type": 358,"value": null},{"import": 701,"src": 2116,"name": "OP_reg15"},{"import": 701,"src": 2117,"name": "FORM_flag"},{"import": 701,"src": 2118,"name": "OP_lit23"},{"import": 701,"src": 2119,"name": "OP_GNU_push_tls_address"},{"import": 701,"src": 2120,"name": "LANG_Rust"},{"import": 701,"src": 2121,"name": "TAG_subroutine"},{"import": 701,"src": 2122,"name": "LNE_set_address","kind": "const","type": 358,"value": null},{"import": 701,"src": 2123,"name": "OP_reg22"},{"import": 701,"src": 2124,"name": "OP_GNU_deref_type"},{"import": 701,"src": 2125,"name": "OP_lit31"},{"import": 701,"src": 2126,"name": "LNS_advance_line","kind": "const","type": 358,"value": null},{"import": 701,"src": 2127,"name": "ATE_complex_float"},{"import": 701,"src": 2128,"name": "OP_breg10"},{"import": 701,"src": 2129,"name": "OP_breg31"},{"import": 701,"src": 2130,"name": "ATE_HP_float80"},{"import": 701,"src": 2131,"name": "OP_reg3"},{"import": 701,"src": 2132,"name": "OP_lit16"},{"import": 701,"src": 2133,"name": "AT_MIPS_has_inlines"},{"import": 701,"src": 2134,"name": "OP_breg27"},{"import": 701,"src": 2135,"name": "ATE_lo_user"},{"import": 701,"src": 2136,"name": "FORM_flag_present"},{"import": 701,"src": 2137,"name": "OP_bit_piece"},{"import": 701,"src": 2138,"name": "AT_GNU_addr_base"},{"import": 701,"src": 2139,"name": "AT_MIPS_software_pipeline_depth"},{"import": 701,"src": 2140,"name": "FORM_ref_sig8"},{"import": 701,"src": 2141,"name": "ATE_signed_fixed"},{"import": 701,"src": 2142,"name": "OP_lo_user"},{"import": 701,"src": 2143,"name": "LANG_HP_Basic91"},{"import": 701,"src": 2144,"name": "TAG_inheritance"},{"import": 701,"src": 2145,"name": "FORM_data8"},{"import": 701,"src": 2146,"name": "OP_breg17"},{"import": 701,"src": 2147,"name": "AT_GNU_pubtypes"},{"import": 701,"src": 2148,"name": "LNS_set_file","kind": "const","type": 358,"value": null},{"import": 701,"src": 2149,"name": "AT_MIPS_clone_origin"},{"import": 701,"src": 2150,"name": "CFA_def_cfa_expression"},{"import": 701,"src": 2151,"name": "OP_shl"},{"import": 701,"src": 2152,"name": "LANG_Python"},{"import": 701,"src": 2153,"name": "TAG_union_type"},{"import": 701,"src": 2154,"name": "AT_alignment"},{"import": 701,"src": 2155,"name": "AT_specification"},{"import": 701,"src": 2156,"name": "AT_visibility"},{"import": 701,"src": 2157,"name": "AT_enum_class"},{"import": 701,"src": 2158,"name": "OP_PGI_omp_thread_num"},{"import": 701,"src": 2159,"name": "LNS_negate_stmt","kind": "const","type": 358,"value": null},{"import": 701,"src": 2160,"name": "OP_GNU_encoded_addr"},{"import": 701,"src": 2161,"name": "ATE_float"},{"import": 701,"src": 2162,"name": "LANG_Fortran95"},{"import": 701,"src": 2163,"name": "AT_GNU_all_tail_call_sites"},{"import": 701,"src": 2164,"name": "CFA_offset_extended"},{"import": 701,"src": 2165,"name": "AT_MIPS_stride"},{"import": 701,"src": 2166,"name": "OP_breg29"},{"import": 701,"src": 2167,"name": "TAG_pointer_type"},{"import": 701,"src": 2168,"name": "ATE_unsigned"},{"import": 701,"src": 2169,"name": "LNS_advance_pc","kind": "const","type": 358,"value": null},{"import": 701,"src": 2170,"name": "LANG_Pascal83"},{"import": 701,"src": 2171,"name": "AT_HP_definition_points"},{"import": 701,"src": 2172,"name": "OP_addr"},{"import": 701,"src": 2173,"name": "AT_body_end"},{"import": 701,"src": 2174,"name": "LANG_C_plus_plus_14"},{"import": 701,"src": 2175,"name": "AT_decl_line"},{"import": 701,"src": 2176,"name": "AT_HP_widened_byte_size"},{"import": 701,"src": 2177,"name": "LNS_set_column","kind": "const","type": 358,"value": null},{"import": 701,"src": 2178,"name": "ATE_signed_char"},{"import": 701,"src": 2179,"name": "ATE_HP_VAX_float"},{"import": 701,"src": 2180,"name": "TAG_inlined_subroutine"},{"import": 701,"src": 2181,"name": "AT_GNU_dwo_id"},{"import": 701,"src": 2182,"name": "OP_const4u"},{"import": 701,"src": 2183,"name": "AT_comp_dir"},{"import": 701,"src": 2184,"name": "CFA_restore_extended"},{"import": 701,"src": 2185,"name": "AT_decl_file"},{"import": 701,"src": 2186,"name": "FORM_ref_udata"},{"import": 701,"src": 2187,"name": "OP_const2s"},{"import": 701,"src": 2188,"name": "ATE_packed_decimal"},{"import": 701,"src": 2189,"name": "OP_xderef_size"},{"import": 701,"src": 2190,"name": "TAG_namelist"},{"import": 701,"src": 2191,"name": "AT_MIPS_epilog_begin"},{"import": 701,"src": 2192,"name": "ATE_HP_imaginary_float80"},{"import": 701,"src": 2193,"name": "TAG_common_inclusion"},{"import": 701,"src": 2194,"name": "TAG_rvalue_reference_type"},{"import": 701,"src": 2195,"name": "TAG_ptr_to_member_type"},{"import": 701,"src": 2196,"name": "CHILDREN_yes"},{"import": 701,"src": 2197,"name": "AT_MIPS_loop_unroll_factor"},{"import": 701,"src": 2198,"name": "TAG_typedef"},{"import": 701,"src": 2199,"name": "AT_GNU_call_site_target_clobbered"},{"import": 701,"src": 2200,"name": "OP_lit2"},{"import": 701,"src": 2201,"name": "OP_lit19"},{"import": 701,"src": 2202,"name": "AT_decl_column"},{"import": 701,"src": 2203,"name": "AT_friend"},{"import": 701,"src": 2204,"name": "AT_PGI_lbase"},{"import": 701,"src": 2205,"name": "AT_calling_convention"},{"import": 701,"src": 2206,"name": "FORM_sec_offset"},{"import": 701,"src": 2207,"name": "AT_allocated"},{"import": 701,"src": 2208,"name": "FORM_exprloc"},{"import": 701,"src": 2209,"name": "TAG_thrown_type"},{"import": 701,"src": 2210,"name": "AT_inline"},{"import": 701,"src": 2211,"name": "AT_GNU_vector"},{"import": 701,"src": 2212,"name": "TAG_partial_unit"},{"import": 701,"src": 2213,"name": "LANG_Fortran77"},{"import": 701,"src": 2214,"name": "OP_regx"},{"import": 701,"src": 2215,"name": "ATE_void"},{"import": 701,"src": 2216,"name": "OP_breg7"},{"import": 701,"src": 2217,"name": "TAG_member"},{"import": 701,"src": 2218,"name": "AT_data_member_location"},{"import": 701,"src": 2219,"name": "AT_trampoline"},{"import": 701,"src": 2220,"name": "AT_linkage_name"},{"import": 701,"src": 2221,"name": "AT_discr_list"},{"import": 701,"src": 2222,"name": "AT_MIPS_abstract_name"},{"import": 701,"src": 2223,"name": "OP_lit5"},{"import": 701,"src": 2224,"name": "LANG_C89"},{"import": 701,"src": 2225,"name": "TAG_reference_type"},{"import": 701,"src": 2226,"name": "OP_reg10"},{"import": 701,"src": 2227,"name": "OP_reg31"},{"import": 701,"src": 2228,"name": "OP_lit26"},{"import": 701,"src": 2229,"name": "AT_use_UTF8"},{"import": 701,"src": 2230,"name": "AT_picture_string"},{"import": 701,"src": 2231,"name": "OP_reg27"},{"import": 701,"src": 2232,"name": "AT_GNU_macros"},{"import": 701,"src": 2233,"name": "AT_const_value"},{"import": 701,"src": 2234,"name": "AT_upper_bound"},{"import": 701,"src": 2235,"name": "FORM_ref4"},{"import": 701,"src": 2236,"name": "LNS_set_isa"},{"import": 701,"src": 2237,"name": "TAG_unspecified_type"},{"import": 701,"src": 2238,"name": "TAG_imported_module"},{"import": 701,"src": 2239,"name": "OP_reg0"},{"import": 701,"src": 2240,"name": "OP_bra"},{"import": 701,"src": 2241,"name": "OP_lit8"},{"import": 701,"src": 2242,"name": "OP_lit13"},{"import": 701,"src": 2243,"name": "OP_breg24"},{"import": 701,"src": 2244,"name": "AT_default_value"},{"import": 701,"src": 2245,"name": "OP_reg17"},{"import": 701,"src": 2246,"name": "OP_HP_fltconst8"},{"import": 701,"src": 2247,"name": "TAG_imported_unit"},{"import": 701,"src": 2248,"name": "ATE_hi_user"},{"import": 701,"src": 2249,"name": "AT_pure"},{"import": 701,"src": 2250,"name": "OP_breg12"},{"import": 701,"src": 2251,"name": "OP_breg9"},{"import": 701,"src": 2252,"name": "AT_main_subprogram"},{"import": 701,"src": 2253,"name": "OP_breg21"},{"import": 701,"src": 2254,"name": "OP_form_tls_address"},{"import": 701,"src": 2255,"name": "AT_byte_size"},{"import": 701,"src": 2256,"name": "CFA_val_offset_sf"},{"import": 701,"src": 2257,"name": "OP_ne"},{"import": 701,"src": 2258,"name": "CFA_GNU_args_size"},{"import": 701,"src": 2259,"name": "AT_data_bit_offset"},{"import": 701,"src": 2260,"name": "OP_lit28"},{"import": 701,"src": 2261,"name": "OP_ge"},{"import": 701,"src": 2262,"name": "AT_language"},{"import": 701,"src": 2263,"name": "AT_HP_prologue"},{"import": 701,"src": 2264,"name": "FORM_sdata"},{"import": 701,"src": 2265,"name": "TAG_structure_type"},{"import": 701,"src": 2266,"name": "AT_endianity"},{"import": 701,"src": 2267,"name": "AT_return_addr"},{"import": 701,"src": 2268,"name": "OP_dup"},{"import": 701,"src": 2269,"name": "OP_le"},{"import": 701,"src": 2270,"name": "OP_breg19"},{"import": 701,"src": 2271,"name": "TAG_shared_type"},{"import": 701,"src": 2272,"name": "AT_binary_scale"},{"import": 701,"src": 2273,"name": "AT_call_line"},{"import": 701,"src": 2274,"name": "CFA_advance_loc"},{"import": 701,"src": 2275,"name": "LANG_C_plus_plus_11"},{"import": 701,"src": 2276,"name": "AT_string_length"},{"import": 701,"src": 2277,"name": "AT_macro_info"},{"import": 701,"src": 2278,"name": "AT_element_list"},{"import": 701,"src": 2279,"name": "AT_GNU_call_site_value"},{"import": 701,"src": 2280,"name": "AT_HP_pass_by_reference"},{"import": 701,"src": 2281,"name": "FORM_data1"},{"import": 701,"src": 2282,"name": "CFA_advance_loc4"},{"import": 701,"src": 2283,"name": "TAG_HP_Bliss_field_set"},{"import": 701,"src": 2284,"name": "LNS_set_epilogue_begin"},{"import": 701,"src": 2285,"name": "OP_consts"},{"import": 701,"src": 2286,"name": "LNS_set_prologue_end","kind": "const","type": 358,"value": null},{"import": 701,"src": 2287,"name": "OP_const1u"},{"import": 701,"src": 2288,"name": "AT_address_class"},{"import": 701,"src": 2289,"name": "OP_implicit_value"},{"import": 701,"src": 2290,"name": "LANG_Fortran03"},{"import": 701,"src": 2291,"name": "AT_HP_epilogue"},{"import": 701,"src": 2292,"name": "AT_associated"},{"import": 701,"src": 2293,"name": "AT_HP_unit_size"},{"import": 701,"src": 2294,"name": "AT_bit_stride"},{"import": 701,"src": 2295,"name": "LANG_Modula2"},{"import": 701,"src": 2296,"name": "AT_name"},{"import": 701,"src": 2297,"name": "CFA_advance_loc1"},{"import": 701,"src": 2298,"name": "OP_and"},{"import": 701,"src": 2299,"name": "LNS_const_add_pc","kind": "const","type": 358,"value": null},{"import": 701,"src": 2300,"name": "OP_reg18"},{"import": 701,"src": 2301,"name": "AT_type"},{"import": 701,"src": 2302,"name": "OP_HP_mod_range"},{"import": 701,"src": 2303,"name": "OP_const8s"},{"import": 701,"src": 2304,"name": "ATE_HP_edited"},{"import": 701,"src": 2305,"name": "CFA_def_cfa_offset_sf"},{"import": 701,"src": 2306,"name": "AT_use_GNAT_descriptive_type"},{"import": 701,"src": 2307,"name": "LANG_Java"},{"import": 701,"src": 2308,"name": "AT_namelist_items"},{"import": 701,"src": 2309,"name": "OP_GNU_addr_index"},{"import": 701,"src": 2310,"name": "OP_breg4"},{"import": 701,"src": 2311,"name": "ATE_UTF"},{"import": 701,"src": 2312,"name": "TAG_GNU_EINCL"},{"import": 701,"src": 2313,"name": "OP_reg8"},{"import": 701,"src": 2314,"name": "OP_lit0"},{"import": 701,"src": 2315,"name": "TAG_namelist_item"},{"import": 701,"src": 2316,"name": "AT_prototyped"},{"import": 701,"src": 2317,"name": "OP_lt"},{"import": 701,"src": 2318,"name": "AT_GNU_pubnames"},{"import": 701,"src": 2319,"name": "OP_lit25"},{"import": 701,"src": 2320,"name": "AT_GNU_odr_signature"},{"import": 701,"src": 2321,"name": "TAG_formal_parameter"},{"import": 701,"src": 2322,"name": "AT_artificial"},{"import": 701,"src": 2323,"name": "TAG_class_type"},{"import": 701,"src": 2324,"name": "OP_deref_size"},{"import": 701,"src": 2325,"name": "AT_discr_value"},{"import": 701,"src": 2326,"name": "OP_rot"},{"import": 701,"src": 2327,"name": "OP_reg24"},{"import": 701,"src": 2328,"name": "OP_piece"},{"import": 701,"src": 2329,"name": "OP_HP_is_value"},{"import": 701,"src": 2330,"name": "TAG_compile_unit"},{"import": 701,"src": 2331,"name": "FORM_ref1"},{"import": 701,"src": 2332,"name": "OP_GNU_regval_type"},{"import": 701,"src": 2333,"name": "OP_breg1"},{"import": 701,"src": 2334,"name": "TAG_string_type"},{"import": 701,"src": 2335,"name": "LANG_D"},{"import": 701,"src": 2336,"name": "OP_GNU_reinterpret"},{"import": 701,"src": 2337,"name": "LANG_ObjC_plus_plus"},{"import": 701,"src": 2338,"name": "OP_reg5"},{"import": 701,"src": 2339,"name": "TAG_enumeration_type"},{"import": 701,"src": 2340,"name": "OP_lit10"},{"import": 701,"src": 2341,"name": "TAG_subprogram"},{"import": 701,"src": 2342,"name": "AT_explicit"},{"import": 701,"src": 2343,"name": "OP_reg12"},{"import": 701,"src": 2344,"name": "OP_eq"},{"import": 701,"src": 2345,"name": "OP_lit20"},{"import": 701,"src": 2346,"name": "AT_HP_all_variables_modifiable"},{"import": 701,"src": 2347,"name": "OP_reg21"},{"import": 701,"src": 2348,"name": "OP_lit30"},{"import": 701,"src": 2349,"name": "ATE_address"},{"import": 701,"src": 2350,"name": "OP_breg11"},{"import": 701,"src": 2351,"name": "FORM_indirect"},{"import": 701,"src": 2352,"name": "TAG_file_type"},{"import": 701,"src": 2353,"name": "AT_upc_threads_scaled"},{"import": 701,"src": 2354,"name": "LANG_HP_Bliss"},{"import": 701,"src": 2355,"name": "CFA_offset_extended_sf"},{"import": 701,"src": 2356,"name": "OP_reg2"},{"import": 701,"src": 2357,"name": "OP_lit15"},{"import": 701,"src": 2358,"name": "TAG_HP_Bliss_field"},{"import": 701,"src": 2359,"name": "OP_breg26"},{"import": 701,"src": 2360,"name": "TAG_GNU_call_site"},{"import": 701,"src": 2361,"name": "FORM_GNU_addr_index"},{"import": 701,"src": 2362,"name": "TAG_common_block"},{"import": 701,"src": 2363,"name": "TAG_subroutine_type"},{"import": 701,"src": 2364,"name": "OP_GNU_const_type"},{"import": 701,"src": 2365,"name": "TAG_entry_point"},{"import": 701,"src": 2366,"name": "TAG_catch_block"},{"import": 701,"src": 2367,"name": "OP_swap"},{"import": 701,"src": 2368,"name": "AT_sibling"},{"import": 701,"src": 2369,"name": "OP_bregx"},{"import": 701,"src": 2370,"name": "AT_base_types"},{"import": 701,"src": 2371,"name": "FORM_addr"},{"import": 701,"src": 2372,"name": "OP_breg14"},{"import": 701,"src": 2373,"name": "TAG_interface_type"},{"import": 701,"src": 2374,"name": "LANG_Ada95"},{"import": 701,"src": 2375,"name": "AT_ordering"},{"import": 701,"src": 2376,"name": "AT_byte_stride"},{"import": 701,"src": 2377,"name": "AT_producer"},{"import": 701,"src": 2378,"name": "OP_breg23"},{"import": 701,"src": 2379,"name": "AT_use_location"},{"import": 701,"src": 2380,"name": "TAG_hi_user"},{"import": 701,"src": 2381,"name": "AT_HP_opt_flags"},{"import": 701,"src": 2382,"name": "AT_object_pointer"},{"import": 701,"src": 2383,"name": "AT_lower_bound"},{"import": 701,"src": 2384,"name": "AT_entry_pc"},{"import": 701,"src": 2385,"name": "OP_mod"},{"import": 701,"src": 2386,"name": "TAG_condition"},{"import": 701,"src": 2387,"name": "OP_GNU_const_index"},{"import": 701,"src": 2388,"name": "OP_stack_value"},{"import": 701,"src": 2389,"name": "OP_GNU_implicit_pointer"},{"import": 701,"src": 2390,"name": "AT_recursive"},{"import": 701,"src": 2391,"name": "FORM_data4"},{"import": 701,"src": 2392,"name": "AT_HP_prof_flags"},{"import": 701,"src": 2393,"name": "LNS_extended_op","kind": "const","type": 358,"value": null},{"import": 701,"src": 2394,"name": "TAG_function_template"},{"import": 701,"src": 2395,"name": "AT_GNU_locks_excluded"},{"import": 701,"src": 2396,"name": "OP_drop"},{"import": 701,"src": 2397,"name": "OP_breg28"},{"import": 701,"src": 2398,"name": "AT_src_coords"},{"import": 701,"src": 2399,"name": "AT_GNU_guarded_by"},{"import": 701,"src": 2400,"name": "AT_const_expr"},{"import": 701,"src": 2401,"name": "AT_high_pc"},{"import": 701,"src": 2402,"name": "LANG_HP_Assembler"},{"import": 701,"src": 2403,"name": "AT_HP_unmodifiable"},{"import": 701,"src": 2404,"name": "ATE_HP_packed_decimal"},{"import": 701,"src": 2405,"name": "ATE_HP_VAX_complex_float_d"},{"import": 701,"src": 2406,"name": "ATE_HP_VAX_float_d"},{"import": 701,"src": 2407,"name": "OP_xor"},{"import": 701,"src": 2408,"name": "LANG_Mips_Assembler"},{"import": 701,"src": 2409,"name": "OP_const1s"},{"import": 701,"src": 2410,"name": "TAG_template_value_param"},{"import": 701,"src": 2411,"name": "TAG_upc_strict_type"},{"import": 701,"src": 2412,"name": "CFA_def_cfa_register"},{"import": 701,"src": 2413,"name": "CFA_register"},{"import": 701,"src": 2414,"name": "AT_GNU_pt_guarded_by"},{"import": 701,"src": 2415,"name": "OP_HP_unknown"},{"import": 701,"src": 2416,"name": "OP_lit3"},{"import": 701,"src": 2417,"name": "OP_lit18"},{"import": 701,"src": 2418,"name": "AT_MIPS_loop_begin"},{"import": 701,"src": 2419,"name": "FORM_string"},{"import": 701,"src": 2420,"name": "OP_or"},{"import": 701,"src": 2421,"name": "TAG_upc_relaxed_type"},{"import": 701,"src": 2422,"name": "OP_const8u"},{"import": 701,"src": 2423,"name": "CFA_offset"},{"import": 701,"src": 2424,"name": "TAG_template_alias"},{"import": 701,"src": 2425,"name": "OP_reg29"},{"import": 701,"src": 2426,"name": "AT_call_column"},{"import": 701,"src": 2427,"name": "CFA_restore_state"},{"import": 701,"src": 2428,"name": "TAG_type_unit"},{"import": 701,"src": 2429,"name": "AT_count"},{"import": 701,"src": 2430,"name": "OP_gt"},{"import": 701,"src": 2431,"name": "ATE_boolean"},{"import": 701,"src": 2432,"name": "FORM_ref2"},{"import": 701,"src": 2433,"name": "AT_threads_scaled"},{"import": 701,"src": 2434,"name": "TAG_format_label"},{"import": 701,"src": 2435,"name": "OP_breg6"},{"import": 701,"src": 2436,"name": "LANG_C"},{"import": 701,"src": 2437,"name": "OP_HP_tls"},{"import": 701,"src": 2438,"name": "AT_extension"},{"import": 701,"src": 2439,"name": "OP_nop"},{"import": 701,"src": 2440,"name": "OP_lit6"},{"import": 701,"src": 2441,"name": "LANG_Upc"},{"import": 701,"src": 2442,"name": "OP_reg11"},{"import": 701,"src": 2443,"name": "TAG_enumerator"},{"import": 701,"src": 2444,"name": "OP_lit27"},{"import": 701,"src": 2445,"name": "AT_hi_user"},{"import": 701,"src": 2446,"name": "OP_reg26"},{"import": 701,"src": 2447,"name": "AT_bit_offset"},{"import": 701,"src": 2448,"name": "AT_HP_actuals_stmt_list"},{"import": 701,"src": 2449,"name": "CFA_remember_state"},{"import": 701,"src": 2450,"name": "AT_decimal_sign"},{"import": 701,"src": 2451,"name": "OP_breg3"},{"import": 701,"src": 2452,"name": "CFA_same_value"},{"import": 701,"src": 2453,"name": "TAG_PGI_kanji_type"},{"import": 701,"src": 2454,"name": "OP_shra"},{"import": 701,"src": 2455,"name": "AT_discr"},{"import": 701,"src": 2456,"name": "OP_reg7"},{"import": 701,"src": 2457,"name": "CFA_set_loc"},{"import": 701,"src": 2458,"name": "OP_GNU_convert"},{"import": 701,"src": 2459,"name": "OP_lit9"},{"import": 701,"src": 2460,"name": "OP_lit12"},{"import": 701,"src": 2461,"name": "TAG_unspecified_parameters"},{"import": 701,"src": 2462,"name": "ATE_unsigned_fixed"},{"import": 701,"src": 2463,"name": "CFA_nop"},{"import": 701,"src": 2464,"name": "AT_GNU_call_site_target"},{"import": 701,"src": 2465,"name": "OP_reg14"},{"import": 701,"src": 2466,"name": "AT_low_pc"},{"import": 701,"src": 2467,"name": "OP_lit22"},{"import": 701,"src": 2468,"name": "AT_GNU_all_source_call_sites"},{"import": 701,"src": 2469,"name": "AT_mutable"},{"import": 701,"src": 2470,"name": "TAG_friend"},{"import": 701,"src": 2471,"name": "OP_call_ref"},{"import": 701,"src": 2472,"name": "OP_call_frame_cfa"},{"import": 701,"src": 2473,"name": "OP_reg23"},{"import": 701,"src": 2474,"name": "OP_breg13"},{"import": 701,"src": 2475,"name": "OP_fbreg"},{"import": 701,"src": 2476,"name": "OP_breg30"},{"import": 701,"src": 2477,"name": "OP_breg8"},{"import": 701,"src": 2478,"name": "AT_static_link"},{"import": 701,"src": 2479,"name": "TAG_template_type_param"},{"import": 701,"src": 2480,"name": "AT_is_optional"},{"import": 701,"src": 2481,"name": "OP_plus_uconst"},{"import": 701,"src": 2482,"name": "OP_hi_user"},{"import": 701,"src": 2483,"name": "LANG_Cobol85"},{"import": 701,"src": 2484,"name": "OP_lit17"},{"import": 701,"src": 2485,"name": "OP_breg20"},{"import": 701,"src": 2486,"name": "LNE_set_discriminator"},{"import": 701,"src": 2487,"name": "LANG_Ada83"},{"import": 701,"src": 2488,"name": "AT_sf_names"},{"import": 701,"src": 2489,"name": "AT_MIPS_tail_loop_begin"},{"import": 701,"src": 2490,"name": "CFA_GNU_window_save"},{"import": 701,"src": 2491,"name": "TAG_GNU_BINCL"},{"import": 701,"src": 2492,"name": "OP_lit29"},{"import": 701,"src": 2493,"name": "AT_GNU_pt_guarded"},{"import": 701,"src": 2494,"name": "TAG_volatile_type"},{"import": 701,"src": 2495,"name": "OP_HP_fltconst4"},{"import": 701,"src": 2496,"name": "TAG_array_type"},{"import": 701,"src": 2497,"name": "AT_ranges"},{"import": 701,"src": 2498,"name": "AT_bit_size"},{"import": 701,"src": 2499,"name": "AT_GNU_guarded"},{"import": 701,"src": 2500,"name": "TAG_access_declaration"},{"import": 701,"src": 2501,"name": "AT_HP_block_index"},{"import": 701,"src": 2502,"name": "OP_breg16"},{"import": 701,"src": 2503,"name": "ATE_imaginary_float"},{"import": 701,"src": 2504,"name": "LANG_ObjC"},{"import": 701,"src": 2505,"name": "AT_src_info"},{"import": 701,"src": 2506,"name": "LNS_set_basic_block","kind": "const","type": 358,"value": null},{"import": 701,"src": 2507,"name": "OP_constu"},{"import": 701,"src": 2508,"name": "CFA_def_cfa_offset"},{"import": 701,"src": 2509,"name": "TAG_const_type"},{"import": 701,"src": 2510,"name": "TAG_lexical_block"},{"import": 701,"src": 2511,"name": "ATE_HP_VAX_complex_float"},{"import": 701,"src": 2512,"name": "AT_call_file"},{"import": 701,"src": 2513,"name": "OP_skip"},{"import": 701,"src": 2514,"name": "DW_TAG_MIPS_loop"},{"import": 701,"src": 2515,"name": "AT_HP_cold_region_high_pc"},{"import": 701,"src": 2516,"name": "FORM_block4"},{"import": 701,"src": 2517,"name": "OP_call2"},{"import": 701,"src": 2518,"name": "OP_div"},{"import": 701,"src": 2519,"name": "OP_xderef"},{"import": 701,"src": 2520,"name": "OP_GNU_parameter_ref"},{"import": 701,"src": 2521,"name": "AT_identifier_case"},{"import": 701,"src": 2522,"name": "AT_declaration"},{"import": 701,"src": 2523,"name": "FORM_data2"},{"import": 701,"src": 2524,"name": "LANG_HP_IMacro"},{"import": 701,"src": 2525,"name": "AT_accessibility"},{"import": 701,"src": 2526,"name": "AT_member"},{"import": 701,"src": 2527,"name": "TAG_variant"},{"import": 701,"src": 2528,"name": "FORM_block1"},{"import": 701,"src": 2529,"name": "ATE_HP_imaginary_float128"},{"import": 701,"src": 2530,"name": "CFA_undefined"},{"import": 701,"src": 2531,"name": "AT_encoding"},{"import": 701,"src": 2532,"name": "ATE_signed"},{"import": 701,"src": 2533,"name": "CFA_def_cfa_sf"},{"import": 701,"src": 2534,"name": "AT_GNU_call_site_data_value"},{"import": 701,"src": 2535,"name": "AT_containing_type"},{"import": 701,"src": 2536,"name": "AT_HP_cold_region_low_pc"},{"import": 701,"src": 2537,"name": "AT_HP_linkage_name"},{"import": 701,"src": 2538,"name": "TAG_dwarf_procedure"},{"import": 701,"src": 2539,"name": "AT_digit_count"},{"import": 701,"src": 2540,"name": "TAG_imported_declaration"},{"import": 701,"src": 2541,"name": "OP_reg19"},{"import": 701,"src": 2542,"name": "FORM_udata"},{"import": 701,"src": 2543,"name": "CFA_GNU_negative_offset_extended"},{"import": 701,"src": 2544,"name": "AT_segment"},{"import": 701,"src": 2545,"name": "FORM_block"},{"import": 701,"src": 2546,"name": "AT_description"},{"import": 701,"src": 2547,"name": "AT_MIPS_fde"},{"import": 701,"src": 2548,"name": "FORM_ref_addr"},{"import": 701,"src": 2549,"name": "ATE_edited"},{"import": 701,"src": 2550,"name": "ATE_HP_floathpintel"},{"import": 702,"src": 2551,"name": "RwLock"},{"import": 702,"src": 2552,"name": "Lock"},{"import": 702,"src": 2553,"name": "Locked"},{"import": 702,"src": 2554,"name": "Channel"},{"import": 702,"src": 2555,"name": "Future"},{"import": 702,"src": 2556,"name": "RwLocked"},{"import": 702,"src": 2557,"name": "Loop","kind": "const","type": 348,"value": 820},{"import": 702,"src": 2558,"name": "Group"},{"import": 702,"src": 2559,"name": "fs","kind": "const","type": 348,"value": 621},{"import": 703,"src": 2560,"name": "BufferedInStream"},{"import": 703,"src": 2561,"name": "Packing"},{"import": 703,"src": 2562,"name": "mode","kind": "const","type": 911,"value": null},{"import": 703,"src": 2563,"name": "COutStream"},{"import": 703,"src": 2564,"name": "BufferOutStream"},{"import": 703,"src": 2565,"name": "getStdOut"},{"import": 703,"src": 2566,"name": "Serializer"},{"import": 703,"src": 2567,"name": "BitOutStream"},{"import": 703,"src": 2568,"name": "BufferedOutStream"},{"import": 703,"src": 2569,"name": "BitInStream"},{"import": 703,"src": 2570,"name": "Mode","kind": "const","type": 348,"value": 911},{"import": 703,"src": 2571,"name": "null_out_stream"},{"import": 703,"src": 2572,"name": "BufferedAtomicFile"},{"import": 703,"src": 2573,"name": "NullOutStream"},{"import": 703,"src": 2574,"name": "readLineFrom"},{"import": 703,"src": 2575,"name": "PeekStream"},{"import": 703,"src": 2576,"name": "InStream","kind": "const","type": 412,"value": 555},{"import": 703,"src": 2577,"name": "is_async","kind": "const","type": 347,"value": null},{"import": 703,"src": 2578,"name": "BufferedOutStreamCustom"},{"import": 703,"src": 2579,"name": "Deserializer"},{"import": 703,"src": 2580,"name": "readLine"},{"import": 703,"src": 2581,"name": "SliceInStream"},{"import": 703,"src": 2582,"name": "readLineSliceFrom"},{"import": 703,"src": 2583,"name": "BufferedInStreamCustom"},{"import": 703,"src": 2584,"name": "SliceSeekableInStream"},{"import": 703,"src": 2585,"name": "OutStream","kind": "const","type": 366,"value": 536},{"import": 703,"src": 2586,"name": "SliceOutStream"},{"import": 703,"src": 2587,"name": "readFileAlloc"},{"import": 703,"src": 2588,"name": "SeekableStream"},{"import": 703,"src": 2589,"name": "writeFile"},{"import": 703,"src": 2590,"name": "GetStdIoError","kind": "const","type": 348,"value": 730},{"import": 703,"src": 35,"name": "getStdErr","kind": "const","type": 40,"value": 46},{"import": 703,"src": 2591,"name": "readLineSlice"},{"import": 703,"src": 2592,"name": "CountingOutStream"},{"import": 703,"src": 2593,"name": "getStdIn"},{"import": 703,"src": 89,"name": "readFileAllocAligned","kind": "const","type": 912,"value": 611},{"import": 703,"src": 2594,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 703,"src": 2595,"name": "math","kind": "const","type": 348,"value": 697},{"import": 703,"src": 2596,"name": "os","kind": "const","type": 348,"value": 699},{"import": 703,"src": 2597,"name": "debug"},{"import": 703,"src": 2598,"name": "Buffer"},{"import": 703,"src": 2599,"name": "testing"},{"import": 703,"src": 2600,"name": "null_out_stream_state"},{"import": 703,"src": 2601,"name": "trait"},{"import": 703,"src": 2602,"name": "fmt"},{"import": 703,"src": 2603,"name": "root","kind": "const","type": 348,"value": 835},{"import": 703,"src": 2604,"name": "std","kind": "const","type": 348,"value": 424},{"import": 703,"src": 2605,"name": "c"},{"import": 703,"src": 2606,"name": "meta"},{"import": 703,"src": 2607,"name": "fs"},{"import": 703,"src": 2608,"name": "File","kind": "const","type": 348,"value": 458},{"import": 703,"src": 2609,"name": "assert"},{"import": 703,"src": 2610,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 704,"src": 2611,"name": "charToDigit"},{"import": 704,"src": 266,"name": "bufPrint","kind": "const","type": 913,"value": 612},{"import": 704,"src": 2612,"name": "default_max_depth","kind": "const","type": 358,"value": null},{"import": 704,"src": 141,"name": "formatType","kind": "const","type": 914,"value": 613},{"import": 704,"src": 2613,"name": "isWhiteSpace"},{"import": 704,"src": 2614,"name": "formatAsciiChar"},{"import": 704,"src": 2615,"name": "formatFloatDecimal"},{"import": 704,"src": 231,"name": "formatIntValue","kind": "const","type": 915,"value": 614},{"import": 704,"src": 2616,"name": "trim"},{"import": 704,"src": 2617,"name": "formatFloatScientific"},{"import": 704,"src": 2618,"name": "parseFloat"},{"import": 704,"src": 2619,"name": "formatBytes"},{"import": 704,"src": 2620,"name": "allocPrint"},{"import": 704,"src": 61,"name": "format","kind": "const","type": 916,"value": 615},{"import": 704,"src": 2621,"name": "parseInt"},{"import": 704,"src": 2622,"name": "FormatOptions","kind": "const","type": 348,"value": 551},{"import": 704,"src": 2623,"name": "BufPrintError","kind": "const","type": 348,"value": 814},{"import": 704,"src": 240,"name": "formatInt","kind": "const","type": 917,"value": 616},{"import": 704,"src": 2624,"name": "formatIntBuf"},{"import": 704,"src": 2625,"name": "AllocPrintError"},{"import": 704,"src": 193,"name": "formatText","kind": "const","type": 918,"value": 617},{"import": 704,"src": 2626,"name": "hexToBytes"},{"import": 704,"src": 2627,"name": "formatBuf"},{"import": 704,"src": 2628,"name": "parseUnsigned"},{"import": 704,"src": 2629,"name": "Alignment","kind": "const","type": 348,"value": 919},{"import": 704,"src": 2630,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 704,"src": 2631,"name": "builtin"},{"import": 704,"src": 2632,"name": "BufPrintContext","kind": "const","type": 348,"value": 816},{"import": 704,"src": 271,"name": "bufPrintWrite","kind": "const","type": 331,"value": 483},{"import": 704,"src": 2633,"name": "countSize"},{"import": 704,"src": 2634,"name": "math","kind": "const","type": 348,"value": 697},{"import": 704,"src": 2635,"name": "errol"},{"import": 704,"src": 2636,"name": "nextArg","kind": "const","type": 920,"value": 618},{"import": 704,"src": 2637,"name": "FormatIntBuf"},{"import": 704,"src": 2638,"name": "debug","kind": "const","type": 348,"value": 700},{"import": 704,"src": 2639,"name": "testing"},{"import": 704,"src": 2640,"name": "formatFloatValue"},{"import": 704,"src": 2641,"name": "peekIsAlign"},{"import": 704,"src": 247,"name": "formatIntSigned","kind": "const","type": 921,"value": 619},{"import": 704,"src": 2642,"name": "testFmt"},{"import": 704,"src": 2643,"name": "bufPrintIntToSlice"},{"import": 704,"src": 2644,"name": "ParseUnsignedError"},{"import": 704,"src": 243,"name": "formatIntUnsigned","kind": "const","type": 922,"value": 620},{"import": 704,"src": 2645,"name": "std","kind": "const","type": 348,"value": 424},{"import": 704,"src": 221,"name": "formatValue","kind": "const","type": 923,"value": 621},{"import": 704,"src": 245,"name": "digitToChar","kind": "const","type": 301,"value": 431},{"import": 704,"src": 2646,"name": "formatIntCallback"},{"import": 704,"src": 2647,"name": "lossyCast"},{"import": 704,"src": 2648,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 705,"src": 2649,"name": "Queue","kind": "const","type": 354,"value": 531},{"import": 705,"src": 2650,"name": "Int"},{"import": 705,"src": 2651,"name": "Stack","kind": "const","type": 402,"value": 551},{"import": 706,"src": 2652,"name": "DebugSubsectionKind"},{"import": 706,"src": 2653,"name": "LineFragmentHeader"},{"import": 706,"src": 2654,"name": "DbiStreamHeader"},{"import": 706,"src": 2655,"name": "TypeIndex"},{"import": 706,"src": 2656,"name": "ModInfo","kind": "const","type": 348,"value": 924},{"import": 706,"src": 2657,"name": "SectionContribEntry","kind": "const","type": 348,"value": 925},{"import": 706,"src": 2658,"name": "LineBlockFragmentHeader"},{"import": 706,"src": 2659,"name": "PDBStringTableHeader"},{"import": 706,"src": 2660,"name": "ColumnNumberEntry"},{"import": 706,"src": 2661,"name": "LineNumberEntry"},{"import": 706,"src": 2662,"name": "DebugSubsectionHeader"},{"import": 706,"src": 2663,"name": "ProcSymFlags"},{"import": 706,"src": 2664,"name": "RecordPrefix"},{"import": 706,"src": 2665,"name": "Pdb","kind": "const","type": 348,"value": 926},{"import": 706,"src": 2666,"name": "SectionMapHeader"},{"import": 706,"src": 2667,"name": "StreamType"},{"import": 706,"src": 2668,"name": "SymbolKind"},{"import": 706,"src": 2669,"name": "ProcSym"},{"import": 706,"src": 2670,"name": "FileChecksumEntryHeader"},{"import": 706,"src": 2671,"name": "SectionMapEntry"},{"import": 706,"src": 2672,"name": "SectionContrSubstreamVersion"},{"import": 706,"src": 2673,"name": "LineFlags"},{"import": 706,"src": 2674,"name": "builtin"},{"import": 706,"src": 2675,"name": "SuperBlock"},{"import": 706,"src": 2676,"name": "coff","kind": "const","type": 348,"value": 707},{"import": 706,"src": 2677,"name": "math","kind": "const","type": 348,"value": 697},{"import": 706,"src": 2678,"name": "std","kind": "const","type": 348,"value": 424},{"import": 706,"src": 2679,"name": "MsfStream","kind": "const","type": 348,"value": 807},{"import": 706,"src": 2680,"name": "os"},{"import": 706,"src": 2681,"name": "File","kind": "const","type": 348,"value": 458},{"import": 706,"src": 2682,"name": "blockCountFromSize"},{"import": 706,"src": 2683,"name": "warn"},{"import": 706,"src": 2684,"name": "io","kind": "const","type": 348,"value": 703},{"import": 706,"src": 2685,"name": "ArrayList"},{"import": 706,"src": 2686,"name": "Msf","kind": "const","type": 348,"value": 927},{"import": 706,"src": 2687,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 707,"src": 2688,"name": "Section","kind": "const","type": 348,"value": 382},{"import": 707,"src": 2689,"name": "Coff","kind": "const","type": 348,"value": 928},{"import": 707,"src": 2690,"name": "CoffError"},{"import": 707,"src": 2691,"name": "builtin"},{"import": 707,"src": 2692,"name": "IMAGE_DEBUG_TYPE_CODEVIEW"},{"import": 707,"src": 2693,"name": "IMAGE_FILE_MACHINE_IA64"},{"import": 707,"src": 2694,"name": "DEBUG_DIRECTORY"},{"import": 707,"src": 2695,"name": "IMAGE_NUMBEROF_DIRECTORY_ENTRIES","kind": "const","type": 358,"value": null},{"import": 707,"src": 2696,"name": "OptionalHeader","kind": "const","type": 348,"value": 929},{"import": 707,"src": 2697,"name": "IMAGE_NT_OPTIONAL_HDR64_MAGIC"},{"import": 707,"src": 2698,"name": "IMAGE_FILE_MACHINE_I386"},{"import": 707,"src": 2699,"name": "std","kind": "const","type": 348,"value": 424},{"import": 707,"src": 2700,"name": "os"},{"import": 707,"src": 2701,"name": "SectionHeader","kind": "const","type": 348,"value": 641},{"import": 707,"src": 2702,"name": "File","kind": "const","type": 348,"value": 458},{"import": 707,"src": 2703,"name": "DebugDirectoryEntry"},{"import": 707,"src": 2704,"name": "CoffHeader","kind": "const","type": 348,"value": 930},{"import": 707,"src": 2705,"name": "IMAGE_NT_OPTIONAL_HDR32_MAGIC"},{"import": 707,"src": 2706,"name": "IMAGE_FILE_MACHINE_AMD64"},{"import": 707,"src": 2707,"name": "io"},{"import": 707,"src": 2708,"name": "ArrayList","kind": "const","type": 363,"value": 534},{"import": 707,"src": 2709,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 708,"src": 2710,"name": "Strategy"},{"import": 708,"src": 2711,"name": "Crc32"},{"import": 708,"src": 2712,"name": "Murmur2_64"},{"import": 708,"src": 2713,"name": "Wyhash","kind": "const","type": 348,"value": 585},{"import": 708,"src": 2714,"name": "SipHash128"},{"import": 708,"src": 2715,"name": "autoHashStrat"},{"import": 708,"src": 2716,"name": "murmur"},{"import": 708,"src": 2717,"name": "Murmur2_32"},{"import": 708,"src": 2718,"name": "Fnv1a_128"},{"import": 708,"src": 2719,"name": "cityhash"},{"import": 708,"src": 2720,"name": "Murmur3_32"},{"import": 708,"src": 2721,"name": "Fnv1a_32"},{"import": 708,"src": 2722,"name": "Fnv1a_64"},{"import": 708,"src": 2723,"name": "Adler32"},{"import": 708,"src": 2724,"name": "SipHash64"},{"import": 708,"src": 2725,"name": "CityHash32"},{"import": 708,"src": 2726,"name": "crc"},{"import": 708,"src": 2727,"name": "autoHash","kind": "const","type": 832,"value": 569},{"import": 708,"src": 2728,"name": "CityHash64"},{"import": 708,"src": 2729,"name": "fnv"},{"import": 708,"src": 2730,"name": "wyhash","kind": "const","type": 348,"value": 802},{"import": 708,"src": 2731,"name": "adler"},{"import": 708,"src": 2732,"name": "auto_hash","kind": "const","type": 348,"value": 931},{"import": 708,"src": 2733,"name": "siphash"},{"import": 709,"src": 71,"name": "sort","kind": "const","type": 932,"value": 622},{"import": 709,"src": 2734,"name": "min"},{"import": 709,"src": 2735,"name": "max"},{"import": 709,"src": 2736,"name": "desc"},{"import": 709,"src": 2737,"name": "asc"},{"import": 709,"src": 165,"name": "insertionSort","kind": "const","type": 933,"value": 623},{"import": 709,"src": 2738,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 709,"src": 2739,"name": "builtin"},{"import": 709,"src": 2740,"name": "fixed_buffer_mem"},{"import": 709,"src": 159,"name": "findLastForward","kind": "const","type": 934,"value": 624},{"import": 709,"src": 2741,"name": "fuzzTest"},{"import": 709,"src": 153,"name": "mergeInto","kind": "const","type": 935,"value": 625},{"import": 709,"src": 2742,"name": "IdAndValue"},{"import": 709,"src": 164,"name": "mergeInPlace","kind": "const","type": 936,"value": 626},{"import": 709,"src": 204,"name": "binaryLast","kind": "const","type": 937,"value": 627},{"import": 709,"src": 166,"name": "findFirstForward","kind": "const","type": 938,"value": 628},{"import": 709,"src": 150,"name": "swap","kind": "const","type": 939,"value": 629},{"import": 709,"src": 2743,"name": "math","kind": "const","type": 348,"value": 697},{"import": 709,"src": 2744,"name": "std","kind": "const","type": 348,"value": 424},{"import": 709,"src": 2745,"name": "testing"},{"import": 709,"src": 157,"name": "mergeExternal","kind": "const","type": 940,"value": 630},{"import": 709,"src": 2746,"name": "Pull","kind": "const","type": 348,"value": 941},{"import": 709,"src": 160,"name": "findFirstBackward","kind": "const","type": 942,"value": 631},{"import": 709,"src": 167,"name": "findLastBackward","kind": "const","type": 943,"value": 632},{"import": 709,"src": 2747,"name": "Iterator","kind": "const","type": 348,"value": 555},{"import": 709,"src": 2748,"name": "Range","kind": "const","type": 348,"value": 557},{"import": 709,"src": 162,"name": "binaryFirst","kind": "const","type": 944,"value": 633},{"import": 709,"src": 161,"name": "blockSwap","kind": "const","type": 945,"value": 634},{"import": 709,"src": 2749,"name": "testStableSort"},{"import": 709,"src": 2750,"name": "assert"},{"import": 709,"src": 2751,"name": "cmpByValue"},{"import": 709,"src": 163,"name": "mergeInternal","kind": "const","type": 946,"value": 635},{"import": 947,"src": 2752,"name": "_errno","kind": "const","type": 948,"value": 636},{"import": 710,"src": 2754,"name": "fork"},{"import": 947,"src": 2755,"name": "EAI_PROTOCOL"},{"import": 947,"src": 2756,"name": "mach_timebase_info","kind": "const","type": 949,"value": 637},{"import": 947,"src": 2757,"name": "EAI_SOCKTYPE"},{"import": 710,"src": 2758,"name": "recv"},{"import": 710,"src": 2759,"name": "poll"},{"import": 710,"src": 2760,"name": "getsockopt"},{"import": 710,"src": 2761,"name": "sysctlnametomib"},{"import": 710,"src": 2762,"name": "fwrite"},{"import": 947,"src": 2763,"name": "EAI_FAMILY"},{"import": 710,"src": 2764,"name": "readlink"},{"import": 710,"src": 2765,"name": "getdirentries"},{"import": 710,"src": 2766,"name": "fread"},{"import": 947,"src": 2767,"name": "pthread_mutex_t","kind": "const","type": 348,"value": 801},{"import": 947,"src": 2768,"name": "pthread_attr_t"},{"import": 947,"src": 2769,"name": "mach_header_64","kind": "const","type": 348,"value": 950},{"import": 710,"src": 2770,"name": "gethostname"},{"import": 710,"src": 2771,"name": "printf"},{"import": 947,"src": 2772,"name": "kevent64"},{"import": 710,"src": 2773,"name": "send"},{"import": 947,"src": 2774,"name": "AI_NUMERICSERV"},{"import": 710,"src": 2775,"name": "sigprocmask"},{"import": 710,"src": 2776,"name": "pthread_create"},{"import": 710,"src": 2777,"name": "open","kind": "const","type": 951,"value": 638},{"import": 947,"src": 2778,"name": "EAI_BADHINTS"},{"import": 710,"src": 2779,"name": "sysctl"},{"import": 947,"src": 2780,"name": "__getdirentries64"},{"import": 710,"src": 58,"name": "getErrno","kind": "const","type": 895,"value": 600},{"import": 710,"src": 2781,"name": "connect"},{"import": 947,"src": 2782,"name": "EAI_MEMORY"},{"import": 947,"src": 2783,"name": "mach_host_self"},{"import": 710,"src": 2784,"name": "PTHREAD_COND_INITIALIZER","kind": "const","type": 800,"value": null},{"import": 710,"src": 2785,"name": "pthread_join"},{"import": 710,"src": 2786,"name": "pthread_mutex_unlock","kind": "const","type": 952,"value": 639},{"import": 710,"src": 2787,"name": "pthread_cond_destroy"},{"import": 710,"src": 2788,"name": "raise"},{"import": 710,"src": 2789,"name": "futimens"},{"import": 710,"src": 2790,"name": "getaddrinfo"},{"import": 710,"src": 2791,"name": "pread"},{"import": 710,"src": 2792,"name": "pwrite"},{"import": 710,"src": 2793,"name": "symlink"},{"import": 710,"src": 2794,"name": "utimensat"},{"import": 710,"src": 2795,"name": "pthread_cond_wait","kind": "const","type": 953,"value": 640},{"import": 710,"src": 2796,"name": "getenv","kind": "const","type": 954,"value": 641},{"import": 710,"src": 2797,"name": "pthread_mutex_lock","kind": "const","type": 952,"value": 642},{"import": 710,"src": 2798,"name": "setgid"},{"import": 710,"src": 2799,"name": "chdir"},{"import": 710,"src": 2800,"name": "getnameinfo"},{"import": 947,"src": 2801,"name": "AI_CANONNAME"},{"import": 710,"src": 2802,"name": "dup2"},{"import": 947,"src": 2803,"name": "_NSGetExecutablePath"},{"import": 947,"src": 2804,"name": "EAI_FAIL"},{"import": 947,"src": 2805,"name": "EAI_OVERFLOW"},{"import": 710,"src": 2806,"name": "pthread_attr_destroy"},{"import": 710,"src": 2807,"name": "kevent"},{"import": 710,"src": 2808,"name": "pthread_mutex_destroy"},{"import": 710,"src": 2809,"name": "kill"},{"import": 710,"src": 2810,"name": "setreuid"},{"import": 710,"src": 2811,"name": "execve"},{"import": 947,"src": 2812,"name": "_mh_execute_header","kind": "var","type": 950,"value": "undefined"},{"import": 710,"src": 2813,"name": "versionCheck"},{"import": 710,"src": 2814,"name": "setregid"},{"import": 710,"src": 2815,"name": "fopen"},{"import": 710,"src": 2816,"name": "mkdir"},{"import": 710,"src": 2817,"name": "getsockname"},{"import": 710,"src": 2818,"name": "dn_expand"},{"import": 710,"src": 2819,"name": "pthread_cond_signal","kind": "const","type": 955,"value": 643},{"import": 947,"src": 2820,"name": "close$NOCANCEL","kind": "const","type": 956,"value": 644},{"import": 710,"src": 2821,"name": "sysctlbyname"},{"import": 710,"src": 2822,"name": "sendto"},{"import": 947,"src": 2823,"name": "EAI_NONAME"},{"import": 710,"src": 2824,"name": "pipe"},{"import": 710,"src": 2825,"name": "unlinkat"},{"import": 710,"src": 2826,"name": "freeaddrinfo"},{"import": 710,"src": 2827,"name": "munmap","kind": "const","type": 957,"value": 645},{"import": 710,"src": 2828,"name": "aligned_alloc"},{"import": 947,"src": 2829,"name": "mach_header"},{"import": 710,"src": 2830,"name": "dup"},{"import": 710,"src": 2831,"name": "kqueue"},{"import": 710,"src": 2832,"name": "unlink"},{"import": 947,"src": 2833,"name": "EAI_ADDRFAMILY"},{"import": 710,"src": 2834,"name": "mprotect"},{"import": 710,"src": 2835,"name": "gai_strerror"},{"import": 710,"src": 2836,"name": "socket"},{"import": 710,"src": 2837,"name": "sched_yield","kind": "const","type": 958,"value": 646},{"import": 947,"src": 2838,"name": "mach_port_deallocate"},{"import": 710,"src": 2839,"name": "FILE"},{"import": 710,"src": 2840,"name": "exit"},{"import": 710,"src": 2841,"name": "lseek","kind": "const","type": 959,"value": 647},{"import": 710,"src": 2842,"name": "posix_memalign"},{"import": 710,"src": 2843,"name": "pipe2"},{"import": 947,"src": 2844,"name": "AI_PASSIVE"},{"import": 710,"src": 2845,"name": "pthread_attr_init"},{"import": 710,"src": 2846,"name": "stat"},{"import": 947,"src": 2847,"name": "host_get_clock_service"},{"import": 710,"src": 2848,"name": "listen"},{"import": 710,"src": 2849,"name": "mmap","kind": "const","type": 960,"value": 648},{"import": 710,"src": 2850,"name": "nanosleep","kind": "const","type": 961,"value": 649},{"import": 947,"src": 2851,"name": "AI_NUMERICHOST"},{"import": 710,"src": 2852,"name": "readv"},{"import": 710,"src": 2853,"name": "fstat$INODE64","kind": "const","type": 962,"value": 650},{"import": 710,"src": 2854,"name": "getcwd"},{"import": 710,"src": 2855,"name": "setuid"},{"import": 947,"src": 2856,"name": "EAI_NODATA"},{"import": 710,"src": 2857,"name": "gettimeofday"},{"import": 947,"src": 2858,"name": "mach_absolute_time","kind": "const","type": 963,"value": 651},{"import": 710,"src": 2859,"name": "pthread_self"},{"import": 710,"src": 2860,"name": "fstat"},{"import": 710,"src": 2861,"name": "free"},{"import": 947,"src": 2862,"name": "sigaltstack"},{"import": 710,"src": 2863,"name": "rmdir"},{"import": 710,"src": 2864,"name": "openat"},{"import": 710,"src": 2865,"name": "isatty","kind": "const","type": 956,"value": 652},{"import": 710,"src": 2866,"name": "access"},{"import": 710,"src": 2867,"name": "fclose"},{"import": 710,"src": 2868,"name": "abort","kind": "const","type": 964,"value": 653},{"import": 947,"src": 2869,"name": "pthread_cond_t","kind": "const","type": 348,"value": 800},{"import": 710,"src": 2870,"name": "sigaction"},{"import": 947,"src": 2871,"name": "EAI_BADFLAGS"},{"import": 710,"src": 2872,"name": "writev"},{"import": 710,"src": 2873,"name": "realpath"},{"import": 710,"src": 2874,"name": "close"},{"import": 710,"src": 2875,"name": "waitpid"},{"import": 710,"src": 2876,"name": "utimes"},{"import": 710,"src": 2877,"name": "bind"},{"import": 947,"src": 2878,"name": "clock_get_time"},{"import": 710,"src": 2879,"name": "recvfrom"},{"import": 710,"src": 2880,"name": "realloc"},{"import": 947,"src": 2881,"name": "EAI_SERVICE"},{"import": 710,"src": 2882,"name": "malloc"},{"import": 710,"src": 2883,"name": "write","kind": "const","type": 965,"value": 654},{"import": 710,"src": 2884,"name": "clock_gettime"},{"import": 947,"src": 2885,"name": "sigaddset"},{"import": 947,"src": 2886,"name": "EAI_AGAIN"},{"import": 710,"src": 2887,"name": "pthread_t","kind": "const","type": 348,"value": 886},{"import": 710,"src": 2888,"name": "pthread_attr_setstack"},{"import": 947,"src": 2889,"name": "EAI_MAX"},{"import": 947,"src": 2890,"name": "_dyld_get_image_header"},{"import": 710,"src": 2891,"name": "preadv"},{"import": 710,"src": 2892,"name": "accept4"},{"import": 947,"src": 2893,"name": "EAI_SYSTEM"},{"import": 710,"src": 2894,"name": "pwritev"},{"import": 710,"src": 2895,"name": "futimes"},{"import": 710,"src": 2896,"name": "read","kind": "const","type": 966,"value": 655},{"import": 710,"src": 2897,"name": "rename"},{"import": 710,"src": 2898,"name": "clock_getres"},{"import": 710,"src": 2899,"name": "PTHREAD_MUTEX_INITIALIZER","kind": "const","type": 801,"value": null},{"import": 710,"src": 2900,"name": "page_size","kind": "const","type": 358,"value": null},{"import": 710,"src": 2901,"name": "std","kind": "const","type": 348,"value": 424},{"import": 710,"src": 2902,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 711,"src": 2903,"name": "eql"},{"import": 711,"src": 2904,"name": "bitCount"},{"import": 711,"src": 2905,"name": "declarations"},{"import": 711,"src": 2906,"name": "fieldIndex"},{"import": 711,"src": 2907,"name": "refAllDecls"},{"import": 711,"src": 2908,"name": "IntToEnumError"},{"import": 711,"src": 286,"name": "alignment","kind": "const","type": 388,"value": 544},{"import": 711,"src": 2909,"name": "fieldInfo"},{"import": 711,"src": 2910,"name": "activeTag"},{"import": 711,"src": 2911,"name": "declarationInfo"},{"import": 711,"src": 2912,"name": "trait","kind": "const","type": 348,"value": 877},{"import": 711,"src": 2913,"name": "TagType"},{"import": 711,"src": 2914,"name": "containerLayout"},{"import": 711,"src": 2915,"name": "tagName"},{"import": 711,"src": 2916,"name": "intToEnum"},{"import": 711,"src": 2917,"name": "TagPayloadType"},{"import": 711,"src": 2918,"name": "stringToEnum"},{"import": 711,"src": 2919,"name": "fields"},{"import": 711,"src": 294,"name": "Child","kind": "const","type": 409,"value": 553},{"import": 711,"src": 2920,"name": "mem"},{"import": 711,"src": 2921,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 711,"src": 2922,"name": "math"},{"import": 711,"src": 2923,"name": "std"},{"import": 711,"src": 2924,"name": "debug"},{"import": 711,"src": 2925,"name": "TypeId","kind": "const","type": 348,"value": 399},{"import": 711,"src": 2926,"name": "testing"},{"import": 711,"src": 2927,"name": "TypeInfo"},{"import": 712,"src": 2928,"name": "Walker"},{"import": 712,"src": 2929,"name": "makePath"},{"import": 712,"src": 2930,"name": "MAX_PATH_BYTES"},{"import": 712,"src": 2931,"name": "readLink"},{"import": 712,"src": 2932,"name": "deleteDirW"},{"import": 712,"src": 2933,"name": "walkPath"},{"import": 712,"src": 2934,"name": "realpath"},{"import": 712,"src": 2935,"name": "selfExePath"},{"import": 712,"src": 2936,"name": "updateFileMode"},{"import": 712,"src": 2937,"name": "GetAppDataDirError"},{"import": 712,"src": 2938,"name": "renameC"},{"import": 712,"src": 2939,"name": "deleteDir"},{"import": 712,"src": 2940,"name": "openSelfExe"},{"import": 712,"src": 2941,"name": "copyFile"},{"import": 712,"src": 2942,"name": "Dir"},{"import": 712,"src": 2943,"name": "symLink"},{"import": 712,"src": 2944,"name": "path","kind": "const","type": 348,"value": 967},{"import": 712,"src": 2945,"name": "copyFileMode"},{"import": 712,"src": 2946,"name": "realpathAlloc"},{"import": 712,"src": 2947,"name": "deleteTree"},{"import": 712,"src": 2948,"name": "SelfExePathError"},{"import": 712,"src": 2949,"name": "renameW"},{"import": 712,"src": 2950,"name": "makeDir"},{"import": 712,"src": 2951,"name": "selfExeDirPathAlloc"},{"import": 712,"src": 2952,"name": "rename"},{"import": 712,"src": 2953,"name": "symLinkC"},{"import": 712,"src": 2954,"name": "OpenSelfExeError"},{"import": 712,"src": 2955,"name": "AtomicFile"},{"import": 712,"src": 2956,"name": "makeDirW"},{"import": 712,"src": 2957,"name": "updateFile"},{"import": 712,"src": 2958,"name": "File","kind": "const","type": 348,"value": 458},{"import": 712,"src": 2959,"name": "realpathC"},{"import": 712,"src": 2960,"name": "getAppDataDir"},{"import": 712,"src": 2961,"name": "realpathW"},{"import": 712,"src": 2962,"name": "selfExePathW"},{"import": 712,"src": 2963,"name": "selfExeDirPath"},{"import": 712,"src": 2964,"name": "deleteFile"},{"import": 712,"src": 2965,"name": "deleteDirC"},{"import": 712,"src": 2966,"name": "makeDirC"},{"import": 712,"src": 2967,"name": "atomicSymLink"},{"import": 712,"src": 2968,"name": "deleteFileC"},{"import": 712,"src": 2969,"name": "readLinkC"},{"import": 712,"src": 2970,"name": "builtin"},{"import": 712,"src": 2971,"name": "b64_fs_encoder"},{"import": 712,"src": 2972,"name": "os"},{"import": 712,"src": 2973,"name": "Allocator"},{"import": 712,"src": 2974,"name": "base64"},{"import": 712,"src": 2975,"name": "crypto"},{"import": 712,"src": 2976,"name": "std"},{"import": 712,"src": 2977,"name": "default_new_dir_mode"},{"import": 712,"src": 2978,"name": "PrevStatus"},{"import": 712,"src": 2979,"name": "assert"},{"import": 712,"src": 2980,"name": "mem"},{"import": 713,"src": 2981,"name": "ThreadSafeFixedBufferAllocator"},{"import": 713,"src": 2982,"name": "LoggingAllocator"},{"import": 713,"src": 2983,"name": "FixedBufferAllocator","kind": "const","type": 348,"value": 431},{"import": 713,"src": 2984,"name": "stackFallback"},{"import": 713,"src": 2985,"name": "ArenaAllocator","kind": "const","type": 348,"value": 552},{"import": 713,"src": 2986,"name": "wasm_allocator"},{"import": 713,"src": 2987,"name": "HeapAllocator"},{"import": 713,"src": 2988,"name": "c_allocator"},{"import": 713,"src": 2989,"name": "direct_allocator","kind": "const","type": 432,"value": null},{"import": 713,"src": 2990,"name": "StackFallbackAllocator"},{"import": 713,"src": 2991,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 713,"src": 2992,"name": "testAllocatorAligned"},{"import": 713,"src": 2993,"name": "testAllocatorAlignedShrink"},{"import": 713,"src": 2994,"name": "llvm.wasm.memory.size.i32"},{"import": 713,"src": 2995,"name": "maxInt"},{"import": 713,"src": 2996,"name": "WasmAllocator"},{"import": 713,"src": 2997,"name": "std","kind": "const","type": 348,"value": 424},{"import": 713,"src": 2998,"name": "c"},{"import": 713,"src": 2999,"name": "testAllocator"},{"import": 713,"src": 3000,"name": "cShrink"},{"import": 713,"src": 3001,"name": "cRealloc"},{"import": 713,"src": 3002,"name": "test_fixed_buffer_allocator_memory"},{"import": 713,"src": 3003,"name": "wasm_allocator_state"},{"import": 713,"src": 3004,"name": "testAllocatorLargeAlignment"},{"import": 713,"src": 3005,"name": "os","kind": "const","type": 348,"value": 699},{"import": 713,"src": 3006,"name": "debug","kind": "const","type": 348,"value": 700},{"import": 713,"src": 3007,"name": "llvm.wasm.memory.grow.i32"},{"import": 713,"src": 3008,"name": "testing"},{"import": 713,"src": 3009,"name": "c_allocator_state"},{"import": 713,"src": 3010,"name": "DirectAllocator","kind": "const","type": 348,"value": 968},{"import": 713,"src": 3011,"name": "direct_allocator_state","kind": "var","type": 675,"value": null},{"import": 713,"src": 3012,"name": "Allocator","kind": "const","type": 348,"value": 675},{"import": 713,"src": 3013,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 713,"src": 3014,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 714,"src": 3015,"name": "Timer","kind": "const","type": 348,"value": 811},{"import": 714,"src": 3016,"name": "microsecond","kind": "const","type": 358,"value": null},{"import": 714,"src": 3017,"name": "milliTimestamp"},{"import": 714,"src": 3018,"name": "s_per_day"},{"import": 714,"src": 225,"name": "sleep","kind": "const","type": 279,"value": 382},{"import": 714,"src": 3019,"name": "s_per_week"},{"import": 714,"src": 3020,"name": "hour"},{"import": 714,"src": 3021,"name": "ns_per_s","kind": "const","type": 358,"value": null},{"import": 714,"src": 3022,"name": "s_per_hour"},{"import": 714,"src": 3023,"name": "nanosecond","kind": "const","type": 358,"value": null},{"import": 714,"src": 3024,"name": "second"},{"import": 714,"src": 3025,"name": "timestamp"},{"import": 714,"src": 3026,"name": "epoch"},{"import": 714,"src": 3027,"name": "minute"},{"import": 714,"src": 3028,"name": "millisecond","kind": "const","type": 358,"value": null},{"import": 714,"src": 3029,"name": "s_per_min"},{"import": 714,"src": 3030,"name": "ms_per_s"},{"import": 714,"src": 3031,"name": "us_per_s"},{"import": 714,"src": 3032,"name": "cs_per_s"},{"import": 714,"src": 3033,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 714,"src": 3034,"name": "math"},{"import": 714,"src": 3035,"name": "std","kind": "const","type": 348,"value": 424},{"import": 714,"src": 3036,"name": "os","kind": "const","type": 348,"value": 699},{"import": 714,"src": 3037,"name": "testing"},{"import": 714,"src": 3038,"name": "assert"},{"import": 812,"src": 257,"name": "start","kind": "const","type": 314,"value": 449},{"import": 812,"src": 264,"name": "log","kind": "const","type": 969,"value": 656},{"import": 812,"src": 262,"name": "refresh","kind": "const","type": 318,"value": 454},{"import": 812,"src": 3039,"name": "Node","kind": "const","type": 348,"value": 606},{"import": 812,"src": 269,"name": "maybeRefresh","kind": "const","type": 318,"value": 474},{"import": 812,"src": 267,"name": "bufWrite","kind": "const","type": 970,"value": 657},{"import": 973,"src": 3040,"name": "Backoff"},{"import": 973,"src": 3041,"name": "acquire"},{"import": 973,"src": 3042,"name": "init"},{"import": 973,"src": 3043,"name": "Held"},{"import": 973,"src": 223,"name": "yield","kind": "const","type": 234,"value": 380},{"import": 717,"src": 3044,"name": "getCwdAlloc"},{"import": 717,"src": 3045,"name": "getEnvMap"},{"import": 717,"src": 3046,"name": "exit"},{"import": 717,"src": 3047,"name": "changeCurDir"},{"import": 717,"src": 3048,"name": "ArgIterator"},{"import": 717,"src": 3049,"name": "ArgIteratorPosix"},{"import": 717,"src": 3050,"name": "argsFree"},{"import": 717,"src": 77,"name": "getBaseAddress","kind": "const","type": 81,"value": 105},{"import": 717,"src": 3051,"name": "posixGetUserInfo"},{"import": 717,"src": 3052,"name": "changeCurDirC"},{"import": 717,"src": 3053,"name": "argsAlloc"},{"import": 717,"src": 3054,"name": "UserInfo"},{"import": 717,"src": 3055,"name": "getCwd"},{"import": 717,"src": 168,"name": "getEnvVarOwned","kind": "const","type": 199,"value": 243},{"import": 717,"src": 3056,"name": "ArgIteratorWindows"},{"import": 717,"src": 3057,"name": "GetEnvVarOwnedError","kind": "const","type": 348,"value": 785},{"import": 717,"src": 3058,"name": "getUserInfo"},{"import": 717,"src": 3059,"name": "abort"},{"import": 717,"src": 3060,"name": "args"},{"import": 717,"src": 3061,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 717,"src": 3062,"name": "BufMap"},{"import": 717,"src": 3063,"name": "math"},{"import": 717,"src": 3064,"name": "testWindowsCmdLine"},{"import": 717,"src": 3065,"name": "std","kind": "const","type": 348,"value": 424},{"import": 717,"src": 3066,"name": "os","kind": "const","type": 348,"value": 699},{"import": 717,"src": 3067,"name": "Buffer"},{"import": 717,"src": 3068,"name": "testing"},{"import": 717,"src": 3069,"name": "fs"},{"import": 717,"src": 3070,"name": "Allocator"},{"import": 717,"src": 3071,"name": "assert"},{"import": 717,"src": 3072,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 718,"src": 3073,"name": "N_OLEVEL"},{"import": 718,"src": 3074,"name": "MH_NOUNDEFS"},{"import": 718,"src": 3075,"name": "LC_SEGMENT_SPLIT_INFO"},{"import": 718,"src": 3076,"name": "LC_DYLD_INFO_ONLY"},{"import": 718,"src": 3077,"name": "MH_HAS_TLV_DESCRIPTORS"},{"import": 718,"src": 3078,"name": "LC_FVMFILE"},{"import": 718,"src": 3079,"name": "N_GSYM"},{"import": 718,"src": 3080,"name": "S_4BYTE_LITERALS"},{"import": 718,"src": 3081,"name": "LC_SUB_UMBRELLA"},{"import": 718,"src": 3082,"name": "LC_FUNCTION_STARTS"},{"import": 718,"src": 3083,"name": "LC_UNIXTHREAD"},{"import": 718,"src": 3084,"name": "LC_TWOLEVEL_HINTS"},{"import": 718,"src": 3085,"name": "LC_VERSION_MIN_TVOS"},{"import": 718,"src": 3086,"name": "N_PEXT"},{"import": 718,"src": 3087,"name": "SECTION_ATTRIBUTES","kind": "const","type": 358,"value": null},{"import": 718,"src": 3088,"name": "N_LBRAC"},{"import": 718,"src": 3089,"name": "segment_command"},{"import": 718,"src": 3090,"name": "mach_header"},{"import": 718,"src": 3091,"name": "N_ENTRY"},{"import": 718,"src": 3092,"name": "LC_PREBOUND_DYLIB"},{"import": 718,"src": 3093,"name": "MH_SETUID_SAFE"},{"import": 718,"src": 3094,"name": "MH_DYLDLINK"},{"import": 718,"src": 3095,"name": "N_OPT"},{"import": 718,"src": 3096,"name": "S_8BYTE_LITERALS"},{"import": 718,"src": 3097,"name": "MH_PRELOAD"},{"import": 718,"src": 3098,"name": "N_LENG"},{"import": 718,"src": 3099,"name": "MH_DYLIB"},{"import": 718,"src": 3100,"name": "N_BNSYM","kind": "const","type": 358,"value": null},{"import": 718,"src": 3101,"name": "S_CSTRING_LITERALS"},{"import": 718,"src": 3102,"name": "section_64","kind": "const","type": 348,"value": 974},{"import": 718,"src": 3103,"name": "LC_SUB_CLIENT"},{"import": 718,"src": 3104,"name": "MH_BUNDLE"},{"import": 718,"src": 3105,"name": "N_ECOML"},{"import": 718,"src": 3106,"name": "LC_ROUTINES_64"},{"import": 718,"src": 3107,"name": "LC_ENCRYPTION_INFO"},{"import": 718,"src": 3108,"name": "MH_WEAK_DEFINES"},{"import": 718,"src": 3109,"name": "MH_FORCE_FLAT"},{"import": 718,"src": 3110,"name": "MH_SUBSECTIONS_VIA_SYMBOLS"},{"import": 718,"src": 3111,"name": "MH_DYLINKER"},{"import": 718,"src": 3112,"name": "MH_DEAD_STRIPPABLE_DYLIB"},{"import": 718,"src": 3113,"name": "LC_DYSYMTAB"},{"import": 718,"src": 3114,"name": "symtab_command","kind": "const","type": 348,"value": 975},{"import": 718,"src": 3115,"name": "LC_PREPAGE"},{"import": 718,"src": 3116,"name": "MH_NO_REEXPORTED_DYLIBS"},{"import": 718,"src": 3117,"name": "LC_THREAD"},{"import": 718,"src": 3118,"name": "N_EXT"},{"import": 718,"src": 3119,"name": "N_SLINE"},{"import": 718,"src": 3120,"name": "LC_LINKER_OPTION"},{"import": 718,"src": 3121,"name": "MH_MAGIC"},{"import": 718,"src": 3122,"name": "N_FUN","kind": "const","type": 358,"value": null},{"import": 718,"src": 3123,"name": "MH_NO_HEAP_EXECUTION"},{"import": 718,"src": 3124,"name": "cpu_type_t","kind": "const","type": 348,"value": 471},{"import": 718,"src": 3125,"name": "MH_INCRLINK"},{"import": 718,"src": 3126,"name": "LC_VERSION_MIN_WATCHOS"},{"import": 718,"src": 3127,"name": "MH_APP_EXTENSION_SAFE"},{"import": 718,"src": 3128,"name": "N_RSYM"},{"import": 718,"src": 3129,"name": "LC_DATA_IN_CODE"},{"import": 718,"src": 3130,"name": "MH_FVMLIB"},{"import": 718,"src": 3131,"name": "MH_ALLOW_STACK_EXECUTION"},{"import": 718,"src": 3132,"name": "N_LSYM"},{"import": 718,"src": 3133,"name": "LC_REEXPORT_DYLIB"},{"import": 718,"src": 3134,"name": "N_STSYM"},{"import": 718,"src": 3135,"name": "MH_PIE"},{"import": 718,"src": 3136,"name": "integer_t","kind": "const","type": 348,"value": 471},{"import": 718,"src": 3137,"name": "LC_DYLD_INFO"},{"import": 718,"src": 3138,"name": "LC_ENCRYPTION_INFO_64"},{"import": 718,"src": 3139,"name": "MH_EXECUTE"},{"import": 718,"src": 3140,"name": "MH_CIGAM"},{"import": 718,"src": 3141,"name": "LC_SEGMENT_64","kind": "const","type": 358,"value": null},{"import": 718,"src": 3142,"name": "MH_BINDS_TO_WEAK"},{"import": 718,"src": 3143,"name": "LC_LOADFVMLIB"},{"import": 718,"src": 3144,"name": "MH_BINDATLOAD"},{"import": 718,"src": 3145,"name": "MH_NOMULTIDEFS"},{"import": 718,"src": 3146,"name": "LC_VERSION_MIN_IPHONEOS"},{"import": 718,"src": 3147,"name": "segment_command_64","kind": "const","type": 348,"value": 976},{"import": 718,"src": 3148,"name": "mach_header_64","kind": "const","type": 348,"value": 950},{"import": 718,"src": 3149,"name": "LC_BUILD_VERSION"},{"import": 718,"src": 3150,"name": "N_EXCL"},{"import": 718,"src": 3151,"name": "MH_TWOLEVEL"},{"import": 718,"src": 3152,"name": "nlist_64","kind": "const","type": 348,"value": 637},{"import": 718,"src": 3153,"name": "MH_PREBINDABLE"},{"import": 718,"src": 3154,"name": "MH_NLIST_OUTOFSYNC_WITH_DYLDINFO"},{"import": 718,"src": 3155,"name": "S_ATTR_DEBUG","kind": "const","type": 358,"value": null},{"import": 718,"src": 3156,"name": "LC_SUB_LIBRARY"},{"import": 718,"src": 3157,"name": "LC_UUID"},{"import": 718,"src": 3158,"name": "MH_DYLIB_STUB"},{"import": 718,"src": 3159,"name": "LC_SYMTAB","kind": "const","type": 358,"value": null},{"import": 718,"src": 3160,"name": "cpu_subtype_t","kind": "const","type": 348,"value": 471},{"import": 718,"src": 3161,"name": "N_RBRAC"},{"import": 718,"src": 3162,"name": "S_ZEROFILL"},{"import": 718,"src": 3163,"name": "LC_SOURCE_VERSION"},{"import": 718,"src": 3164,"name": "LC_ID_DYLINKER"},{"import": 718,"src": 3165,"name": "LC_VERSION_MIN_MACOSX"},{"import": 718,"src": 3166,"name": "nlist"},{"import": 718,"src": 3167,"name": "LC_NOTE"},{"import": 718,"src": 3168,"name": "N_FNAME"},{"import": 718,"src": 3169,"name": "SECTION_TYPE","kind": "const","type": 358,"value": null},{"import": 718,"src": 3170,"name": "S_REGULAR","kind": "const","type": 358,"value": null},{"import": 718,"src": 3171,"name": "MH_CIGAM_64"},{"import": 718,"src": 3172,"name": "LC_LOAD_UPWARD_DYLIB"},{"import": 718,"src": 3173,"name": "MH_ALLMODSBOUND"},{"import": 718,"src": 3174,"name": "LC_IDFVMLIB"},{"import": 718,"src": 3175,"name": "MH_SPLIT_SEGS"},{"import": 718,"src": 3176,"name": "MH_LAZY_INIT"},{"import": 718,"src": 3177,"name": "N_BINCL"},{"import": 718,"src": 3178,"name": "MH_ROOT_SAFE"},{"import": 718,"src": 3179,"name": "vm_prot_t","kind": "const","type": 348,"value": 471},{"import": 718,"src": 3180,"name": "LC_DYLD_ENVIRONMENT"},{"import": 718,"src": 3181,"name": "LC_IDENT"},{"import": 718,"src": 3182,"name": "N_AST"},{"import": 718,"src": 3183,"name": "LC_CODE_SIGNATURE"},{"import": 718,"src": 3184,"name": "LC_SUB_FRAMEWORK"},{"import": 718,"src": 3185,"name": "N_SO"},{"import": 718,"src": 3186,"name": "load_command","kind": "const","type": 348,"value": 977},{"import": 718,"src": 3187,"name": "MH_MAGIC_64","kind": "const","type": 358,"value": null},{"import": 718,"src": 3188,"name": "LC_ID_DYLIB"},{"import": 718,"src": 3189,"name": "LC_RPATH"},{"import": 718,"src": 3190,"name": "MH_CORE"},{"import": 718,"src": 3191,"name": "MH_PREBOUND"},{"import": 718,"src": 3192,"name": "MH_NOFIXPREBINDING"},{"import": 718,"src": 3193,"name": "section"},{"import": 718,"src": 3194,"name": "N_SOL"},{"import": 718,"src": 3195,"name": "N_ECOMM"},{"import": 718,"src": 3196,"name": "N_LCSYM"},{"import": 718,"src": 3197,"name": "LC_SYMSEG"},{"import": 718,"src": 3198,"name": "N_PSYM"},{"import": 718,"src": 3199,"name": "N_VERSION"},{"import": 718,"src": 3200,"name": "N_BCOMM"},{"import": 718,"src": 3201,"name": "LC_LAZY_LOAD_DYLIB"},{"import": 718,"src": 3202,"name": "N_EINCL"},{"import": 718,"src": 3203,"name": "MH_DSYM"},{"import": 718,"src": 3204,"name": "N_STAB","kind": "const","type": 358,"value": null},{"import": 718,"src": 3205,"name": "LC_REQ_DYLD"},{"import": 718,"src": 3206,"name": "LC_SEGMENT"},{"import": 718,"src": 3207,"name": "LC_PREBIND_CKSUM"},{"import": 718,"src": 3208,"name": "LC_MAIN"},{"import": 718,"src": 3209,"name": "N_ENSYM"},{"import": 718,"src": 3210,"name": "LC_LINKER_OPTIMIZATION_HINT"},{"import": 718,"src": 3211,"name": "N_TYPE"},{"import": 718,"src": 3212,"name": "LC_DYLIB_CODE_SIGN_DRS"},{"import": 718,"src": 3213,"name": "LC_ROUTINES"},{"import": 718,"src": 3214,"name": "S_LITERAL_POINTERS"},{"import": 718,"src": 3215,"name": "N_OSO","kind": "const","type": 358,"value": null},{"import": 718,"src": 3216,"name": "MH_OBJECT"},{"import": 718,"src": 3217,"name": "LC_LOAD_DYLINKER"},{"import": 718,"src": 3218,"name": "LC_LOAD_DYLIB"},{"import": 718,"src": 3219,"name": "N_PARAMS"},{"import": 718,"src": 3220,"name": "MH_KEXT_BUNDLE"},{"import": 718,"src": 3221,"name": "N_SSYM"},{"import": 718,"src": 3222,"name": "MH_CANONICAL"},{"import": 718,"src": 3223,"name": "LC_LOAD_WEAK_DYLIB"},{"import": 718,"src": 3224,"name": "linkedit_data_command"},{"import": 731,"src": 3225,"name": "File","kind": "const","type": 348,"value": 458},{"import": 731,"src": 3226,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 731,"src": 3227,"name": "windows","kind": "const","type": 348,"value": 894},{"import": 731,"src": 3228,"name": "maxInt"},{"import": 731,"src": 3229,"name": "math"},{"import": 731,"src": 3230,"name": "io","kind": "const","type": 348,"value": 703},{"import": 731,"src": 3231,"name": "std","kind": "const","type": 348,"value": 424},{"import": 731,"src": 3232,"name": "os","kind": "const","type": 348,"value": 699},{"import": 731,"src": 3233,"name": "Os","kind": "const","type": 348,"value": 373},{"import": 731,"src": 3234,"name": "assert"},{"import": 731,"src": 3235,"name": "mem"},{"import": 796,"src": 3236,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 796,"src": 3237,"name": "wstatus"},{"import": 796,"src": 3238,"name": "std","kind": "const","type": 348,"value": 424},{"import": 796,"src": 3239,"name": "wstopped"},{"import": 796,"src": 3240,"name": "maxInt","kind": "const","type": 357,"value": 532},{"import": 798,"src": 3241,"name": "Mutex","kind": "const","type": 348,"value": 581},{"import": 798,"src": 3242,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 798,"src": 3243,"name": "std","kind": "const","type": 348,"value": 424},{"import": 798,"src": 3244,"name": "SpinLock","kind": "const","type": 348,"value": 716},{"import": 798,"src": 3245,"name": "ThreadParker","kind": "const","type": 348,"value": 582},{"import": 798,"src": 3246,"name": "worker"},{"import": 798,"src": 3247,"name": "testing"},{"import": 798,"src": 3248,"name": "TestContext"},{"import": 799,"src": 3249,"name": "ThreadParker","kind": "const","type": 348,"value": 582},{"import": 799,"src": 3250,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 799,"src": 3251,"name": "time"},{"import": 799,"src": 3252,"name": "PosixParker","kind": "const","type": 348,"value": 582},{"import": 799,"src": 3253,"name": "windows"},{"import": 799,"src": 3254,"name": "SpinParker"},{"import": 799,"src": 3255,"name": "std","kind": "const","type": 348,"value": 424},{"import": 799,"src": 3256,"name": "WindowsParker"},{"import": 799,"src": 3257,"name": "SpinLock"},{"import": 799,"src": 3258,"name": "LinuxParker"},{"import": 799,"src": 3259,"name": "testing"},{"import": 799,"src": 3260,"name": "assert","kind": "const","type": 4,"value": 7},{"import": 799,"src": 3261,"name": "linux"},{"import": 802,"src": 3262,"name": "Wyhash","kind": "const","type": 348,"value": 585},{"import": 802,"src": 235,"name": "mix0","kind": "const","type": 289,"value": 404},{"import": 802,"src": 237,"name": "read_8bytes_swapped","kind": "const","type": 110,"value": 408},{"import": 802,"src": 3263,"name": "primes","kind": "const","type": 981,"value": null},{"import": 802,"src": 239,"name": "mum","kind": "const","type": 290,"value": 410},{"import": 802,"src": 238,"name": "mix1","kind": "const","type": 289,"value": 409},{"import": 802,"src": 3264,"name": "expectEqual"},{"import": 802,"src": 3265,"name": "std","kind": "const","type": 348,"value": 424},{"import": 802,"src": 3266,"name": "WyhashStateless","kind": "const","type": 348,"value": 590},{"import": 802,"src": 236,"name": "read_bytes","kind": "const","type": 982,"value": 658},{"import": 802,"src": 3267,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 706,"src": 3268,"name": "Stream","kind": "const","type": 348,"value": 413},{"import": 706,"src": 3269,"name": "Error","kind": "const","type": 348,"value": 414},{"import": 706,"src": 248,"name": "read","kind": "const","type": 304,"value": 437},{"import": 706,"src": 3270,"name": "getSize"},{"import": 706,"src": 3271,"name": "readNullTermString"},{"import": 706,"src": 3272,"name": "seekBy"},{"import": 706,"src": 3273,"name": "seekTo"},{"import": 706,"src": 3274,"name": "init"},{"import": 706,"src": 3275,"name": "readFn"},{"import": 706,"src": 3276,"name": "getFilePos"},{"import": 714,"src": 3277,"name": "reset"},{"import": 714,"src": 268,"name": "read","kind": "const","type": 328,"value": 472},{"import": 714,"src": 3278,"name": "lap"},{"import": 714,"src": 259,"name": "start","kind": "const","type": 315,"value": 451},{"import": 714,"src": 3279,"name": "Error","kind": "const","type": 348,"value": 810},{"import": 714,"src": 272,"name": "clockNative","kind": "const","type": 336,"value": 491},{"import": 714,"src": 3280,"name": "monotonic_clock_id"},{"import": 812,"src": 3281,"name": "Progress","kind": "const","type": 348,"value": 715},{"import": 812,"src": 3282,"name": "std","kind": "const","type": 348,"value": 424},{"import": 812,"src": 3283,"name": "assert"},{"import": 812,"src": 3284,"name": "testing"},{"import": 621,"src": 3285,"name": "start"},{"import": 621,"src": 3286,"name": "finish"},{"import": 621,"src": 3287,"name": "setHandle"},{"import": 621,"src": 3288,"name": "getHandle"},{"import": 621,"src": 3289,"name": "clearHandle"},{"import": 621,"src": 3290,"name": "initOsDataPosix"},{"import": 621,"src": 3291,"name": "OsDataPosix","kind": "const","type": 348,"value": 984},{"import": 621,"src": 3292,"name": "OsData","kind": "const","type": 348,"value": 984},{"import": 848,"src": 3293,"name": "startCpuBoundOperation"},{"import": 848,"src": 3294,"name": "finishOneEvent"},{"import": 848,"src": 3295,"name": "instance","kind": "const","type": 986,"value": null},{"import": 848,"src": 3296,"name": "onNextTick"},{"import": 848,"src": 3297,"name": "initSingleThreaded"},{"import": 848,"src": 3298,"name": "beginOneEvent"},{"import": 848,"src": 3299,"name": "deinit"},{"import": 848,"src": 3300,"name": "linuxModFd"},{"import": 848,"src": 3301,"name": "call"},{"import": 848,"src": 3302,"name": "yield"},{"import": 848,"src": 3303,"name": "waitUntilFdWritable"},{"import": 848,"src": 3304,"name": "linuxRemoveFd"},{"import": 848,"src": 3305,"name": "ResumeNode","kind": "const","type": 348,"value": 669},{"import": 848,"src": 3306,"name": "run"},{"import": 848,"src": 3307,"name": "bsdRemoveKev"},{"import": 848,"src": 3308,"name": "initMultiThreaded"},{"import": 848,"src": 3309,"name": "bsdAddKev"},{"import": 848,"src": 3310,"name": "bsdWaitKev"},{"import": 848,"src": 3311,"name": "cancelOnNextTick"},{"import": 848,"src": 3312,"name": "linuxWaitFd"},{"import": 848,"src": 3313,"name": "waitUntilFdWritableOrReadable"},{"import": 848,"src": 3314,"name": "NextTickNode","kind": "const","type": 348,"value": 616},{"import": 848,"src": 3315,"name": "init"},{"import": 848,"src": 3316,"name": "waitUntilFdReadable"},{"import": 848,"src": 3317,"name": "initThreadPool"},{"import": 848,"src": 3318,"name": "linuxAddFd"},{"import": 848,"src": 3319,"name": "posixFsRequest"},{"import": 848,"src": 3320,"name": "initOsData"},{"import": 848,"src": 3321,"name": "global_instance_state"},{"import": 848,"src": 3322,"name": "default_instance","kind": "const","type": 986,"value": null},{"import": 848,"src": 3323,"name": "InitOsDataError"},{"import": 848,"src": 3324,"name": "deinitOsData"},{"import": 848,"src": 3325,"name": "posixFsRun"},{"import": 848,"src": 3326,"name": "OsData","kind": "const","type": 348,"value": 987},{"import": 848,"src": 3327,"name": "posixFsCancel"},{"import": 848,"src": 3328,"name": "workerRun"},{"import": 848,"src": 3329,"name": "KEventData","kind": "const","type": 348,"value": 987},{"import": 848,"src": 3330,"name": "LinuxOsData"},{"import": 848,"src": 3331,"name": "dispatch"},{"import": 848,"src": 3332,"name": "wakeup_bytes"},{"import": 621,"src": 3333,"name": "Error","kind": "const","type": 348,"value": 732},{"import": 621,"src": 3334,"name": "Error","kind": "const","type": 348,"value": 991},{"import": 621,"src": 3335,"name": "Error","kind": "const","type": 348,"value": 368},{"import": 621,"src": 3336,"name": "Error","kind": "const","type": 348,"value": 368},{"import": 621,"src": 3337,"name": "Error","kind": "const","type": 348,"value": 417},{"import": 835,"src": 3338,"name": "main"},{"import": 835,"src": 3339,"name": "builtin"},{"import": 835,"src": 3340,"name": "io"},{"import": 835,"src": 3341,"name": "std"},{"import": 835,"src": 3342,"name": "test_fn_list"},{"import": 644,"src": 3343,"name": "FnDecl","kind": "const","type": 348,"value": 995},{"import": 848,"src": 3344,"name": "Loop","kind": "const","type": 348,"value": 820},{"import": 848,"src": 3345,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 848,"src": 3346,"name": "root","kind": "const","type": 348,"value": 835},{"import": 848,"src": 3347,"name": "AtomicRmwOp"},{"import": 848,"src": 3348,"name": "testEventLoop2"},{"import": 848,"src": 3349,"name": "windows","kind": "const","type": 348,"value": 894},{"import": 848,"src": 3350,"name": "maxInt"},{"import": 848,"src": 3351,"name": "Thread","kind": "const","type": 348,"value": 698},{"import": 848,"src": 3352,"name": "std","kind": "const","type": 348,"value": 424},{"import": 848,"src": 3353,"name": "testEventLoop"},{"import": 848,"src": 3354,"name": "os","kind": "const","type": 348,"value": 699},{"import": 848,"src": 3355,"name": "AtomicOrder"},{"import": 848,"src": 3356,"name": "assert"},{"import": 848,"src": 3357,"name": "testing"},{"import": 848,"src": 3358,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 848,"src": 3359,"name": "fs","kind": "const","type": 348,"value": 621},{"import": 877,"src": 280,"name": "isSlice","kind": "const","type": 369,"value": 537},{"import": 877,"src": 3360,"name": "hasFn"},{"import": 877,"src": 3361,"name": "isExtern"},{"import": 877,"src": 3362,"name": "isContainer"},{"import": 877,"src": 288,"name": "isSingleItemPtr","kind": "const","type": 393,"value": 546},{"import": 877,"src": 3363,"name": "multiTrait"},{"import": 877,"src": 3364,"name": "isNumber"},{"import": 877,"src": 290,"name": "is","kind": "const","type": 397,"value": 548},{"import": 877,"src": 3365,"name": "isUnsignedInt"},{"import": 877,"src": 3366,"name": "TraitFn","kind": "const","type": 348,"value": 398},{"import": 877,"src": 3367,"name": "isManyItemPtr"},{"import": 877,"src": 3368,"name": "isSignedInt"},{"import": 877,"src": 3369,"name": "isIndexable"},{"import": 877,"src": 3370,"name": "isPtrTo"},{"import": 877,"src": 3371,"name": "isPacked"},{"import": 877,"src": 3372,"name": "TraitList"},{"import": 877,"src": 3373,"name": "hasField"},{"import": 877,"src": 297,"name": "isConstPtr","kind": "const","type": 415,"value": 556},{"import": 877,"src": 3374,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 877,"src": 3375,"name": "std"},{"import": 877,"src": 3376,"name": "debug"},{"import": 877,"src": 3377,"name": "meta"},{"import": 877,"src": 3378,"name": "testing"},{"import": 877,"src": 3379,"name": "traitFnWorkaround","kind": "const","type": 398,"value": 659},{"import": 877,"src": 3380,"name": "warn"},{"import": 877,"src": 3381,"name": "mem"},{"import": 884,"src": 3382,"name": "Thread","kind": "const","type": 348,"value": 698},{"import": 884,"src": 3383,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 884,"src": 3384,"name": "std","kind": "const","type": 348,"value": 424},{"import": 884,"src": 3385,"name": "c","kind": "const","type": 348,"value": 710},{"import": 884,"src": 3386,"name": "os"},{"import": 884,"src": 3387,"name": "windows","kind": "const","type": 348,"value": 894},{"import": 884,"src": 3388,"name": "assert"},{"import": 884,"src": 3389,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 887,"src": 3390,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 891,"src": 3391,"name": "std","kind": "const","type": 348,"value": 424},{"import": 891,"src": 3392,"name": "builtin"},{"import": 999,"src": 3393,"name": "EXCEPTION_DATATYPE_MISALIGNMENT"},{"import": 999,"src": 3394,"name": "MEM_RESERVE_PLACEHOLDERS"},{"import": 999,"src": 3395,"name": "FILE_ACTION_MODIFIED"},{"import": 999,"src": 3396,"name": "OBJ_KERNEL_HANDLE"},{"import": 894,"src": 3397,"name": "WaitForSingleObjectError"},{"import": 999,"src": 3398,"name": "STARTF_RUNFULLSCREEN"},{"import": 999,"src": 3399,"name": "FileCompressionInfo"},{"import": 999,"src": 3400,"name": "PSECURITY_ATTRIBUTES"},{"import": 999,"src": 3401,"name": "CREATE_UNICODE_ENVIRONMENT"},{"import": 999,"src": 3402,"name": "FILE_NOTIFY_INFORMATION"},{"import": 999,"src": 3403,"name": "EXCEPTION_POINTERS"},{"import": 894,"src": 3404,"name": "fromSysTime"},{"import": 999,"src": 3405,"name": "RTL_DRIVE_LETTER_CURDIR"},{"import": 999,"src": 3406,"name": "FILE_TRANSACTED_MODE"},{"import": 894,"src": 3407,"name": "CreateIoCompletionPort"},{"import": 894,"src": 3408,"name": "RtlGenRandomError"},{"import": 999,"src": 3409,"name": "COINIT_DISABLE_OLE1DDE"},{"import": 999,"src": 3410,"name": "KF_FLAG_NOT_PARENT_RELATIVE"},{"import": 999,"src": 3411,"name": "WIN32_FIND_DATAW"},{"import": 999,"src": 3412,"name": "FILE_OPEN"},{"import": 999,"src": 3413,"name": "FileFullDirectoryInfo"},{"import": 894,"src": 3414,"name": "FindFirstFile"},{"import": 999,"src": 3415,"name": "E_UNEXPECTED"},{"import": 999,"src": 3416,"name": "LPCTSTR"},{"import": 999,"src": 3417,"name": "EXCEPTION_ACCESS_VIOLATION"},{"import": 999,"src": 3418,"name": "WCHAR"},{"import": 999,"src": 3419,"name": "BOOL"},{"import": 999,"src": 3420,"name": "FILE_NAME_INFORMATION"},{"import": 999,"src": 3421,"name": "WRITE_DAC"},{"import": 999,"src": 3422,"name": "FILE_FLAG_OVERLAPPED"},{"import": 999,"src": 3423,"name": "FILE_ACCESS_INFORMATION"},{"import": 999,"src": 3424,"name": "OBJ_OPENIF"},{"import": 999,"src": 3425,"name": "NTSTATUS"},{"import": 894,"src": 3426,"name": "WriteFile"},{"import": 999,"src": 3427,"name": "PHKEY"},{"import": 999,"src": 3428,"name": "FILE_NAME_NORMALIZED"},{"import": 894,"src": 3429,"name": "HeapDestroy"},{"import": 999,"src": 3430,"name": "HANDLE","kind": "const","type": 348,"value": 893},{"import": 894,"src": 3431,"name": "CreateProcessError"},{"import": 999,"src": 3432,"name": "LANG"},{"import": 999,"src": 3433,"name": "FILE_MAXIMUM_DISPOSITION"},{"import": 999,"src": 3434,"name": "KF_FLAG_CREATE"},{"import": 999,"src": 3435,"name": "VOLUME_NAME_NT"},{"import": 999,"src": 3436,"name": "VECTORED_EXCEPTION_HANDLER"},{"import": 999,"src": 3437,"name": "FILE_ATTRIBUTE_ENCRYPTED"},{"import": 999,"src": 3438,"name": "UINT"},{"import": 999,"src": 3439,"name": "FILE_NO_EA_KNOWLEDGE"},{"import": 999,"src": 3440,"name": "COINIT_SPEED_OVER_MEMORY"},{"import": 999,"src": 3441,"name": "PAGE_TARGETS_INVALID"},{"import": 999,"src": 3442,"name": "FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS"},{"import": 894,"src": 3443,"name": "CloseHandle"},{"import": 999,"src": 3444,"name": "HEAP_NO_SERIALIZE"},{"import": 894,"src": 3445,"name": "GetEnvironmentStringsW"},{"import": 999,"src": 3446,"name": "FileIdInfo"},{"import": 894,"src": 3447,"name": "VirtualFree"},{"import": 999,"src": 3448,"name": "LPTSTR"},{"import": 999,"src": 3449,"name": "MEM_PHYSICAL"},{"import": 999,"src": 3450,"name": "FALSE"},{"import": 894,"src": 3451,"name": "TerminateProcessError"},{"import": 999,"src": 3452,"name": "FILE_CREATE_TREE_CONNECTION"},{"import": 999,"src": 3453,"name": "MOVEFILE_DELAY_UNTIL_REBOOT"},{"import": 999,"src": 3454,"name": "KF_FLAG_SIMPLE_IDLIST"},{"import": 894,"src": 3455,"name": "ReadFileError"},{"import": 999,"src": 3456,"name": "KF_FLAG_DONT_UNEXPAND"},{"import": 999,"src": 3457,"name": "FILE_ATTRIBUTE_DIRECTORY"},{"import": 999,"src": 3458,"name": "BY_HANDLE_FILE_INFORMATION"},{"import": 999,"src": 3459,"name": "FileIoPriorityHintInfo"},{"import": 894,"src": 3460,"name": "SetHandleInformation"},{"import": 894,"src": 3461,"name": "GetFileAttributesError"},{"import": 999,"src": 3462,"name": "FILE_FLAG_WRITE_THROUGH"},{"import": 999,"src": 3463,"name": "PEB_LDR_DATA"},{"import": 894,"src": 3464,"name": "SetFilePointerEx_BEGIN"},{"import": 999,"src": 3465,"name": "FILE_CREATE"},{"import": 999,"src": 3466,"name": "GENERIC_WRITE"},{"import": 894,"src": 3467,"name": "WaitForSingleObject"},{"import": 999,"src": 3468,"name": "FILE_NON_DIRECTORY_FILE"},{"import": 999,"src": 3469,"name": "INIT_ONCE_FN"},{"import": 999,"src": 3470,"name": "FILE_FLAG_POSIX_SEMANTICS"},{"import": 999,"src": 3471,"name": "HRESULT"},{"import": 999,"src": 3472,"name": "MAX_PATH"},{"import": 999,"src": 3473,"name": "SHORT"},{"import": 999,"src": 3474,"name": "LPCVOID"},{"import": 999,"src": 3475,"name": "TLS_OUT_OF_INDEXES"},{"import": 894,"src": 3476,"name": "GetFinalPathNameByHandleW"},{"import": 999,"src": 3477,"name": "PAGE_READONLY"},{"import": 894,"src": 3478,"name": "MoveFileError"},{"import": 999,"src": 3479,"name": "SUBLANG"},{"import": 999,"src": 3480,"name": "FILE_RESERVE_OPFILTER"},{"import": 999,"src": 3481,"name": "FORMAT_MESSAGE_FROM_SYSTEM"},{"import": 999,"src": 3482,"name": "INFINITE"},{"import": 999,"src": 3483,"name": "E_POINTER"},{"import": 999,"src": 3484,"name": "FILE_SYNCHRONOUS_IO_ALERT"},{"import": 999,"src": 3485,"name": "FileNameInfo"},{"import": 999,"src": 3486,"name": "FILE_NOTIFY_CHANGE_CREATION"},{"import": 999,"src": 3487,"name": "E_NOINTERFACE"},{"import": 999,"src": 3488,"name": "FILETIME"},{"import": 999,"src": 3489,"name": "OBJ_EXCLUSIVE"},{"import": 999,"src": 3490,"name": "FileAlignmentInfo"},{"import": 999,"src": 3491,"name": "STARTF_FORCEONFEEDBACK"},{"import": 894,"src": 3492,"name": "CreatePipeError"},{"import": 999,"src": 3493,"name": "INVALID_HANDLE_VALUE"},{"import": 999,"src": 3494,"name": "FILE_MODE_INFORMATION"},{"import": 894,"src": 3495,"name": "MoveFileEx"},{"import": 999,"src": 3496,"name": "FileRemoteProtocolInfo"},{"import": 999,"src": 3497,"name": "EXCEPTION_RECORD"},{"import": 999,"src": 3498,"name": "KF_FLAG_ALIAS_ONLY"},{"import": 999,"src": 3499,"name": "FileAttributeTagInfo"},{"import": 999,"src": 3500,"name": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"},{"import": 999,"src": 3501,"name": "UNICODE"},{"import": 999,"src": 3502,"name": "FORMAT_MESSAGE_IGNORE_INSERTS"},{"import": 999,"src": 3503,"name": "UNICODE_STRING"},{"import": 894,"src": 3504,"name": "VirtualAlloc"},{"import": 999,"src": 3505,"name": "LPTHREAD_START_ROUTINE"},{"import": 999,"src": 3506,"name": "E_OUTOFMEMORY"},{"import": 999,"src": 3507,"name": "LPCH"},{"import": 999,"src": 3508,"name": "KF_FLAG_NO_APPCONTAINER_REDIRECTION"},{"import": 894,"src": 3509,"name": "CreateSymbolicLinkW"},{"import": 999,"src": 3510,"name": "COORD"},{"import": 894,"src": 3511,"name": "MoveFileExW"},{"import": 894,"src": 3512,"name": "GetFinalPathNameByHandleError"},{"import": 999,"src": 3513,"name": "STARTF_TITLEISLINKNAME"},{"import": 894,"src": 3514,"name": "CreateSymbolicLinkError"},{"import": 999,"src": 3515,"name": "LPSECURITY_ATTRIBUTES"},{"import": 999,"src": 3516,"name": "FILE_ATTRIBUTE_REPARSE_POINT"},{"import": 999,"src": 3517,"name": "FORMAT_MESSAGE_MAX_WIDTH_MASK"},{"import": 999,"src": 3518,"name": "FILE_NO_INTERMEDIATE_BUFFERING"},{"import": 999,"src": 3519,"name": "TRUE"},{"import": 999,"src": 3520,"name": "LPOVERLAPPED"},{"import": 999,"src": 3521,"name": "EXCEPTION_CONTINUE_SEARCH"},{"import": 999,"src": 3522,"name": "PAGE_GUARD"},{"import": 999,"src": 3523,"name": "FILE_OPEN_IF"},{"import": 999,"src": 3524,"name": "FileIdExtdDirectoryRestartInfo"},{"import": 999,"src": 3525,"name": "MEM_DECOMMIT"},{"import": 999,"src": 3526,"name": "OBJ_INHERIT"},{"import": 999,"src": 3527,"name": "FILE_BOTH_DIRECTORY_INFORMATION"},{"import": 999,"src": 3528,"name": "ERROR"},{"import": 999,"src": 3529,"name": "RTL_CRITICAL_SECTION_DEBUG"},{"import": 999,"src": 3530,"name": "HLOCAL"},{"import": 999,"src": 3531,"name": "WORD"},{"import": 999,"src": 3532,"name": "FILE_ATTRIBUTE_NORMAL"},{"import": 999,"src": 3533,"name": "FILE_SHARE_WRITE"},{"import": 894,"src": 3534,"name": "ntdll"},{"import": 894,"src": 3535,"name": "ReadFile"},{"import": 999,"src": 3536,"name": "GENERIC_READ"},{"import": 894,"src": 3537,"name": "FindNextFile"},{"import": 999,"src": 3538,"name": "KF_FLAG_DEFAULT_PATH"},{"import": 999,"src": 3539,"name": "FILE_ATTRIBUTE_READONLY"},{"import": 999,"src": 3540,"name": "STARTF_USESTDHANDLES"},{"import": 999,"src": 3541,"name": "FILE_FLAG_BACKUP_SEMANTICS"},{"import": 999,"src": 3542,"name": "LIST_ENTRY"},{"import": 999,"src": 3543,"name": "FOREGROUND_RED"},{"import": 999,"src": 3544,"name": "FILE_POSITION_INFORMATION"},{"import": 894,"src": 3545,"name": "fileTimeToNanoSeconds"},{"import": 999,"src": 3546,"name": "PAGE_WRITECOMBINE"},{"import": 999,"src": 3547,"name": "TRUNCATE_EXISTING"},{"import": 999,"src": 3548,"name": "FILE_DELETE_ON_CLOSE"},{"import": 894,"src": 3549,"name": "RemoveDirectory"},{"import": 999,"src": 3550,"name": "MEM_RELEASE"},{"import": 999,"src": 3551,"name": "FILE_NOTIFY_CHANGE_DIR_NAME"},{"import": 894,"src": 3552,"name": "CreatePipe"},{"import": 999,"src": 3553,"name": "MEM_RESET_UNDO"},{"import": 999,"src": 3554,"name": "PAGE_NOACCESS"},{"import": 999,"src": 3555,"name": "PWSTR"},{"import": 999,"src": 3556,"name": "PAGE_NOCACHE"},{"import": 894,"src": 3557,"name": "sliceToPrefixedSuffixedFileW"},{"import": 999,"src": 3558,"name": "STATUS"},{"import": 999,"src": 3559,"name": "WRITE_OWNER"},{"import": 999,"src": 3560,"name": "OBJECT_ATTRIBUTES"},{"import": 999,"src": 3561,"name": "LPVOID"},{"import": 999,"src": 3562,"name": "FORMAT_MESSAGE_ARGUMENT_ARRAY"},{"import": 999,"src": 3563,"name": "FILE_OPEN_FOR_FREE_SPACE_QUERY"},{"import": 894,"src": 3564,"name": "DeleteFileError"},{"import": 999,"src": 3565,"name": "INT"},{"import": 894,"src": 3566,"name": "GetQueuedCompletionStatusResult"},{"import": 999,"src": 3567,"name": "STARTF_UNTRUSTEDSOURCE"},{"import": 999,"src": 3568,"name": "READ_CONTROL"},{"import": 999,"src": 3569,"name": "FILE_STANDARD_INFORMATION"},{"import": 999,"src": 3570,"name": "FileBasicInfo"},{"import": 999,"src": 3571,"name": "FILE_NOTIFY_CHANGE_LAST_ACCESS"},{"import": 894,"src": 3572,"name": "GetCurrentDirectory"},{"import": 999,"src": 3573,"name": "MEM_COALESCE_PLACEHOLDERS"},{"import": 894,"src": 3574,"name": "WriteFileError"},{"import": 999,"src": 3575,"name": "FILE_ATTRIBUTE_NO_SCRUB_DATA"},{"import": 999,"src": 3576,"name": "OBJ_PERMANENT"},{"import": 999,"src": 3577,"name": "HCRYPTPROV"},{"import": 894,"src": 3578,"name": "ole32"},{"import": 894,"src": 3579,"name": "RemoveDirectoryW"},{"import": 999,"src": 3580,"name": "IMAGE_TLS_DIRECTORY64"},{"import": 999,"src": 3581,"name": "FILE_NOTIFY_CHANGE_FILE_NAME"},{"import": 999,"src": 3582,"name": "OBJ_VALID_ATTRIBUTES"},{"import": 999,"src": 3583,"name": "FILE_NOTIFY_CHANGE_SIZE"},{"import": 999,"src": 3584,"name": "FARPROC"},{"import": 999,"src": 3585,"name": "OPEN_EXISTING"},{"import": 894,"src": 3586,"name": "GetFileAttributesW"},{"import": 999,"src": 3587,"name": "EXCEPTION_ILLEGAL_INSTRUCTION"},{"import": 999,"src": 3588,"name": "S_OK"},{"import": 999,"src": 3589,"name": "FILE_ACTION_REMOVED"},{"import": 999,"src": 3590,"name": "FileStreamInfo"},{"import": 999,"src": 3591,"name": "FORMAT_MESSAGE_FROM_STRING"},{"import": 999,"src": 3592,"name": "PAGE_WRITECOPY"},{"import": 894,"src": 3593,"name": "toSysTime"},{"import": 999,"src": 3594,"name": "FILE_OVERWRITE_IF"},{"import": 999,"src": 3595,"name": "MOVEFILE_FAIL_IF_NOT_TRACKABLE"},{"import": 894,"src": 3596,"name": "InitOnceExecuteOnce"},{"import": 999,"src": 3597,"name": "HINSTANCE"},{"import": 999,"src": 3598,"name": "CURDIR"},{"import": 894,"src": 3599,"name": "shell32"},{"import": 999,"src": 3600,"name": "COINIT"},{"import": 999,"src": 3601,"name": "HKEY__"},{"import": 999,"src": 3602,"name": "MOVEFILE_COPY_ALLOWED"},{"import": 999,"src": 3603,"name": "FILE_ALL_INFORMATION"},{"import": 999,"src": 3604,"name": "STARTF_USESIZE"},{"import": 999,"src": 3605,"name": "FILE_EA_INFORMATION"},{"import": 999,"src": 3606,"name": "E_ABORT"},{"import": 894,"src": 3607,"name": "sliceToPrefixedFileW"},{"import": 999,"src": 3608,"name": "RTL_USER_PROCESS_PARAMETERS"},{"import": 999,"src": 3609,"name": "FILE_SYNCHRONOUS_IO_NONALERT"},{"import": 999,"src": 3610,"name": "LONGLONG"},{"import": 894,"src": 3611,"name": "FreeLibrary"},{"import": 894,"src": 3612,"name": "FreeEnvironmentStringsW"},{"import": 999,"src": 3613,"name": "STARTF_PREVENTPINNING"},{"import": 999,"src": 3614,"name": "LANGID"},{"import": 999,"src": 3615,"name": "PVOID"},{"import": 999,"src": 3616,"name": "FILE_OPEN_FOR_BACKUP_INTENT"},{"import": 999,"src": 3617,"name": "FileEndOfFileInfo"},{"import": 999,"src": 3618,"name": "FORMAT_MESSAGE_ALLOCATE_BUFFER"},{"import": 894,"src": 3619,"name": "QueryPerformanceFrequency"},{"import": 894,"src": 3620,"name": "GetModuleFileNameW"},{"import": 999,"src": 3621,"name": "LPBYTE"},{"import": 999,"src": 3622,"name": "FILE_NO_COMPRESSION"},{"import": 894,"src": 3623,"name": "CreateDirectory"},{"import": 999,"src": 3624,"name": "PAGE_READWRITE"},{"import": 999,"src": 3625,"name": "COINIT_MULTITHREADED"},{"import": 894,"src": 3626,"name": "RemoveDirectoryError"},{"import": 999,"src": 3627,"name": "PAGE_EXECUTE_WRITECOPY"},{"import": 999,"src": 3628,"name": "STD_OUTPUT_HANDLE"},{"import": 999,"src": 3629,"name": "HANDLE_FLAG_INHERIT"},{"import": 999,"src": 3630,"name": "FILE_ATTRIBUTE_ARCHIVE"},{"import": 999,"src": 3631,"name": "LPCWSTR"},{"import": 999,"src": 3632,"name": "FILE_ATTRIBUTE_OFFLINE"},{"import": 999,"src": 3633,"name": "LPWSTR"},{"import": 999,"src": 3634,"name": "MEM_RESERVE"},{"import": 999,"src": 3635,"name": "FILE_RANDOM_ACCESS"},{"import": 999,"src": 3636,"name": "HANDLE_FLAG_PROTECT_FROM_CLOSE"},{"import": 999,"src": 3637,"name": "PAGE_TARGETS_NO_UPDATE"},{"import": 999,"src": 3638,"name": "MEM_COMMIT"},{"import": 999,"src": 3639,"name": "FILE_BOTH_DIR_INFORMATION"},{"import": 999,"src": 3640,"name": "E_HANDLE"},{"import": 999,"src": 3641,"name": "INVALID_FILE_ATTRIBUTES"},{"import": 999,"src": 3642,"name": "FILE_FLAG_RANDOM_ACCESS"},{"import": 999,"src": 3643,"name": "FileIdExtdDirectoryInfo"},{"import": 999,"src": 3644,"name": "MEM_RESET"},{"import": 999,"src": 3645,"name": "WAIT_OBJECT_0"},{"import": 999,"src": 3646,"name": "COINIT_APARTMENTTHREADED"},{"import": 999,"src": 3647,"name": "LPOVERLAPPED_COMPLETION_ROUTINE"},{"import": 999,"src": 3648,"name": "KF_FLAG_INIT"},{"import": 999,"src": 3649,"name": "RTL_RUN_ONCE_INIT"},{"import": 894,"src": 3650,"name": "SetConsoleTextAttributeError"},{"import": 999,"src": 3651,"name": "FileDispositionInfo"},{"import": 894,"src": 3652,"name": "VirtualAllocError"},{"import": 999,"src": 3653,"name": "FILE_NOTIFY_CHANGE_ATTRIBUTES"},{"import": 999,"src": 3654,"name": "PROV_RSA_FULL"},{"import": 999,"src": 3655,"name": "FILE_ACTION_RENAMED_OLD_NAME"},{"import": 999,"src": 3656,"name": "FILE_CURRENT"},{"import": 999,"src": 3657,"name": "E_FAIL"},{"import": 894,"src": 3658,"name": "TerminateProcess"},{"import": 999,"src": 3659,"name": "CHAR"},{"import": 999,"src": 3660,"name": "FILE_OVERWRITE"},{"import": 999,"src": 3661,"name": "CREATE_ALWAYS"},{"import": 894,"src": 3662,"name": "CreateDirectoryError"},{"import": 999,"src": 3663,"name": "OBJ_OPENLINK"},{"import": 894,"src": 3664,"name": "SetFilePointerEx_CURRENT"},{"import": 999,"src": 3665,"name": "STARTF_TITLEISAPPID"},{"import": 894,"src": 3666,"name": "GetCurrentDirectoryError"},{"import": 999,"src": 3667,"name": "IMAGE_TLS_DIRECTORY"},{"import": 999,"src": 3668,"name": "FILE_COMPLETE_IF_OPLOCKED"},{"import": 999,"src": 3669,"name": "DUPLICATE_SAME_ACCESS"},{"import": 999,"src": 3670,"name": "FILE_BASIC_INFORMATION"},{"import": 894,"src": 3671,"name": "QueryPerformanceCounter"},{"import": 999,"src": 3672,"name": "LARGE_INTEGER"},{"import": 999,"src": 3673,"name": "FileRenameInfo"},{"import": 999,"src": 3674,"name": "FILE_FLAG_DELETE_ON_CLOSE"},{"import": 894,"src": 3675,"name": "PostQueuedCompletionStatus"},{"import": 999,"src": 3676,"name": "ULONGLONG"},{"import": 999,"src": 3677,"name": "VOLUME_NAME_GUID"},{"import": 999,"src": 3678,"name": "GENERIC_ALL"},{"import": 999,"src": 3679,"name": "HKEY"},{"import": 894,"src": 3680,"name": "PostQueuedCompletionStatusError"},{"import": 999,"src": 3681,"name": "E_INVALIDARG"},{"import": 999,"src": 3682,"name": "EXCEPTION_STACK_OVERFLOW"},{"import": 894,"src": 3683,"name": "GetEnvironmentVariableError"},{"import": 999,"src": 3684,"name": "SYNCHRONIZE"},{"import": 999,"src": 3685,"name": "FILE_FLAG_OPEN_NO_RECALL"},{"import": 999,"src": 3686,"name": "BOOLEAN"},{"import": 999,"src": 3687,"name": "SYSTEM_INFO"},{"import": 999,"src": 3688,"name": "IO_STATUS_BLOCK"},{"import": 894,"src": 3689,"name": "self_process_handle"},{"import": 999,"src": 3690,"name": "FILE_INFO_BY_HANDLE_CLASS"},{"import": 894,"src": 3691,"name": "RtlGenRandom"},{"import": 999,"src": 3692,"name": "FILE_FLAG_NO_BUFFERING"},{"import": 999,"src": 3693,"name": "DWORD"},{"import": 894,"src": 3694,"name": "GetFileAttributes"},{"import": 999,"src": 3695,"name": "FILE_ALIGNMENT_INFORMATION"},{"import": 999,"src": 3696,"name": "STARTF_USESHOWWINDOW"},{"import": 999,"src": 3697,"name": "CONSOLE_SCREEN_BUFFER_INFO"},{"import": 894,"src": 3698,"name": "LoadLibraryW"},{"import": 999,"src": 3699,"name": "FOLDERID_LocalAppData"},{"import": 999,"src": 3700,"name": "LPSTR"},{"import": 999,"src": 3701,"name": "FILE_OPEN_OFFLINE_FILE"},{"import": 894,"src": 3702,"name": "FindFirstFileError"},{"import": 894,"src": 3703,"name": "SetHandleInformationError"},{"import": 999,"src": 3704,"name": "FILE_OPEN_BY_FILE_ID"},{"import": 894,"src": 3705,"name": "LoadLibraryError"},{"import": 999,"src": 3706,"name": "RTL_CRITICAL_SECTION"},{"import": 999,"src": 3707,"name": "FILE_END"},{"import": 999,"src": 3708,"name": "DELETE"},{"import": 999,"src": 3709,"name": "FILE_FLAG_SESSION_AWARE"},{"import": 999,"src": 3710,"name": "MEM_LARGE_PAGES"},{"import": 999,"src": 3711,"name": "STARTF_USECOUNTCHARS"},{"import": 894,"src": 3712,"name": "peb"},{"import": 999,"src": 3713,"name": "FileAllocationInfo"},{"import": 999,"src": 3714,"name": "VOLUME_NAME_NONE"},{"import": 999,"src": 3715,"name": "PAGE_EXECUTE_READ"},{"import": 894,"src": 3716,"name": "GetFileInformationByHandleError"},{"import": 894,"src": 3717,"name": "unexpectedError"},{"import": 999,"src": 3718,"name": "STARTF_USEHOTKEY"},{"import": 999,"src": 3719,"name": "INIT_ONCE"},{"import": 999,"src": 3720,"name": "FileFullDirectoryRestartInfo"},{"import": 999,"src": 3721,"name": "E_NOTIMPL"},{"import": 999,"src": 3722,"name": "E_ACCESSDENIED"},{"import": 894,"src": 3723,"name": "FindClose"},{"import": 999,"src": 3724,"name": "PTHREAD_START_ROUTINE"},{"import": 999,"src": 3725,"name": "LPCSTR"},{"import": 999,"src": 3726,"name": "FILE_INFORMATION_CLASS"},{"import": 999,"src": 3727,"name": "REGSAM"},{"import": 999,"src": 3728,"name": "KF_FLAG_DONT_VERIFY"},{"import": 894,"src": 3729,"name": "CreateDirectoryW"},{"import": 999,"src": 3730,"name": "FILE_ATTRIBUTE_COMPRESSED"},{"import": 999,"src": 3731,"name": "FILE_ACTION_RENAMED_NEW_NAME"},{"import": 999,"src": 3732,"name": "FILE_NAME_OPENED"},{"import": 999,"src": 3733,"name": "WAIT_FAILED"},{"import": 894,"src": 3734,"name": "cStrToPrefixedFileW"},{"import": 999,"src": 3735,"name": "FileIdBothDirectoryRestartInfo"},{"import": 999,"src": 3736,"name": "KF_FLAG_NO_ALIAS"},{"import": 999,"src": 3737,"name": "VOLUME_NAME_DOS"},{"import": 999,"src": 3738,"name": "STARTF_USEFILLATTRIBUTE"},{"import": 999,"src": 3739,"name": "ULONG_PTR"},{"import": 999,"src": 3740,"name": "FILE_ATTRIBUTE_SYSTEM"},{"import": 999,"src": 3741,"name": "WAIT_TIMEOUT"},{"import": 999,"src": 3742,"name": "MOVEFILE_CREATE_HARDLINK"},{"import": 894,"src": 3743,"name": "SetFilePointerEx_CURRENT_get"},{"import": 999,"src": 3744,"name": "HMODULE"},{"import": 999,"src": 3745,"name": "PROCESS_INFORMATION"},{"import": 999,"src": 3746,"name": "STARTF_USEPOSITION"},{"import": 894,"src": 3747,"name": "SetConsoleTextAttribute"},{"import": 999,"src": 3748,"name": "IO_APC_ROUTINE"},{"import": 999,"src": 3749,"name": "INIT_ONCE_STATIC_INIT"},{"import": 999,"src": 3750,"name": "va_list"},{"import": 894,"src": 3751,"name": "CreateFileError","kind": "const","type": 348,"value": 1000},{"import": 999,"src": 3752,"name": "HEAP_GENERATE_EXCEPTIONS"},{"import": 999,"src": 3753,"name": "FILE_SUPERSEDE"},{"import": 999,"src": 3754,"name": "FILE_FLAG_OPEN_REPARSE_POINT"},{"import": 894,"src": 3755,"name": "SetFileTimeError"},{"import": 999,"src": 3756,"name": "TCHAR"},{"import": 894,"src": 3757,"name": "FindNextFileError"},{"import": 894,"src": 3758,"name": "CreateSymbolicLink"},{"import": 999,"src": 3759,"name": "SECURITY_ATTRIBUTES"},{"import": 999,"src": 3760,"name": "FILE_ATTRIBUTE_TEMPORARY"},{"import": 999,"src": 3761,"name": "FILE_ATTRIBUTE_SPARSE_FILE"},{"import": 894,"src": 3762,"name": "nanoSecondsToFileTime"},{"import": 999,"src": 3763,"name": "MEM_TOP_DOWN"},{"import": 999,"src": 3764,"name": "PIMAGE_TLS_CALLBACK"},{"import": 894,"src": 3765,"name": "HeapFree"},{"import": 999,"src": 3766,"name": "FILE_ACTION_ADDED"},{"import": 999,"src": 3767,"name": "FILE_SEQUENTIAL_ONLY"},{"import": 999,"src": 3768,"name": "FileIdBothDirectoryInfo"},{"import": 999,"src": 3769,"name": "FileStandardInfo"},{"import": 894,"src": 3770,"name": "DeleteFile"},{"import": 999,"src": 3771,"name": "GUID"},{"import": 999,"src": 3772,"name": "FILE_OPEN_FOR_RECOVERY"},{"import": 999,"src": 3773,"name": "FOREGROUND_INTENSITY"},{"import": 999,"src": 3774,"name": "LONG"},{"import": 999,"src": 3775,"name": "FILE_LIST_DIRECTORY"},{"import": 999,"src": 3776,"name": "FILE_WRITE_THROUGH"},{"import": 894,"src": 3777,"name": "GetQueuedCompletionStatus"},{"import": 999,"src": 3778,"name": "OBJ_CASE_INSENSITIVE"},{"import": 999,"src": 3779,"name": "MOVEFILE_REPLACE_EXISTING"},{"import": 999,"src": 3780,"name": "STARTF_FORCEOFFFEEDBACK"},{"import": 999,"src": 3781,"name": "FILE_SHARE_READ"},{"import": 894,"src": 3782,"name": "GetStdHandle"},{"import": 999,"src": 3783,"name": "PPS_POST_PROCESS_INIT_ROUTINE"},{"import": 894,"src": 3784,"name": "unexpectedStatus"},{"import": 999,"src": 3785,"name": "STANDARD_RIGHTS_REQUIRED"},{"import": 999,"src": 3786,"name": "STD_ERROR_HANDLE"},{"import": 894,"src": 3787,"name": "DeleteFileW"},{"import": 999,"src": 3788,"name": "MOVEFILE_WRITE_THROUGH"},{"import": 999,"src": 3789,"name": "FOREGROUND_GREEN"},{"import": 999,"src": 3790,"name": "FILE_ATTRIBUTE_HIDDEN"},{"import": 999,"src": 3791,"name": "FORMAT_MESSAGE_FROM_HMODULE"},{"import": 999,"src": 3792,"name": "FILE_SHARE_DELETE"},{"import": 999,"src": 3793,"name": "FILE_NAME_INFO"},{"import": 999,"src": 3794,"name": "FileStorageInfo"},{"import": 999,"src": 3795,"name": "ULONG"},{"import": 999,"src": 3796,"name": "RTL_RUN_ONCE"},{"import": 999,"src": 3797,"name": "GENERIC_EXECUTE"},{"import": 999,"src": 3798,"name": "LPDWORD"},{"import": 894,"src": 3799,"name": "CreateIoCompletionPortError"},{"import": 999,"src": 3800,"name": "MEM_WRITE_WATCH"},{"import": 999,"src": 3801,"name": "LSTATUS"},{"import": 999,"src": 3802,"name": "BYTE"},{"import": 999,"src": 3803,"name": "FILE_ATTRIBUTE_DEVICE"},{"import": 999,"src": 3804,"name": "STARTUPINFOW"},{"import": 999,"src": 3805,"name": "HEAP_CREATE_ENABLE_EXECUTE"},{"import": 894,"src": 3806,"name": "SetFilePointerError"},{"import": 894,"src": 3807,"name": "GetEnvironmentVariableW"},{"import": 999,"src": 3808,"name": "FLOAT"},{"import": 999,"src": 3809,"name": "FILE_ATTRIBUTE_INTEGRITY_STREAM"},{"import": 999,"src": 3810,"name": "KNOWNFOLDERID"},{"import": 999,"src": 3811,"name": "OVERLAPPED"},{"import": 999,"src": 3812,"name": "FILE_BEGIN"},{"import": 999,"src": 3813,"name": "DWORD_PTR"},{"import": 999,"src": 3814,"name": "ACCESS_MASK"},{"import": 999,"src": 3815,"name": "FILE_FLAG_SEQUENTIAL_SCAN"},{"import": 999,"src": 3816,"name": "CREATE_NEW"},{"import": 999,"src": 3817,"name": "PATH_MAX_WIDE"},{"import": 894,"src": 3818,"name": "SetFileTime"},{"import": 999,"src": 3819,"name": "CRITICAL_SECTION"},{"import": 894,"src": 3820,"name": "GetFileSizeError"},{"import": 999,"src": 3821,"name": "OPEN_ALWAYS"},{"import": 894,"src": 3822,"name": "CreateFileW"},{"import": 999,"src": 3823,"name": "FILE_ATTRIBUTE_RECALL_ON_OPEN"},{"import": 999,"src": 3824,"name": "STD_INPUT_HANDLE"},{"import": 894,"src": 3825,"name": "GetFileSizeEx"},{"import": 894,"src": 3826,"name": "GetFileInformationByHandle"},{"import": 894,"src": 3827,"name": "advapi32"},{"import": 999,"src": 3828,"name": "FILE_NOTIFY_CHANGE_SECURITY"},{"import": 999,"src": 3829,"name": "IMAGE_TLS_DIRECTORY32"},{"import": 999,"src": 3830,"name": "SIZE_T"},{"import": 999,"src": 3831,"name": "KF_FLAG_DEFAULT"},{"import": 999,"src": 3832,"name": "FOREGROUND_BLUE"},{"import": 999,"src": 3833,"name": "FILE_NOTIFY_CHANGE_LAST_WRITE"},{"import": 894,"src": 3834,"name": "GetEnvironmentStringsError"},{"import": 999,"src": 3835,"name": "FILE_INTERNAL_INFORMATION"},{"import": 999,"src": 3836,"name": "SMALL_RECT"},{"import": 894,"src": 3837,"name": "GetStdHandleError","kind": "const","type": 348,"value": 730},{"import": 894,"src": 3838,"name": "SetFilePointerEx_END"},{"import": 999,"src": 3839,"name": "PAGE_EXECUTE"},{"import": 999,"src": 3840,"name": "WAIT_ABANDONED"},{"import": 999,"src": 3841,"name": "FILE_ATTRIBUTE_VIRTUAL"},{"import": 999,"src": 3842,"name": "PEB"},{"import": 999,"src": 3843,"name": "FILE_DIRECTORY_FILE"},{"import": 894,"src": 3844,"name": "kernel32"},{"import": 999,"src": 3845,"name": "PAGE_EXECUTE_READWRITE"},{"import": 894,"src": 3846,"name": "CreateFile"},{"import": 894,"src": 3847,"name": "CreateProcessW"},{"import": 894,"src": 3848,"name": "assert"},{"import": 894,"src": 3849,"name": "MAKELANGID"},{"import": 894,"src": 3850,"name": "math"},{"import": 894,"src": 3851,"name": "std"},{"import": 894,"src": 3852,"name": "maxInt"},{"import": 894,"src": 3853,"name": "builtin"},{"import": 894,"src": 3854,"name": "GetModuleFileNameError"},{"import": 894,"src": 3855,"name": "mem"},{"import": 898,"src": 3856,"name": "readULEB128"},{"import": 898,"src": 3857,"name": "readILEB128"},{"import": 898,"src": 119,"name": "readILEB128Mem","kind": "const","type": 1001,"value": 660},{"import": 898,"src": 114,"name": "readULEB128Mem","kind": "const","type": 1002,"value": 661},{"import": 898,"src": 3858,"name": "test_read_ileb128"},{"import": 898,"src": 3859,"name": "test_read_uleb128_seq"},{"import": 898,"src": 3860,"name": "test_read_stream_ileb128"},{"import": 898,"src": 3861,"name": "test_read_uleb128"},{"import": 898,"src": 3862,"name": "std","kind": "const","type": 348,"value": 424},{"import": 898,"src": 3863,"name": "testing"},{"import": 898,"src": 3864,"name": "test_read_ileb128_seq"},{"import": 898,"src": 3865,"name": "test_read_stream_uleb128"},{"import": 706,"src": 3866,"name": "getStream"},{"import": 706,"src": 3867,"name": "openFile"},{"import": 706,"src": 3868,"name": "getStreamById"},{"import": 706,"src": 3869,"name": "openFile"},{"import": 707,"src": 3870,"name": "loadSections"},{"import": 707,"src": 3871,"name": "getSection"},{"import": 707,"src": 3872,"name": "init"},{"import": 707,"src": 3873,"name": "getPdbPath"},{"import": 707,"src": 3874,"name": "loadHeader"},{"import": 707,"src": 3875,"name": "loadOptionalHeader"},{"import": 707,"src": 3876,"name": "DataDirectory","kind": "const","type": 348,"value": 1006},{"import": 931,"src": 3877,"name": "HashStrategy","kind": "const","type": 348,"value": 1008},{"import": 931,"src": 229,"name": "hash","kind": "const","type": 1009,"value": 662},{"import": 931,"src": 3878,"name": "hashArray"},{"import": 931,"src": 219,"name": "autoHash","kind": "const","type": 832,"value": 569},{"import": 931,"src": 3879,"name": "hashPointer"},{"import": 931,"src": 3880,"name": "builtin"},{"import": 931,"src": 3881,"name": "testHashDeep"},{"import": 931,"src": 3882,"name": "Wyhash"},{"import": 931,"src": 3883,"name": "testHash"},{"import": 931,"src": 3884,"name": "std","kind": "const","type": 348,"value": 424},{"import": 931,"src": 3885,"name": "testHashDeepRecursive"},{"import": 931,"src": 3886,"name": "testHashShallow"},{"import": 931,"src": 3887,"name": "meta","kind": "const","type": 348,"value": 711},{"import": 931,"src": 3888,"name": "assert"},{"import": 931,"src": 3889,"name": "testing"},{"import": 931,"src": 3890,"name": "mem"},{"import": 947,"src": 3891,"name": "assert"},{"import": 947,"src": 3892,"name": "__PTHREAD_MUTEX_SIZE__","kind": "const","type": 358,"value": null},{"import": 947,"src": 3893,"name": "mach_hdr","kind": "const","type": 348,"value": 950},{"import": 947,"src": 3894,"name": "std","kind": "const","type": 348,"value": 424},{"import": 947,"src": 3895,"name": "builtin"},{"import": 947,"src": 2753,"name": "__error","kind": "const","type": 948,"value": 636},{"import": 947,"src": 3896,"name": "__PTHREAD_COND_SIZE__","kind": "const","type": 358,"value": null},{"import": 947,"src": 3897,"name": "macho","kind": "const","type": 348,"value": 718},{"import": 967,"src": 3898,"name": "isAbsoluteW"},{"import": 967,"src": 3899,"name": "delimiter_windows"},{"import": 967,"src": 3900,"name": "isAbsolutePosix"},{"import": 967,"src": 3901,"name": "dirname"},{"import": 967,"src": 3902,"name": "relative"},{"import": 967,"src": 3903,"name": "resolvePosix"},{"import": 967,"src": 3904,"name": "basenameWindows"},{"import": 967,"src": 3905,"name": "dirnameWindows"},{"import": 967,"src": 3906,"name": "isAbsoluteWindows"},{"import": 967,"src": 80,"name": "basename","kind": "const","type": 85,"value": 110},{"import": 967,"src": 116,"name": "joinPosix","kind": "const","type": 137,"value": 162},{"import": 967,"src": 3907,"name": "dirnamePosix"},{"import": 967,"src": 3908,"name": "windowsParsePath"},{"import": 967,"src": 3909,"name": "relativeWindows"},{"import": 967,"src": 3910,"name": "isAbsolute"},{"import": 967,"src": 3911,"name": "delimiter_posix"},{"import": 967,"src": 3912,"name": "joinWindows"},{"import": 967,"src": 3913,"name": "sep"},{"import": 967,"src": 3914,"name": "diskDesignator"},{"import": 967,"src": 3915,"name": "resolveWindows"},{"import": 967,"src": 3916,"name": "WindowsPath"},{"import": 967,"src": 3917,"name": "diskDesignatorWindows"},{"import": 967,"src": 3918,"name": "sep_str"},{"import": 967,"src": 3919,"name": "isSep"},{"import": 967,"src": 3920,"name": "relativePosix"},{"import": 967,"src": 3921,"name": "resolve"},{"import": 967,"src": 3922,"name": "sep_windows"},{"import": 967,"src": 3923,"name": "sep_posix","kind": "const","type": 358,"value": null},{"import": 967,"src": 3924,"name": "join","kind": "const","type": 137,"value": 162},{"import": 967,"src": 3925,"name": "delimiter"},{"import": 967,"src": 171,"name": "basenamePosix","kind": "const","type": 85,"value": 248},{"import": 967,"src": 3926,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 967,"src": 117,"name": "joinSep","kind": "const","type": 138,"value": 163},{"import": 967,"src": 3927,"name": "asciiEqlIgnoreCase"},{"import": 967,"src": 3928,"name": "math"},{"import": 967,"src": 3929,"name": "testIsAbsolutePosix"},{"import": 967,"src": 3930,"name": "debug"},{"import": 967,"src": 3931,"name": "testing"},{"import": 967,"src": 3932,"name": "testResolvePosix"},{"import": 967,"src": 3933,"name": "testBasenameWindows"},{"import": 967,"src": 3934,"name": "Allocator","kind": "const","type": 348,"value": 675},{"import": 967,"src": 3935,"name": "testDirnameWindows"},{"import": 967,"src": 3936,"name": "fmt"},{"import": 967,"src": 3937,"name": "testIsAbsoluteWindows"},{"import": 967,"src": 3938,"name": "testBasename"},{"import": 967,"src": 3939,"name": "testJoinPosix"},{"import": 967,"src": 3940,"name": "testDirnamePosix"},{"import": 967,"src": 3941,"name": "networkShareServersEql"},{"import": 967,"src": 3942,"name": "testRelativeWindows"},{"import": 967,"src": 3943,"name": "compareDiskDesignators"},{"import": 967,"src": 3944,"name": "asciiUpper"},{"import": 967,"src": 3945,"name": "testJoinWindows"},{"import": 967,"src": 3946,"name": "std","kind": "const","type": 348,"value": 424},{"import": 967,"src": 3947,"name": "testResolveWindows"},{"import": 967,"src": 3948,"name": "fs"},{"import": 967,"src": 3949,"name": "testRelativePosix"},{"import": 967,"src": 3950,"name": "windows"},{"import": 967,"src": 3951,"name": "process"},{"import": 967,"src": 3952,"name": "testBasenamePosix"},{"import": 967,"src": 3953,"name": "assert"},{"import": 967,"src": 3954,"name": "mem","kind": "const","type": 348,"value": 696},{"import": 713,"src": 29,"name": "shrink","kind": "const","type": 34,"value": 40},{"import": 713,"src": 28,"name": "realloc","kind": "const","type": 33,"value": 39},{"import": 713,"src": 30,"name": "alloc","kind": "const","type": 35,"value": 41},{"import": 973,"src": 3955,"name": "SpinLock","kind": "const","type": 348,"value": 716},{"import": 973,"src": 3956,"name": "builtin","kind": "const","type": 348,"value": 423},{"import": 973,"src": 3957,"name": "std"},{"import": 973,"src": 3958,"name": "time"},{"import": 973,"src": 3959,"name": "os"},{"import": 973,"src": 3960,"name": "assert"},{"import": 644,"src": 3961,"name": "Inline","kind": "const","type": 348,"value": 1021},{"import": 999,"src": 3962,"name": "assert"},{"import": 999,"src": 3963,"name": "std"},{"import": 999,"src": 3964,"name": "maxInt"},{"import": 999,"src": 3965,"name": "builtin"}],"fns": [{"src": 0,"type": 0},{"src": 1,"type": 1},{"src": 2,"type": 1},{"src": 3,"type": 1},{"src": 4,"type": 1},{"src": 5,"type": 2},{"src": 6,"type": 3},{"src": 7,"type": 4},{"src": 8,"type": 5},{"src": 9,"type": 6},{"src": 10,"type": 7},{"src": 11,"type": 6},{"src": 12,"type": 8},{"src": 13,"type": 9},{"src": 14,"type": 4},{"src": 15,"type": 10},{"src": 16,"type": 11},{"src": 17,"type": 6},{"src": 8,"type": 12},{"src": 12,"type": 13},{"src": 18,"type": 14},{"src": 19,"type": 15},{"src": 10,"type": 16},{"src": 20,"type": 17},{"src": 21,"type": 18},{"src": 22,"type": 19},{"src": 23,"type": 20},{"src": 24,"type": 21},{"src": 15,"type": 22},{"src": 13,"type": 23},{"src": 19,"type": 24},{"src": 10,"type": 25},{"src": 18,"type": 26},{"src": 25,"type": 27},{"src": 16,"type": 28},{"src": 26,"type": 29},{"src": 27,"type": 30},{"src": 19,"type": 31},{"src": 25,"type": 32},{"src": 28,"type": 33},{"src": 29,"type": 34},{"src": 30,"type": 35},{"src": 31,"type": 36},{"src": 32,"type": 37},{"src": 33,"type": 38},{"src": 34,"type": 39},{"src": 35,"type": 40},{"src": 36,"type": 41},{"src": 37,"type": 42},{"src": 38,"type": 43},{"src": 39,"type": 44},{"src": 40,"type": 45},{"src": 41,"type": 36},{"src": 42,"type": 46},{"src": 43,"type": 34},{"src": 44,"type": 47},{"src": 45,"type": 48},{"src": 46,"type": 34},{"src": 47,"type": 4},{"src": 48,"type": 49},{"src": 31,"type": 50},{"src": 49,"type": 51},{"src": 50,"type": 52},{"src": 51,"type": 52},{"src": 52,"type": 52},{"src": 27,"type": 10},{"src": 44,"type": 53},{"src": 45,"type": 48},{"src": 46,"type": 34},{"src": 17,"type": 54},{"src": 53,"type": 15},{"src": 49,"type": 55},{"src": 54,"type": 19},{"src": 27,"type": 22},{"src": 15,"type": 56},{"src": 53,"type": 24},{"src": 49,"type": 57},{"src": 55,"type": 27},{"src": 56,"type": 58},{"src": 53,"type": 31},{"src": 55,"type": 32},{"src": 57,"type": 59},{"src": 58,"type": 60},{"src": 59,"type": 61},{"src": 60,"type": 42},{"src": 61,"type": 62},{"src": 62,"type": 63},{"src": 63,"type": 64},{"src": 64,"type": 65},{"src": 65,"type": 66},{"src": 66,"type": 67},{"src": 67,"type": 68},{"src": 68,"type": 69},{"src": 69,"type": 70},{"src": 15,"type": 71},{"src": 13,"type": 72},{"src": 25,"type": 73},{"src": 70,"type": 74},{"src": 71,"type": 75},{"src": 72,"type": 76},{"src": 37,"type": 42},{"src": 73,"type": 77},{"src": 74,"type": 78},{"src": 75,"type": 79},{"src": 76,"type": 80},{"src": 77,"type": 81},{"src": 78,"type": 82},{"src": 37,"type": 83},{"src": 37,"type": 83},{"src": 79,"type": 84},{"src": 80,"type": 85},{"src": 81,"type": 86},{"src": 82,"type": 87},{"src": 83,"type": 88},{"src": 84,"type": 89},{"src": 85,"type": 90},{"src": 86,"type": 91},{"src": 87,"type": 92},{"src": 15,"type": 93},{"src": 88,"type": 94},{"src": 16,"type": 95},{"src": 89,"type": 96},{"src": 90,"type": 97},{"src": 91,"type": 98},{"src": 92,"type": 99},{"src": 93,"type": 100},{"src": 27,"type": 101},{"src": 94,"type": 102},{"src": 95,"type": 103},{"src": 96,"type": 104},{"src": 16,"type": 105},{"src": 97,"type": 106},{"src": 98,"type": 107},{"src": 99,"type": 108},{"src": 100,"type": 109},{"src": 100,"type": 110},{"src": 101,"type": 111},{"src": 101,"type": 112},{"src": 101,"type": 113},{"src": 102,"type": 114},{"src": 103,"type": 115},{"src": 104,"type": 116},{"src": 105,"type": 117},{"src": 106,"type": 118},{"src": 107,"type": 119},{"src": 108,"type": 120},{"src": 109,"type": 121},{"src": 19,"type": 122},{"src": 110,"type": 123},{"src": 111,"type": 124},{"src": 104,"type": 125},{"src": 112,"type": 126},{"src": 113,"type": 127},{"src": 114,"type": 128},{"src": 106,"type": 129},{"src": 107,"type": 130},{"src": 108,"type": 131},{"src": 109,"type": 132},{"src": 19,"type": 133},{"src": 110,"type": 134},{"src": 114,"type": 135},{"src": 115,"type": 136},{"src": 116,"type": 137},{"src": 117,"type": 138},{"src": 118,"type": 139},{"src": 101,"type": 140},{"src": 119,"type": 141},{"src": 120,"type": 142},{"src": 37,"type": 143},{"src": 121,"type": 144},{"src": 122,"type": 145},{"src": 123,"type": 146},{"src": 124,"type": 42},{"src": 37,"type": 143},{"src": 125,"type": 147},{"src": 37,"type": 148},{"src": 37,"type": 148},{"src": 37,"type": 42},{"src": 126,"type": 149},{"src": 127,"type": 150},{"src": 128,"type": 151},{"src": 129,"type": 36},{"src": 130,"type": 152},{"src": 131,"type": 153},{"src": 132,"type": 154},{"src": 133,"type": 155},{"src": 134,"type": 156},{"src": 135,"type": 157},{"src": 136,"type": 158},{"src": 137,"type": 159},{"src": 138,"type": 4},{"src": 5,"type": 160},{"src": 20,"type": 161},{"src": 130,"type": 162},{"src": 131,"type": 163},{"src": 132,"type": 164},{"src": 133,"type": 165},{"src": 52,"type": 52},{"src": 134,"type": 166},{"src": 135,"type": 167},{"src": 136,"type": 168},{"src": 137,"type": 169},{"src": 23,"type": 170},{"src": 27,"type": 10},{"src": 5,"type": 171},{"src": 27,"type": 56},{"src": 27,"type": 22},{"src": 5,"type": 172},{"src": 16,"type": 173},{"src": 139,"type": 174},{"src": 140,"type": 175},{"src": 141,"type": 176},{"src": 142,"type": 177},{"src": 143,"type": 178},{"src": 27,"type": 71},{"src": 15,"type": 179},{"src": 55,"type": 73},{"src": 144,"type": 180},{"src": 145,"type": 181},{"src": 146,"type": 182},{"src": 147,"type": 183},{"src": 148,"type": 184},{"src": 149,"type": 185},{"src": 150,"type": 186},{"src": 151,"type": 187},{"src": 152,"type": 188},{"src": 118,"type": 189},{"src": 153,"type": 190},{"src": 154,"type": 191},{"src": 155,"type": 183},{"src": 156,"type": 192},{"src": 157,"type": 190},{"src": 158,"type": 193},{"src": 159,"type": 194},{"src": 160,"type": 194},{"src": 161,"type": 195},{"src": 162,"type": 196},{"src": 163,"type": 197},{"src": 164,"type": 198},{"src": 165,"type": 75},{"src": 166,"type": 194},{"src": 167,"type": 194},{"src": 61,"type": 62},{"src": 168,"type": 199},{"src": 169,"type": 200},{"src": 61,"type": 201},{"src": 61,"type": 201},{"src": 170,"type": 202},{"src": 171,"type": 85},{"src": 172,"type": 203},{"src": 27,"type": 93},{"src": 173,"type": 204},{"src": 174,"type": 205},{"src": 50,"type": 36},{"src": 175,"type": 206},{"src": 176,"type": 207},{"src": 177,"type": 208},{"src": 178,"type": 209},{"src": 179,"type": 104},{"src": 180,"type": 104},{"src": 181,"type": 210},{"src": 181,"type": 211},{"src": 182,"type": 212},{"src": 182,"type": 213},{"src": 182,"type": 214},{"src": 53,"type": 122},{"src": 183,"type": 121},{"src": 53,"type": 133},{"src": 183,"type": 132},{"src": 182,"type": 215},{"src": 61,"type": 216},{"src": 184,"type": 217},{"src": 61,"type": 216},{"src": 16,"type": 218},{"src": 61,"type": 219},{"src": 61,"type": 219},{"src": 61,"type": 62},{"src": 185,"type": 220},{"src": 186,"type": 221},{"src": 187,"type": 222},{"src": 188,"type": 223},{"src": 37,"type": 224},{"src": 21,"type": 225},{"src": 22,"type": 19},{"src": 11,"type": 54},{"src": 9,"type": 54},{"src": 185,"type": 226},{"src": 186,"type": 227},{"src": 187,"type": 228},{"src": 188,"type": 229},{"src": 189,"type": 230},{"src": 190,"type": 231},{"src": 37,"type": 232},{"src": 37,"type": 233},{"src": 191,"type": 234},{"src": 192,"type": 235},{"src": 193,"type": 236},{"src": 194,"type": 193},{"src": 195,"type": 237},{"src": 196,"type": 238},{"src": 197,"type": 239},{"src": 198,"type": 240},{"src": 199,"type": 34},{"src": 200,"type": 241},{"src": 27,"type": 179},{"src": 16,"type": 242},{"src": 201,"type": 52},{"src": 145,"type": 243},{"src": 202,"type": 244},{"src": 203,"type": 193},{"src": 204,"type": 196},{"src": 141,"type": 176},{"src": 205,"type": 245},{"src": 206,"type": 246},{"src": 207,"type": 247},{"src": 141,"type": 248},{"src": 141,"type": 248},{"src": 208,"type": 249},{"src": 209,"type": 250},{"src": 210,"type": 251},{"src": 211,"type": 251},{"src": 212,"type": 251},{"src": 213,"type": 252},{"src": 213,"type": 253},{"src": 213,"type": 254},{"src": 27,"type": 255},{"src": 16,"type": 256},{"src": 27,"type": 257},{"src": 16,"type": 258},{"src": 213,"type": 259},{"src": 141,"type": 176},{"src": 141,"type": 260},{"src": 141,"type": 248},{"src": 58,"type": 261},{"src": 141,"type": 176},{"src": 141,"type": 260},{"src": 141,"type": 248},{"src": 141,"type": 248},{"src": 141,"type": 176},{"src": 141,"type": 248},{"src": 141,"type": 176},{"src": 141,"type": 176},{"src": 61,"type": 262},{"src": 51,"type": 52},{"src": 48,"type": 49},{"src": 61,"type": 263},{"src": 61,"type": 264},{"src": 214,"type": 265},{"src": 215,"type": 266},{"src": 216,"type": 267},{"src": 217,"type": 268},{"src": 37,"type": 83},{"src": 218,"type": 269},{"src": 219,"type": 270},{"src": 220,"type": 271},{"src": 193,"type": 236},{"src": 221,"type": 272},{"src": 221,"type": 272},{"src": 181,"type": 273},{"src": 222,"type": 273},{"src": 222,"type": 211},{"src": 222,"type": 210},{"src": 27,"type": 255},{"src": 27,"type": 257},{"src": 181,"type": 274},{"src": 222,"type": 274},{"src": 193,"type": 236},{"src": 221,"type": 275},{"src": 221,"type": 272},{"src": 193,"type": 236},{"src": 221,"type": 275},{"src": 221,"type": 272},{"src": 221,"type": 272},{"src": 193,"type": 236},{"src": 221,"type": 272},{"src": 193,"type": 236},{"src": 193,"type": 236},{"src": 141,"type": 248},{"src": 141,"type": 276},{"src": 141,"type": 277},{"src": 223,"type": 234},{"src": 224,"type": 278},{"src": 225,"type": 279},{"src": 226,"type": 280},{"src": 227,"type": 281},{"src": 61,"type": 201},{"src": 228,"type": 282},{"src": 229,"type": 270},{"src": 230,"type": 283},{"src": 231,"type": 272},{"src": 231,"type": 272},{"src": 231,"type": 275},{"src": 231,"type": 272},{"src": 231,"type": 275},{"src": 231,"type": 272},{"src": 231,"type": 272},{"src": 231,"type": 272},{"src": 221,"type": 272},{"src": 61,"type": 284},{"src": 221,"type": 285},{"src": 232,"type": 286},{"src": 141,"type": 248},{"src": 233,"type": 287},{"src": 234,"type": 288},{"src": 235,"type": 289},{"src": 236,"type": 110},{"src": 236,"type": 110},{"src": 236,"type": 110},{"src": 237,"type": 110},{"src": 238,"type": 289},{"src": 239,"type": 290},{"src": 240,"type": 291},{"src": 240,"type": 292},{"src": 231,"type": 272},{"src": 141,"type": 293},{"src": 141,"type": 248},{"src": 231,"type": 285},{"src": 93,"type": 294},{"src": 221,"type": 272},{"src": 241,"type": 295},{"src": 100,"type": 296},{"src": 100,"type": 297},{"src": 242,"type": 298},{"src": 243,"type": 291},{"src": 243,"type": 292},{"src": 193,"type": 236},{"src": 221,"type": 272},{"src": 240,"type": 299},{"src": 231,"type": 272},{"src": 244,"type": 295},{"src": 181,"type": 300},{"src": 245,"type": 301},{"src": 246,"type": 302},{"src": 231,"type": 272},{"src": 247,"type": 299},{"src": 236,"type": 110},{"src": 243,"type": 303},{"src": 248,"type": 304},{"src": 249,"type": 305},{"src": 31,"type": 306},{"src": 250,"type": 307},{"src": 58,"type": 308},{"src": 251,"type": 309},{"src": 252,"type": 310},{"src": 253,"type": 311},{"src": 254,"type": 312},{"src": 255,"type": 312},{"src": 256,"type": 1},{"src": 191,"type": 313},{"src": 257,"type": 314},{"src": 258,"type": 200},{"src": 259,"type": 315},{"src": 260,"type": 316},{"src": 261,"type": 317},{"src": 262,"type": 318},{"src": 191,"type": 319},{"src": 263,"type": 317},{"src": 191,"type": 311},{"src": 264,"type": 318},{"src": 264,"type": 320},{"src": 191,"type": 311},{"src": 191,"type": 311},{"src": 191,"type": 7},{"src": 37,"type": 42},{"src": 265,"type": 321},{"src": 266,"type": 322},{"src": 266,"type": 323},{"src": 267,"type": 324},{"src": 267,"type": 325},{"src": 267,"type": 324},{"src": 267,"type": 326},{"src": 267,"type": 327},{"src": 268,"type": 328},{"src": 37,"type": 329},{"src": 269,"type": 318},{"src": 270,"type": 317},{"src": 37,"type": 330},{"src": 37,"type": 330},{"src": 37,"type": 42},{"src": 37,"type": 330},{"src": 37,"type": 330},{"src": 37,"type": 224},{"src": 61,"type": 62},{"src": 271,"type": 331},{"src": 61,"type": 332},{"src": 61,"type": 333},{"src": 266,"type": 323},{"src": 266,"type": 334},{"src": 266,"type": 323},{"src": 266,"type": 335},{"src": 266,"type": 322},{"src": 272,"type": 336},{"src": 61,"type": 337},{"src": 61,"type": 338},{"src": 61,"type": 338},{"src": 61,"type": 62},{"src": 61,"type": 338},{"src": 61,"type": 338},{"src": 61,"type": 262},{"src": 141,"type": 176},{"src": 141,"type": 339},{"src": 61,"type": 333},{"src": 61,"type": 340},{"src": 61,"type": 333},{"src": 61,"type": 341},{"src": 61,"type": 332},{"src": 141,"type": 248},{"src": 141,"type": 176},{"src": 141,"type": 176},{"src": 141,"type": 248},{"src": 193,"type": 236},{"src": 221,"type": 342},{"src": 141,"type": 343},{"src": 141,"type": 339},{"src": 141,"type": 339},{"src": 221,"type": 272},{"src": 193,"type": 236},{"src": 193,"type": 236},{"src": 221,"type": 272},{"src": 231,"type": 342},{"src": 193,"type": 344},{"src": 221,"type": 342},{"src": 221,"type": 342},{"src": 231,"type": 272},{"src": 231,"type": 272},{"src": 240,"type": 345},{"src": 231,"type": 342},{"src": 231,"type": 342},{"src": 243,"type": 345},{"src": 98,"type": 346},{"src": 273,"type": 351},{"src": 274,"type": 354},{"src": 275,"type": 357},{"src": 276,"type": 360},{"src": 277,"type": 363},{"src": 278,"type": 365},{"src": 279,"type": 366},{"src": 280,"type": 369},{"src": 281,"type": 371},{"src": 50,"type": 375},{"src": 282,"type": 376},{"src": 283,"type": 380},{"src": 284,"type": 386},{"src": 285,"type": 387},{"src": 286,"type": 388},{"src": 287,"type": 390},{"src": 288,"type": 393},{"src": 289,"type": 395},{"src": 290,"type": 397},{"src": 54,"type": 400},{"src": 291,"type": 401},{"src": 292,"type": 402},{"src": 293,"type": 405},{"src": 294,"type": 409},{"src": 295,"type": 410},{"src": 296,"type": 412},{"src": 297,"type": 415},{"src": 298,"type": 418},{"src": 299,"type": 420},{"src": 300,"type": 421},{"src": 37,"type": 628},{"src": 138,"type": 642},{"src": 47,"type": 643},{"src": 51,"type": 671},{"src": 48,"type": 673},{"src": 51,"type": 679},{"src": 48,"type": 681},{"src": 26,"type": 686},{"src": 142,"type": 831},{"src": 219,"type": 832},{"src": 18,"type": 852},{"src": 19,"type": 853},{"src": 25,"type": 854},{"src": 55,"type": 855},{"src": 27,"type": 856},{"src": 15,"type": 857},{"src": 53,"type": 858},{"src": 16,"type": 859},{"src": 13,"type": 860},{"src": 10,"type": 862},{"src": 246,"type": 863},{"src": 202,"type": 864},{"src": 100,"type": 865},{"src": 156,"type": 866},{"src": 170,"type": 867},{"src": 79,"type": 868},{"src": 118,"type": 869},{"src": 145,"type": 870},{"src": 181,"type": 871},{"src": 234,"type": 872},{"src": 206,"type": 873},{"src": 182,"type": 874},{"src": 222,"type": 875},{"src": 213,"type": 876},{"src": 242,"type": 878},{"src": 93,"type": 879},{"src": 201,"type": 880},{"src": 31,"type": 881},{"src": 56,"type": 882},{"src": 158,"type": 883},{"src": 58,"type": 895},{"src": 126,"type": 896},{"src": 74,"type": 897},{"src": 49,"type": 899},{"src": 75,"type": 900},{"src": 5,"type": 901},{"src": 191,"type": 902},{"src": 101,"type": 904},{"src": 121,"type": 905},{"src": 120,"type": 906},{"src": 76,"type": 909},{"src": 89,"type": 912},{"src": 266,"type": 913},{"src": 141,"type": 914},{"src": 231,"type": 915},{"src": 61,"type": 916},{"src": 240,"type": 917},{"src": 193,"type": 918},{"src": 2636,"type": 920},{"src": 247,"type": 921},{"src": 243,"type": 922},{"src": 221,"type": 923},{"src": 71,"type": 932},{"src": 165,"type": 933},{"src": 159,"type": 934},{"src": 153,"type": 935},{"src": 164,"type": 936},{"src": 204,"type": 937},{"src": 166,"type": 938},{"src": 150,"type": 939},{"src": 157,"type": 940},{"src": 160,"type": 942},{"src": 167,"type": 943},{"src": 162,"type": 944},{"src": 161,"type": 945},{"src": 163,"type": 946},{"src": 2753,"type": 948},{"src": 2756,"type": 949},{"src": 2777,"type": 951},{"src": 2786,"type": 952},{"src": 2795,"type": 953},{"src": 2796,"type": 954},{"src": 2797,"type": 952},{"src": 2819,"type": 955},{"src": 2820,"type": 956},{"src": 2827,"type": 957},{"src": 2837,"type": 958},{"src": 2841,"type": 959},{"src": 2849,"type": 960},{"src": 2850,"type": 961},{"src": 2853,"type": 962},{"src": 2858,"type": 963},{"src": 2865,"type": 956},{"src": 2868,"type": 964},{"src": 2883,"type": 965},{"src": 2896,"type": 966},{"src": 264,"type": 969},{"src": 267,"type": 970},{"src": 236,"type": 982},{"src": 3379,"type": 398},{"src": 119,"type": 1001},{"src": 114,"type": 1002},{"src": 229,"type": 1009}],"errors": [{"src": 3966,"name": "DiskQuota"},{"src": 3967,"name": "FileTooBig"},{"src": 3968,"name": "InputOutput"},{"src": 3969,"name": "NoSpaceLeft"},{"src": 3970,"name": "AccessDenied"},{"src": 3971,"name": "BrokenPipe"},{"src": 3972,"name": "SystemResources"},{"src": 3973,"name": "OperationAborted"},{"src": 3974,"name": "WouldBlock"},{"src": 3975,"name": "Unexpected"},{"src": 3976,"name": "InputOutput"},{"src": 3977,"name": "SystemResources"},{"src": 3978,"name": "IsDir"},{"src": 3979,"name": "OperationAborted"},{"src": 3980,"name": "BrokenPipe"},{"src": 3981,"name": "ConnectionResetByPeer"},{"src": 3982,"name": "WouldBlock"},{"src": 3983,"name": "Unseekable"},{"src": 3984,"name": "OutOfMemory"},{"src": 3985,"name": "UnalignedMemory"},{"src": 3986,"name": "OutOfMemory"},{"src": 3987,"name": "NoStandardHandleAttached"},{"src": 3988,"name": "Unexpected"},{"src": 3989,"name": "SharingViolation"},{"src": 3990,"name": "PathAlreadyExists"},{"src": 3991,"name": "FileNotFound"},{"src": 3992,"name": "AccessDenied"},{"src": 3993,"name": "PipeBusy"},{"src": 3994,"name": "NameTooLong"},{"src": 3995,"name": "InvalidUtf8"},{"src": 3996,"name": "BadPathName"},{"src": 3997,"name": "Unexpected"},{"src": 3998,"name": "SymLinkLoop"},{"src": 3999,"name": "ProcessFdQuotaExceeded"},{"src": 4000,"name": "SystemFdQuotaExceeded"},{"src": 4001,"name": "NoDevice"},{"src": 4002,"name": "SystemResources"},{"src": 4003,"name": "FileTooBig"},{"src": 4004,"name": "IsDir"},{"src": 4005,"name": "NoSpaceLeft"},{"src": 4006,"name": "NotDir"},{"src": 4007,"name": "DeviceBusy"},{"src": 4008,"name": "SystemResources"},{"src": 4009,"name": "Overflow"},{"src": 4010,"name": "MemoryMappingNotSupported"},{"src": 4011,"name": "AccessDenied"},{"src": 4012,"name": "PermissionDenied"},{"src": 4013,"name": "LockedMemoryLimitExceeded"},{"src": 4014,"name": "OutOfMemory"},{"src": 4015,"name": "MissingDebugInfo"},{"src": 4016,"name": "EndOfFile"},{"src": 4017,"name": "InvalidDebugInfo"},{"src": 4018,"name": "EndOfStream"},{"src": 4019,"name": "Overflow"},{"src": 4020,"name": "OutOfMemory"},{"src": 4021,"name": "EnvironmentVariableNotFound"},{"src": 4022,"name": "InvalidUtf8"},{"src": 4023,"name": "ElementNotFound"},{"src": 4024,"name": "AccessDenied"},{"src": 4025,"name": "FileNotFound"},{"src": 4026,"name": "NameTooLong"},{"src": 4027,"name": "PathAlreadyExists"},{"src": 4028,"name": "SystemCannotYield"},{"src": 4019,"name": "Overflow"},{"src": 4029,"name": "TimerUnsupported"},{"src": 4030,"name": "BufferTooSmall"}],"astNodes": [{"file": 11,"line": 358,"col": 4,"docs": " This function is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n","fields": [4031,4032]},{"file": 0,"line": 581,"col": 0},{"file": 0,"line": 601,"col": 0},{"file": 0,"line": 778,"col": 0},{"file": 0,"line": 789,"col": 0},{"file": 18,"line": 222,"col": 4,"fields": [4033,4034,4035,4036],"varArgs": true},{"file": 31,"line": 429,"col": 8,"fields": [4037]},{"file": 18,"line": 209,"col": 4,"docs": " This function invokes undefined behavior when `ok` is `false`.\n In Debug and ReleaseSafe modes, calls to this function are always\n generated, and the `unreachable` statement triggers a panic.\n In ReleaseFast and ReleaseSmall modes, calls to this function are\n optimized away, and in fact the optimizer is able to use the assertion\n in its heuristics.\n Inside a test block, it is best to use the `std.testing` module rather\n than this function, because this function may not detect a test failure\n in ReleaseFast and ReleaseSmall mode. Outside of a test block, this assert\n function is the correct function to use.\n","fields": [4038]},{"file": 0,"line": 235,"col": 12,"fields": [4039]},{"file": 0,"line": 377,"col": 8,"fields": [4040,4041]},{"file": 14,"line": 25,"col": 4,"docs": " This function is intended to be used only in tests. When the two values are not\n equal, prints diagnostics to stderr to show exactly how they are not equal,\n then aborts.\n The types must match exactly.\n","fields": [4042,4043]},{"file": 0,"line": 356,"col": 8,"fields": [4044,4045]},{"file": 0,"line": 457,"col": 8,"fields": [4046]},{"file": 15,"line": 79,"col": 8,"docs": " Returns a pointer to undefined memory.\n Call `destroy` with the result to free the memory.\n","fields": [4047,4048]},{"file": 14,"line": 147,"col": 4,"docs": " This function is intended to be used only in tests. When `ok` is false, the test fails.\n A message is printed to stderr and then abort is called.\n","fields": [4049]},{"file": 15,"line": 103,"col": 8,"docs": " Allocates an array of `n` items of type `T` and sets all the\n items to `undefined`. Depending on the Allocator\n implementation, it may be required to call `free` once the\n memory is no longer needed, to avoid a resource leak. If the\n `Allocator` implementation is unknown, then correct code will\n call `free` when done.\n\n For allocating a single item, see `create`.\n","fields": [4050,4051,4052]},{"file": 15,"line": 230,"col": 8,"docs": " Free an array allocated with `alloc`. To free a single item,\n see `destroy`.\n","fields": [4053,4054]},{"file": 0,"line": 448,"col": 8,"fields": [4055,4056]},{"file": 15,"line": 87,"col": 8,"docs": " `ptr` should be the return value of `create`, or otherwise\n have the same address and alignment property.\n","fields": [4057,4058]},{"file": 15,"line": 148,"col": 8,"docs": " This function requests a new byte size for an existing allocation,\n which can be larger, smaller, or the same size as the old memory\n allocation.\n This function is preferred over `shrink`, because it can fail, even\n when shrinking. This gives the allocator a chance to perform a\n cheap shrink operation if possible, or otherwise return OutOfMemory,\n indicating that the caller should keep their capacity, for example\n in `std.ArrayList.shrink`.\n If you need guaranteed success, call `shrink`.\n If `new_n` is 0, this is the same as `free` and it always succeeds.\n","fields": [4059,4060,4061]},{"file": 0,"line": 145,"col": 16,"fields": [4062]},{"file": 0,"line": 152,"col": 16,"fields": [4063]},{"file": 0,"line": 126,"col": 12,"fields": [4064]},{"file": 0,"line": 161,"col": 16,"fields": [4065]},{"file": 0,"line": 664,"col": 0,"fields": [4066]},{"file": 15,"line": 190,"col": 8,"docs": " Prefer calling realloc to shrink if you can tolerate failure, such as\n in an ArrayList data structure with a storage capacity.\n Shrink always succeeds, and `new_n` must be <= `old_mem.len`.\n Returned slice has same alignment as old_mem.\n Shrinking to 0 is the same as calling `free`.\n","fields": [4067,4068,4069]},{"file": 0,"line": 692,"col": 0,"fields": [4070,4071]},{"file": 15,"line": 107,"col": 8,"fields": [4072,4073,4074,4075]},{"file": 31,"line": 169,"col": 4,"fields": [4076,4077,4078,4079,4080]},{"file": 31,"line": 129,"col": 4,"fields": [4081,4082,4083,4084,4085]},{"file": 31,"line": 42,"col": 4,"fields": [4086,4087,4088]},{"file": 16,"line": 255,"col": 4,"docs": " Returns the smaller number. When one of the parameter's type's full range fits in the other,\n the return type is the smaller type.\n","fields": [4089,4090]},{"file": 17,"line": 2254,"col": 4,"docs": " Deletes the mappings for the specified address range, causing\n further references to addresses within the range to generate invalid memory references.\n Note that while POSIX allows unmapping a region in the middle of an existing mapping,\n Zig's munmap function does not, for two reasons:\n * It violates the Zig principle that resource deallocation must succeed.\n * The Windows function, VirtualFree, has this restriction.\n","fields": [4091]},{"file": 17,"line": 174,"col": 4,"docs": " Causes abnormal process termination.\n If linking against libc, this calls the abort() libc function. Otherwise\n it raises SIGABRT followed by SIGKILL and finally lo\n","fields": []},{"file": 18,"line": 55,"col": 4,"fields": []},{"file": 21,"line": 46,"col": 4,"fields": []},{"file": 35,"line": 338,"col": 8,"fields": [4092]},{"file": 8,"line": 37,"col": 12,"fields": [4093,4094,4095],"varArgs": true},{"file": 18,"line": 183,"col": 4,"docs": " Tries to print a stack trace to stderr, unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [4096]},{"file": 18,"line": 91,"col": 4,"docs": " Tries to print the current stack trace to stderr, unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [4097]},{"file": 31,"line": 455,"col": 4,"fields": [4098,4099,4100,4101,4102]},{"file": 15,"line": 1507,"col": 4,"docs": " Round an address up to the nearest aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [4103,4104]},{"file": 31,"line": 440,"col": 4,"fields": [4105,4106,4107]},{"file": 31,"line": 477,"col": 4,"fields": [4108,4109,4110,4111,4112]},{"file": 0,"line": 186,"col": 16,"fields": []},{"file": 0,"line": 391,"col": 8,"fields": [4113,4114,4115,4116,4117]},{"file": 0,"line": 433,"col": 8,"fields": [4118,4119,4120,4121,4122]},{"file": 0,"line": 92,"col": 8,"fields": [4123,4124]},{"file": 0,"line": 344,"col": 8,"fields": [4125,4126]},{"file": 18,"line": 213,"col": 4,"fields": [4127,4128],"varArgs": true},{"file": 16,"line": 306,"col": 4,"fields": [4129,4130]},{"file": 0,"line": 337,"col": 8,"fields": [4131,4132]},{"file": 0,"line": 350,"col": 8,"fields": [4133]},{"file": 15,"line": 159,"col": 8,"docs": " This is the same as `realloc`, except caller may additionally request\n a new alignment, which can be larger, smaller, or the same as the old\n allocation.\n","fields": [4134,4135,4136,4137]},{"file": 16,"line": 751,"col": 4,"fields": [4138]},{"file": 15,"line": 201,"col": 8,"docs": " This is the same as `shrink`, except caller may additionally request\n a new alignment, which must be smaller or the same as the old\n allocation.\n","fields": [4139,4140,4141,4142]},{"file": 16,"line": 314,"col": 4,"fields": [4143,4144,4145]},{"file": 17,"line": 2216,"col": 4,"docs": " Map files or devices into memory.\n Use of a mapped region can result in these signals:\n * SIGSEGV - Attempted write into a region mapped as read-only.\n * SIGBUS - Attempted  access to a portion of the buffer that does not correspond to the file\n","fields": [4146,4147,4148,4149,4150,4151]},{"file": 28,"line": 23,"col": 4,"fields": [4152]},{"file": 35,"line": 139,"col": 8,"fields": [4153]},{"file": 35,"line": 379,"col": 8,"fields": [4154,4155]},{"file": 22,"line": 90,"col": 4,"docs": " Renders fmt string with args, calling output with slices of bytes.\n If `output` returns an error, the error is returned from `format` and\n `output` is not called again.\n\n The format string must be comptime known and may contain placeholders following\n this format:\n `{[position][specifier]:[fill][alignment][width].[precision]}`\n\n Each word between `[` and `]` is a parameter you have to replace with something:\n\n - *position* is the index of the argument that should be inserted\n - *specifier* is a type-dependent formatting option that determines how a type should formatted (see below)\n - *fill* is a single character which is used to pad the formatted text\n - *alignment* is one of the three characters `<`, `^` or `>`. they define if the text is *left*, *center*, or *right* aligned\n - *width* is the total width of the field in characters\n - *precision* specifies how many decimals a formatted number should have\n\n Note that most of the parameters are optional and may be omitted. Also you can leave out separators like `:` and `.` when\n all parameters after the separator are omitted.\n Only exception is the *fill* parameter. If *fill* is required, one has to specify *alignment* as well, as otherwise\n the digits after `:` is interpreted as *width*, not *fill*.\n\n The *specifier* has several options for types:\n - `x` and `X`:\n   - format the non-numeric value as a string of bytes in hexadecimal notation (\"binary dump\") in either lower case or upper case\n   - output numeric value in hexadecimal notation\n - `s`: print a pointer-to-many as a c-string, use zero-termination\n - `B` and `Bi`: output a memory size in either metric (1000) or power-of-two (1024) based notation. works for both float and integer values.\n - `e`: output floating point value in scientific notation\n - `d`: output numeric value in decimal notation\n - `b`: output integer value in binary notation\n - `c`: output integer as an ASCII character. Integer type must have 8 bits at max.\n - `*`: output the address of the value instead of the value itself.\n\n If a formatted user type contains a function of the type\n ```\n fn format(value: ?, comptime fmt: []const u8, options: std.fmt.FormatOptions, context: var, comptime Errors: type, output: fn (@typeOf(context), []const u8) Errors!void) Errors!void\n ```\n with `?` being the type formatted, this function will be called instead of the default implementation.\n This allows user types to be formatted in a logical manner instead of dumping all fields of the type.\n\n A user type may be a `struct`, `union` or `enum` type.\n","fields": [4156,4157,4158,4159,4160],"varArgs": true},{"file": 10,"line": 522,"col": 8,"fields": [4161]},{"file": 10,"line": 530,"col": 8,"fields": [4162,4163]},{"file": 18,"line": 74,"col": 4,"fields": []},{"file": 18,"line": 836,"col": 4,"docs": " TODO once https://github.com/ziglang/zig/issues/3157 is fully implemented,\n make this `noasync fn` and remove the individual noasync calls.\n","fields": [4164]},{"file": 18,"line": 2346,"col": 0,"fields": []},{"file": 9,"line": 458,"col": 8,"fields": [4165]},{"file": 9,"line": 426,"col": 8,"fields": [4166]},{"file": 18,"line": 1096,"col": 0,"fields": [4167]},{"file": 18,"line": 1215,"col": 4,"fields": [4168,4169]},{"file": 27,"line": 111,"col": 4,"docs": " Stable in-place sort. O(n) best case, O(n*log(n)) worst case and average case. O(1) memory (no allocator required).\n Currently implemented as block sort.\n","fields": [4170,4171,4172]},{"file": 10,"line": 94,"col": 12,"fields": [4173]},{"file": 18,"line": 83,"col": 0,"fields": []},{"file": 18,"line": 256,"col": 4,"fields": [4174,4175,4176,4177,4178]},{"file": 18,"line": 348,"col": 4,"docs": " TODO once https://github.com/ziglang/zig/issues/3157 is fully implemented,\n make this `noasync fn` and remove the individual noasync calls.\n","fields": [4179,4180,4181,4182]},{"file": 18,"line": 692,"col": 0,"fields": [4183,4184,4185,4186]},{"file": 33,"line": 599,"col": 4,"fields": []},{"file": 18,"line": 674,"col": 0,"fields": [4187,4188]},{"file": 15,"line": 364,"col": 4,"fields": [4189,4190]},{"file": 50,"line": 848,"col": 4,"fields": [4191]},{"file": 18,"line": 1705,"col": 0,"fields": [4192,4193,4194]},{"file": 10,"line": 127,"col": 12,"docs": " If key exists this function cannot fail.\n If there is an existing item with `key`, then the result\n kv pointer points to it, and found_existing is true.\n Otherwise, puts a new item with undefined value, and\n the kv pointer points to it. Caller should then initialize\n the data.\n","fields": [4195,4196]},{"file": 10,"line": 216,"col": 12,"fields": [4197,4198]},{"file": 10,"line": 308,"col": 8,"fields": [4199]},{"file": 10,"line": 289,"col": 8,"fields": [4200]},{"file": 10,"line": 173,"col": 8,"docs": " Sets the capacity to the new capacity if the new\n capacity is greater than the current capacity.\n New capacity must be a power of two.\n","fields": [4201,4202]},{"file": 10,"line": 299,"col": 8,"fields": [4203,4204]},{"file": 10,"line": 321,"col": 8,"docs": " Returns a pointer to the new entry.\n Asserts that there is enough space for the new item.\n","fields": [4205,4206]},{"file": 21,"line": 83,"col": 4,"docs": " On success, caller owns returned buffer.\n TODO move this to `std.fs` and add a version to `std.fs.Dir`.\n","fields": [4207,4208,4209]},{"file": 35,"line": 28,"col": 8,"docs": " Call close to clean up.\n","fields": [4210]},{"file": 35,"line": 215,"col": 8,"fields": [4211]},{"file": 35,"line": 164,"col": 8,"docs": " Upon success, the stream is in an uninitialized state. To continue using it,\n you must use the open() function.\n","fields": [4212]},{"file": 16,"line": 718,"col": 4,"docs": " Cast an integer to a different integer type. If the value doesn't fit,\n return an error.\n","fields": [4213,4214]},{"file": 35,"line": 331,"col": 8,"fields": [4215]},{"file": 13,"line": 57,"col": 12,"docs": " Returns the number of bytes read. If the number read would be smaller than buf.len,\n error.EndOfStream is returned instead.\n","fields": [4216,4217]},{"file": 13,"line": 45,"col": 12,"docs": " Returns the number of bytes read. If the number read is smaller than buf.len, it\n means the stream reached the end. Reaching the end of a stream is not an error\n condition.\n","fields": [4218,4219]},{"file": 10,"line": 232,"col": 12,"docs": " Returns any kv pair that was removed.\n","fields": [4220,4221]},{"file": 15,"line": 349,"col": 4,"docs": " Compares two slices and returns whether they are equal.\n","fields": [4222,4223,4224]},{"file": 18,"line": 2303,"col": 0,"fields": [4225,4226]},{"file": 15,"line": 564,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n Assumes the endianness of memory is native. This means the function can\n simply pointer cast memory.\n","fields": [4227,4228]},{"file": 18,"line": 2285,"col": 0,"fields": [4229,4230,4231]},{"file": 18,"line": 2293,"col": 0,"fields": [4232]},{"file": 18,"line": 2299,"col": 0,"fields": [4233]},{"file": 7,"line": 35,"col": 12,"docs": " Deinitialize with `deinit` or use `toOwnedSlice`.\n","fields": [4234]},{"file": 18,"line": 1269,"col": 12,"fields": [4235]},{"file": 7,"line": 130,"col": 12,"docs": " Extend the list by 1 element. Allocates more memory as\n necessary.\n","fields": [4236,4237]},{"file": 7,"line": 209,"col": 12,"docs": " Increase length by 1, returning pointer to the new item.\n","fields": [4238]},{"file": 7,"line": 198,"col": 12,"fields": [4239,4240]},{"file": 7,"line": 85,"col": 12,"docs": " Return the maximum number of items the list can hold\n without allocating more memory.\n","fields": [4241]},{"file": 7,"line": 215,"col": 12,"fields": [4242]},{"file": 18,"line": 2320,"col": 0,"fields": [4243]},{"file": 18,"line": 1438,"col": 8,"fields": [4244,4245,4246,4247]},{"file": 7,"line": 56,"col": 12,"docs": " Return list as const slice. Only valid while the list\n doesn't change size.\n","fields": [4248]},{"file": 47,"line": 28,"col": 4,"fields": [4249,4250]},{"file": 18,"line": 1460,"col": 8,"fields": [4251]},{"file": 50,"line": 84,"col": 4,"docs": " Naively combines a series of paths with the native path seperator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [4252,4253]},{"file": 50,"line": 33,"col": 0,"docs": " This is different from mem.join in that the separator will not be repeated if\n it is found at the end or beginning of a pair of consecutive paths.\n","fields": [4254,4255,4256]},{"file": 15,"line": 249,"col": 4,"docs": " Copy all of source into dest at position 0.\n dest.len must be >= source.len.\n dest.ptr must be <= src.ptr.\n","fields": [4257,4258,4259]},{"file": 47,"line": 88,"col": 4,"fields": [4260,4261]},{"file": 18,"line": 779,"col": 0,"fields": [4262,4263,4264,4265,4266,4267,4268]},{"file": 18,"line": 1173,"col": 0,"fields": [4269,4270]},{"file": 35,"line": 313,"col": 8,"fields": [4271,4272]},{"file": 8,"line": 41,"col": 12,"fields": [4273,4274]},{"file": 8,"line": 25,"col": 12,"fields": [4275,4276]},{"file": 18,"line": 1411,"col": 4,"fields": [4277]},{"file": 18,"line": 316,"col": 4,"fields": [4278,4279,4280,4281]},{"file": 18,"line": 280,"col": 8,"fields": [4282]},{"file": 18,"line": 296,"col": 4,"fields": [4283]},{"file": 15,"line": 1528,"col": 4,"docs": " Round an address up to the previous aligned address\n The alignment must be a power of 2 and greater than 0.\n","fields": [4284,4285]},{"file": 0,"line": 169,"col": 16,"fields": [4286]},{"file": 0,"line": 174,"col": 16,"fields": [4287,4288,4289]},{"file": 0,"line": 246,"col": 8,"fields": [4290,4291]},{"file": 0,"line": 239,"col": 8,"fields": [4292,4293]},{"file": 0,"line": 130,"col": 16,"fields": [4294]},{"file": 0,"line": 165,"col": 16,"fields": [4295]},{"file": 0,"line": 291,"col": 8,"fields": [4296,4297,4298]},{"file": 0,"line": 311,"col": 8,"fields": [4299,4300]},{"file": 0,"line": 97,"col": 8,"fields": [4301,4302]},{"file": 17,"line": 2774,"col": 4,"docs": " Call this when you made a syscall or something that sets errno\n and you get an unexpected error.\n","fields": [4303]},{"file": 35,"line": 319,"col": 8,"fields": [4304,4305]},{"file": 22,"line": 318,"col": 4,"fields": [4306,4307,4308,4309,4310,4311,4312]},{"file": 10,"line": 536,"col": 4,"fields": [4313]},{"file": 31,"line": 346,"col": 8,"fields": [4314]},{"file": 18,"line": 1211,"col": 4,"docs": " Returns the address from the macho file\n","fields": [4315]},{"file": 15,"line": 1221,"col": 4,"fields": [4316,4317,4318]},{"file": 27,"line": 47,"col": 4,"fields": [4319,4320]},{"file": 27,"line": 82,"col": 4,"fields": [4321]},{"file": 27,"line": 66,"col": 4,"fields": [4322]},{"file": 27,"line": 33,"col": 4,"fields": [4323]},{"file": 27,"line": 963,"col": 0,"fields": [4324,4325,4326,4327,4328,4329]},{"file": 27,"line": 97,"col": 4,"fields": [4330]},{"file": 27,"line": 61,"col": 4,"fields": [4331]},{"file": 27,"line": 905,"col": 0,"fields": [4332,4333,4334,4335,4336,4337]},{"file": 27,"line": 26,"col": 4,"fields": [4338,4339]},{"file": 27,"line": 86,"col": 4,"fields": [4340]},{"file": 15,"line": 1257,"col": 4,"docs": " In-place rotation of the values in an array ([0 1 2 3] becomes [1 2 3 0] if we rotate by 1)\n Assumes 0 <= amount <= items.len\n","fields": [4341,4342,4343]},{"file": 27,"line": 935,"col": 0,"fields": [4344,4345,4346,4347,4348,4349]},{"file": 53,"line": 14,"col": 4,"docs": " Returns the square root of x.\n\n Special Cases:\n  - sqrt(+inf)  = +inf\n  - sqrt(+-0)   = +-0\n  - sqrt(x)     = nan if x < 0\n  - sqrt(nan)   = nan\n","fields": [4350]},{"file": 27,"line": 841,"col": 0,"fields": [4351,4352,4353,4354,4355,4356]},{"file": 27,"line": 827,"col": 0,"fields": [4357,4358,4359,4360,4361,4362]},{"file": 27,"line": 804,"col": 0,"fields": [4363,4364,4365,4366,4367]},{"file": 27,"line": 869,"col": 0,"fields": [4368,4369,4370,4371,4372]},{"file": 27,"line": 777,"col": 0,"fields": [4373,4374,4375,4376,4377,4378]},{"file": 27,"line": 735,"col": 0,"fields": [4379,4380,4381,4382,4383]},{"file": 27,"line": 8,"col": 4,"docs": " Stable in-place sort. O(n) best case, O(pow(n, 2)) worst case. O(1) memory (no allocator required).\n","fields": [4384,4385,4386]},{"file": 27,"line": 813,"col": 0,"fields": [4387,4388,4389,4390,4391,4392]},{"file": 27,"line": 855,"col": 0,"fields": [4393,4394,4395,4396,4397,4398]},{"file": 33,"line": 130,"col": 4,"docs": " Caller must free returned memory.\n TODO make this go through libc when we have it\n","fields": [4399,4400]},{"file": 35,"line": 170,"col": 8,"docs": " Test whether the file refers to a terminal.\n See also `supportsAnsiEscapeCodes`.\n","fields": [4401]},{"file": 15,"line": 358,"col": 4,"fields": [4402,4403]},{"file": 50,"line": 856,"col": 4,"fields": [4404]},{"file": 10,"line": 388,"col": 8,"fields": [4405,4406]},{"file": 10,"line": 403,"col": 8,"fields": [4407,4408]},{"file": 10,"line": 407,"col": 8,"fields": [4409,4410]},{"file": 17,"line": 2750,"col": 4,"docs": " Used to convert a slice to a null terminated slice on the stack.\n TODO https://github.com/ziglang/zig/issues/287\n","fields": [4411]},{"file": 35,"line": 38,"col": 8,"docs": " `openRead` except with a null terminated path\n","fields": [4412]},{"file": 35,"line": 247,"col": 8,"fields": [4413]},{"file": 17,"line": 88,"col": 4,"docs": " Closes the file descriptor.\n This function is not capable of returning any indication of failure. An\n application which wants to ensure writes have succeeded before closing\n must call `fsync` before `close`.\n Note: The Zig standard library does not support POSIX thread cancellation.\n","fields": [4414]},{"file": 35,"line": 365,"col": 8,"fields": [4415,4416]},{"file": 13,"line": 31,"col": 12,"docs": " Returns the number of bytes read. It may be less than buffer.len.\n If the number of bytes read is 0, it means end of stream.\n End of stream is not an error condition.\n","fields": [4417,4418]},{"file": 15,"line": 537,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n Assumes the endianness of memory is native. This means the function can\n simply pointer cast memory.\n","fields": [4419,4420]},{"file": 15,"line": 603,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n","fields": [4421,4422,4423]},{"file": 7,"line": 79,"col": 12,"docs": " Return length of the list.\n","fields": [4424]},{"file": 17,"line": 287,"col": 4,"docs": " Returns the number of bytes that were read, which can be less than\n buf.len. If 0 bytes were read, that means EOF.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [4425,4426]},{"file": 0,"line": 190,"col": 16,"fields": [4427]},{"file": 0,"line": 215,"col": 16,"fields": [4428,4429]},{"file": 0,"line": 371,"col": 8,"fields": [4430,4431]},{"file": 0,"line": 198,"col": 16,"fields": [4432,4433]},{"file": 0,"line": 138,"col": 16,"fields": [4434]},{"file": 0,"line": 203,"col": 16,"fields": [4435,4436]},{"file": 18,"line": 48,"col": 4,"fields": [4437,4438],"varArgs": true},{"file": 17,"line": 449,"col": 4,"docs": " Write to a file descriptor. Keeps trying if it gets interrupted.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n TODO evented I/O integration is disabled until\n https://github.com/ziglang/zig/issues/3557 is solved.\n","fields": [4439,4440]},{"file": 22,"line": 551,"col": 4,"fields": [4441,4442,4443,4444,4445,4446]},{"file": 10,"line": 538,"col": 8,"fields": [4447]},{"file": 31,"line": 408,"col": 4,"fields": [4448,4449,4450,4451,4452]},{"file": 31,"line": 388,"col": 4,"fields": [4453,4454,4455]},{"file": 31,"line": 368,"col": 4,"fields": [4456,4457,4458]},{"file": 4,"line": 77,"col": 12,"docs": " Insert a new node at the head.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [4459,4460]},{"file": 31,"line": 419,"col": 4,"fields": [4461,4462,4463,4464,4465]},{"file": 4,"line": 58,"col": 12,"docs": " Initialize a linked list.\n\n Returns:\n     An empty linked list.\n","fields": []},{"file": 16,"line": 756,"col": 4,"fields": [4466,4467]},{"file": 15,"line": 1228,"col": 4,"docs": " In-place order reversal of a slice\n","fields": [4468,4469]},{"file": 53,"line": 105,"col": 0,"fields": [4470,4471]},{"file": 27,"line": 887,"col": 0,"fields": [4472,4473,4474,4475,4476]},{"file": 17,"line": 880,"col": 4,"docs": " Get an environment variable.\n See also `getenvC`.\n TODO make this go through libc when we have it\n","fields": [4477]},{"file": 15,"line": 381,"col": 4,"docs": " Copies ::m to newly allocated memory. Caller is responsible to free it.\n","fields": [4478,4479,4480]},{"file": 17,"line": 1512,"col": 4,"docs": " Test whether a file descriptor refers to a terminal.\n","fields": [4481]},{"file": 17,"line": 658,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n See also `open`.\n TODO https://github.com/ziglang/zig/issues/265\n","fields": [4482,4483,4484]},{"file": 17,"line": 2010,"col": 4,"fields": [4485]},{"file": 36,"line": 85,"col": 8,"fields": [4486]},{"file": 36,"line": 92,"col": 8,"fields": [4487]},{"file": 36,"line": 99,"col": 8,"fields": [4488]},{"file": 15,"line": 592,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n","fields": [4489,4490,4491]},{"file": 37,"line": 57,"col": 12,"fields": []},{"file": 38,"line": 113,"col": 8,"fields": []},{"file": 37,"line": 81,"col": 12,"fields": [4492]},{"file": 37,"line": 71,"col": 16,"fields": [4493]},{"file": 39,"line": 136,"col": 8,"fields": [4494]},{"file": 48,"line": 166,"col": 4,"docs": " Provides generic hashing for any eligible type.\n Only hashes `key` itself, pointers are not followed.\n Slices are rejected to avoid ambiguity on the user's intention.\n","fields": [4495,4496]},{"file": 39,"line": 162,"col": 8,"fields": [4497]},{"file": 22,"line": 470,"col": 0,"fields": [4498,4499,4500,4501,4502,4503]},{"file": 15,"line": 545,"col": 4,"docs": " Reads an integer from memory with bit count specified by T.\n The bit count of T must be evenly divisible by 8.\n This function cannot fail and cannot cause undefined behavior.\n Assumes the endianness of memory is foreign, so it must byte-swap.\n","fields": [4504,4505]},{"file": 51,"line": 29,"col": 8,"fields": [4506]},{"file": 17,"line": 3179,"col": 4,"fields": []},{"file": 32,"line": 10,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.\n","fields": [4507]},{"file": 38,"line": 134,"col": 8,"fields": [4508,4509,4510]},{"file": 38,"line": 128,"col": 8,"fields": [4511,4512]},{"file": 39,"line": 41,"col": 8,"fields": [4513]},{"file": 48,"line": 75,"col": 4,"docs": " Provides generic hashing for any eligible type.\n Strategy is provided to determine if pointers should be followed or not.\n","fields": [4514,4515,4516]},{"file": 39,"line": 73,"col": 8,"fields": [4517,4518]},{"file": 22,"line": 492,"col": 4,"fields": [4519,4520,4521,4522,4523,4524]},{"file": 17,"line": 2623,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.\n","fields": [4525,4526]},{"file": 39,"line": 144,"col": 8,"fields": [4527,4528]},{"file": 15,"line": 1349,"col": 4,"docs": "Given a pointer to a single item, returns a slice of the underlying bytes, preserving constness.\n","fields": [4529]},{"file": 39,"line": 26,"col": 0,"fields": [4530,4531,4532]},{"file": 39,"line": 11,"col": 0,"fields": [4533,4534]},{"file": 39,"line": 16,"col": 0,"fields": [4535]},{"file": 39,"line": 30,"col": 0,"fields": [4536,4537,4538]},{"file": 39,"line": 20,"col": 0,"fields": [4539,4540]},{"file": 22,"line": 883,"col": 4,"fields": [4541,4542,4543,4544,4545,4546,4547]},{"file": 39,"line": 62,"col": 8,"fields": [4548,4549]},{"file": 16,"line": 944,"col": 4,"fields": [4550,4551,4552]},{"file": 22,"line": 936,"col": 0,"fields": [4553,4554,4555,4556,4557,4558,4559]},{"file": 39,"line": 48,"col": 4,"fields": [4560,4561]},{"file": 22,"line": 1087,"col": 0,"fields": [4562,4563]},{"file": 15,"line": 275,"col": 4,"fields": [4564,4565,4566]},{"file": 22,"line": 905,"col": 0,"fields": [4567,4568,4569,4570,4571,4572,4573]},{"file": 24,"line": 662,"col": 4,"fields": [4574,4575]},{"file": 35,"line": 205,"col": 8,"docs": " Repositions read/write file offset relative to the beginning.\n","fields": [4576,4577]},{"file": 17,"line": 2408,"col": 4,"docs": " Repositions read/write file offset relative to the beginning.\n","fields": [4578,4579]},{"file": 54,"line": 179,"col": 0,"fields": [4580,4581,4582]},{"file": 54,"line": 170,"col": 0,"fields": [4583,4584,4585]},{"file": 18,"line": 2361,"col": 4,"fields": []},{"file": 54,"line": 191,"col": 0,"fields": []},{"file": 54,"line": 225,"col": 0,"fields": []},{"file": 3,"line": 5,"col": 4,"fields": []},{"file": 40,"line": 99,"col": 8,"docs": " Create a new progress node.\n Call `Node.end` when done.\n TODO solve https://github.com/ziglang/zig/issues/2765 and then change this\n API to return Progress rather than accept it as a parameter.\n","fields": [4586,4587,4588]},{"file": 35,"line": 175,"col": 8,"docs": " Test whether ANSI escape codes will be treated as such.\n","fields": [4589]},{"file": 32,"line": 125,"col": 8,"docs": " Initialize the timer structure.\n","fields": []},{"file": 40,"line": 57,"col": 12,"docs": " Create a new child progress node.\n Call `Node.end` when done.\n TODO solve https://github.com/ziglang/zig/issues/2765 and then change this\n API to set `self.parent.recently_updated_child` with the return value.\n Until that is fixed you probably want to call `activate` on the return value.\n","fields": [4590,4591,4592]},{"file": 40,"line": 90,"col": 12,"docs": " Tell the parent node that this node is actively being worked on.\n","fields": [4593]},{"file": 40,"line": 128,"col": 8,"docs": " Updates the terminal and resets `self.next_refresh_timestamp`.\n","fields": [4594]},{"file": 40,"line": 74,"col": 12,"fields": [4595]},{"file": 40,"line": 179,"col": 8,"fields": [4596,4597,4598],"varArgs": true},{"file": 17,"line": 899,"col": 4,"docs": " Get an environment variable with a null-terminated name.\n See also `getenv`.\n TODO https://github.com/ziglang/zig/issues/265\n","fields": [4599]},{"file": 22,"line": 1112,"col": 4,"fields": [4600,4601,4602],"varArgs": true},{"file": 40,"line": 189,"col": 4,"fields": [4603,4604,4605,4606],"varArgs": true},{"file": 32,"line": 154,"col": 8,"docs": " Reads the timer value since start or the last reset in nanoseconds\n","fields": [4607]},{"file": 40,"line": 120,"col": 8,"docs": " Updates the terminal if enough time has passed since last update.\n","fields": [4608]},{"file": 40,"line": 68,"col": 12,"docs": " This is the same as calling `start` and then `end` on the returned `Node`.\n","fields": [4609]},{"file": 22,"line": 1099,"col": 0,"fields": [4610,4611]},{"file": 32,"line": 178,"col": 4,"fields": []},{"file": 4,"line": 192,"col": 4,"docs": " A tail queue is headed by a pair of pointers, one to the head of the\n list and the other to the tail of the list. The elements are doubly\n linked so that an arbitrary element can be removed without a need to\n traverse the list. New elements can be added to the list before or\n after an existing element, at the head of the list, or at the end of\n the list. A tail queue may be traversed in either direction.\n","fields": [4612]},{"file": 5,"line": 9,"col": 4,"docs": " Many producer, many consumer, non-allocating, thread-safe.\n Uses a mutex to protect access.\n","fields": [4613]},{"file": 16,"line": 884,"col": 4,"fields": [4614]},{"file": 4,"line": 14,"col": 4,"docs": " A singly-linked list is headed by a single forward pointer. The elements\n are singly linked for minimum space and pointer manipulation overhead at\n the expense of O(n) removal for arbitrary elements. New elements can be\n added to the list after an existing element or at the head of the list.\n A singly-linked list may only be traversed in the forward direction.\n Singly-linked lists are ideal for applications with large datasets and\n few or no removals or for implementing a LIFO queue.\n","fields": [4615]},{"file": 7,"line": 11,"col": 4,"docs": " List of items.\n\n This is a wrapper around an array of T values. Initialize with\n `init`.\n","fields": [4616]},{"file": 55,"line": 20,"col": 4,"docs": " Returns the base-2 logarithm of x.\n\n Special Cases:\n  - log2(+inf)  = +inf\n  - log2(0)     = -inf\n  - log2(x)     = nan if x < 0\n  - log2(nan)   = nan\n","fields": [4617]},{"file": 8,"line": 13,"col": 4,"docs": " TODO this is not integrated with evented I/O yet.\n https://github.com/ziglang/zig/issues/3557\n","fields": [4618]},{"file": 42,"line": 261,"col": 4,"docs": "\n","fields": [4619]},{"file": 16,"line": 236,"col": 4,"docs": " Given two types, returns the smallest one which is capable of holding the\n full range of the minimum value.\n","fields": [4620,4621]},{"file": 10,"line": 32,"col": 4,"fields": [4622,4623,4624,4625]},{"file": 7,"line": 15,"col": 4,"fields": [4626,4627]},{"file": 16,"line": 891,"col": 4,"fields": [4628]},{"file": 42,"line": 118,"col": 12,"fields": [4629]},{"file": 29,"line": 88,"col": 4,"fields": [4630]},{"file": 16,"line": 430,"col": 4,"fields": [4631]},{"file": 42,"line": 228,"col": 4,"docs": "\n","fields": [4632]},{"file": 0,"line": 77,"col": 8,"fields": [4633]},{"file": 42,"line": 116,"col": 4,"docs": "\n","fields": [4634]},{"file": 10,"line": 528,"col": 4,"fields": [4635]},{"file": 12,"line": 8,"col": 4,"docs": " Many reader, many writer, non-allocating, thread-safe\n Uses a spinlock to protect push() and pop()\n When building in single threaded mode, this is a simple linked list.\n","fields": [4636]},{"file": 0,"line": 104,"col": 4,"fields": [4637]},{"file": 29,"line": 102,"col": 4,"fields": [4638]},{"file": 16,"line": 842,"col": 4,"fields": [4639,4640]},{"file": 13,"line": 14,"col": 4,"fields": [4641]},{"file": 42,"line": 322,"col": 4,"docs": "\n","fields": [4642]},{"file": 15,"line": 1330,"col": 0,"fields": [4643]},{"file": 10,"line": 520,"col": 4,"fields": [4644]},{"file": 0,"line": 84,"col": 8,"fields": [4645]},{"file": 4,"line": 193,"col": 11,"fields": [4646,4647,4648]},{"file": 5,"line": 10,"col": 11,"fields": [4649,4650,4651]},{"file": 6,"line": 14,"col": 20,"fields": [4652,4653]},{"file": 4,"line": 15,"col": 11,"fields": [4654]},{"file": 7,"line": 21,"col": 11,"fields": [4655,4656,4657]},{"file": 8,"line": 14,"col": 11,"fields": [4658]},{"file": 9,"line": 11,"col": 19,"fields": [4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686,4687,4688,4689,4690,4691,4692,4693,4694,4695]},{"file": 9,"line": 7,"col": 19,"fields": [4696,4697]},{"file": 10,"line": 33,"col": 11,"fields": [4698,4699,4700,4701,4702]},{"file": 18,"line": 1220,"col": 18,"fields": [4703,4704,4705]},{"file": 25,"line": 256,"col": 20,"fields": [4706]},{"file": 18,"line": 1398,"col": 18,"fields": [4707,4708,4709,4710]},{"file": 0,"line": 67,"col": 27,"fields": [4711,4712,4713]},{"file": 11,"line": 96,"col": 21,"fields": [4714,4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739]},{"file": 12,"line": 9,"col": 11,"fields": [4740,4741]},{"file": 41,"line": 66,"col": 25,"fields": [4742,4743]},{"file": 0,"line": 111,"col": 11,"fields": [4744,4745,4746]},{"file": 0,"line": 13,"col": 19,"fields": [4747,4748,4749,4750,4751]},{"file": 13,"line": 15,"col": 11,"fields": [4752]},{"file": 0,"line": 0,"col": 0,"fields": []},{"file": 1,"line": 0,"col": 0,"fields": []},{"file": 2,"line": 0,"col": 0,"fields": []},{"file": 3,"line": 0,"col": 0,"fields": []},{"file": 31,"line": 424,"col": 33,"fields": [4753,4754,4755]},{"file": 35,"line": 372,"col": 26,"fields": [4756,4757]},{"file": 35,"line": 11,"col": 17,"fields": [4758]},{"file": 11,"line": 44,"col": 23,"fields": [4759,4760]},{"file": 0,"line": 183,"col": 25,"fields": [4761]},{"file": 18,"line": 1205,"col": 20,"fields": [4762,4763,4764]},{"file": 10,"line": 314,"col": 34,"fields": [4765,4766]},{"file": 35,"line": 358,"col": 25,"fields": [4767,4768]},{"file": 11,"line": 335,"col": 19,"fields": [4769,4770]},{"file": 18,"line": 1257,"col": 38,"fields": [4771,4772,4773]},{"file": 18,"line": 1417,"col": 26,"fields": [4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790]},{"file": 18,"line": 1405,"col": 21,"fields": [4791,4792,4793,4794]},{"file": 18,"line": 276,"col": 26,"fields": [4795,4796]},{"file": 22,"line": 18,"col": 26,"fields": [4797,4798,4799,4800]},{"file": 31,"line": 337,"col": 27,"fields": [4801,4802,4803,4804]},{"file": 27,"line": 38,"col": 17,"fields": [4805,4806,4807,4808,4809,4810,4811]},{"file": 27,"line": 22,"col": 14,"fields": [4812,4813]},{"file": 36,"line": 107,"col": 21,"fields": [4814,4815]},{"file": 36,"line": 61,"col": 17,"fields": [4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834,4835,4836,4837]},{"file": 37,"line": 40,"col": 4,"fields": [4838,4839]},{"file": 38,"line": 107,"col": 20,"fields": [4840,4841]},{"file": 37,"line": 68,"col": 25,"fields": [4842]},{"file": 39,"line": 130,"col": 19,"fields": [4843,4844,4845]},{"file": 39,"line": 37,"col": 24,"fields": [4846,4847]},{"file": 40,"line": 42,"col": 21,"fields": [4848,4849,4850,4851,4852,4853]},{"file": 4,"line": 0,"col": 0,"fields": []},{"file": 4,"line": 197,"col": 25,"fields": [4854,4855,4856]},{"file": 5,"line": 0,"col": 0,"fields": []},{"file": 6,"line": 0,"col": 0,"fields": []},{"file": 6,"line": 18,"col": 23,"fields": [4857,4858,4859]},{"file": 6,"line": 24,"col": 20,"fields": [4860,4861,4862,4863,4864,4865,4866]},{"file": 4,"line": 19,"col": 25,"fields": [4867,4868]},{"file": 7,"line": 0,"col": 0,"fields": []},{"file": 8,"line": 0,"col": 0,"fields": []},{"file": 9,"line": 0,"col": 0,"fields": []},{"file": 9,"line": 149,"col": 20,"fields": [4869,4870,4871,4872,4873,4874,4875,4876,4877,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890]},{"file": 9,"line": 193,"col": 22,"fields": [4891,4892,4893]},{"file": 9,"line": 51,"col": 21,"fields": [4894,4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939,4940,4941,4942,4943]},{"file": 10,"line": 0,"col": 0,"fields": []},{"file": 10,"line": 44,"col": 23,"fields": [4944,4945]},{"file": 10,"line": 55,"col": 35,"fields": [4946,4947]},{"file": 10,"line": 49,"col": 22,"fields": [4948,4949,4950]},{"file": 34,"line": 251,"col": 21,"fields": [4951,4952,4953,4954,4955]},{"file": 25,"line": 260,"col": 22,"fields": [4956,4957,4958,4959,4960,4961,4962,4963,4964,4965]},{"file": 11,"line": 0,"col": 0,"fields": []},{"file": 11,"line": 182,"col": 23,"fields": [4966,4967,4968]},{"file": 11,"line": 159,"col": 22,"fields": [4969,4970]},{"file": 11,"line": 196,"col": 27,"fields": [4971,4972]},{"file": 11,"line": 139,"col": 24,"fields": [4973,4974,4975,4976,4977,4978]},{"file": 11,"line": 214,"col": 26,"fields": [4979,4980]},{"file": 11,"line": 166,"col": 32,"fields": [4981,4982,4983]},{"file": 11,"line": 289,"col": 28,"fields": [4984,4985,4986]},{"file": 11,"line": 238,"col": 22,"fields": [4987,4988,4989,4990]},{"file": 11,"line": 190,"col": 25,"fields": [4991]},{"file": 11,"line": 221,"col": 21,"fields": [4992,4993,4994,4995]},{"file": 11,"line": 247,"col": 34,"fields": [4996,4997,4998,4999,5000,5001]},{"file": 11,"line": 282,"col": 23,"fields": [5002,5003]},{"file": 11,"line": 133,"col": 22,"fields": [5004]},{"file": 11,"line": 230,"col": 27,"fields": [5005,5006,5007]},{"file": 11,"line": 174,"col": 28,"fields": [5008,5009,5010]},{"file": 11,"line": 276,"col": 25,"fields": [5011]},{"file": 11,"line": 203,"col": 22,"fields": [5012,5013]},{"file": 11,"line": 266,"col": 19,"fields": [5014,5015,5016,5017,5018]},{"file": 11,"line": 258,"col": 22,"fields": [5019,5020,5021]},{"file": 11,"line": 126,"col": 20,"fields": [5022,5023]},{"file": 12,"line": 0,"col": 0,"fields": []},{"file": 12,"line": 17,"col": 25,"fields": [5024,5025]},{"file": 41,"line": 29,"col": 27,"fields": [5026,5027,5028]},{"file": 36,"line": 136,"col": 19,"fields": [5029,5030,5031,5032,5033,5034]},{"file": 0,"line": 117,"col": 22,"fields": [5035,5036,5037]},{"file": 15,"line": 15,"col": 22,"fields": [5038,5039]},{"file": 0,"line": 23,"col": 35,"fields": [5040,5041,5042]},{"file": 0,"line": 51,"col": 31,"fields": [5043,5044,5045]},{"file": 0,"line": 39,"col": 30,"fields": [5046,5047]},{"file": 13,"line": 0,"col": 0,"fields": []},{"file": 14,"line": 0,"col": 0,"fields": []},{"file": 11,"line": 71,"col": 24,"fields": [5048,5049,5050,5051,5052,5053,5054,5055,5056]},{"file": 11,"line": 85,"col": 17,"fields": [5057,5058,5059,5060]},{"file": 11,"line": 60,"col": 24,"fields": [5061,5062,5063,5064,5065,5066]},{"file": 11,"line": 51,"col": 26,"fields": [5067,5068,5069,5070]},{"file": 1,"line": 16,"col": 15,"fields": [5071,5072]},{"file": 15,"line": 0,"col": 0,"fields": []},{"file": 16,"line": 0,"col": 0,"fields": []},{"file": 43,"line": 8,"col": 19,"fields": [5073]},{"file": 17,"line": 16,"col": 0,"fields": []},{"file": 18,"line": 0,"col": 0,"fields": []},{"file": 19,"line": 0,"col": 0,"fields": []},{"file": 20,"line": 0,"col": 0,"fields": []},{"file": 21,"line": 0,"col": 0,"fields": []},{"file": 22,"line": 0,"col": 0,"fields": []},{"file": 23,"line": 0,"col": 0,"fields": []},{"file": 24,"line": 0,"col": 0,"fields": []},{"file": 25,"line": 0,"col": 0,"fields": []},{"file": 26,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 0,"col": 0,"fields": []},{"file": 28,"line": 0,"col": 0,"fields": []},{"file": 29,"line": 0,"col": 0,"fields": []},{"file": 30,"line": 0,"col": 0,"fields": []},{"file": 31,"line": 0,"col": 0,"fields": []},{"file": 32,"line": 0,"col": 0,"fields": []},{"file": 40,"line": 9,"col": 21,"fields": [5074,5075,5076,5077,5078,5079,5080,5081,5082]},{"file": 51,"line": 6,"col": 21,"fields": [5083]},{"file": 33,"line": 0,"col": 0,"fields": []},{"file": 34,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 0,"col": 0,"fields": []},{"file": 35,"line": 231,"col": 21,"fields": [5084,5085,5086,5087,5088]},{"file": 36,"line": 0,"col": 0,"fields": []},{"file": 37,"line": 0,"col": 0,"fields": []},{"file": 38,"line": 0,"col": 0,"fields": []},{"file": 49,"line": 119,"col": 27,"fields": [5089,5090]},{"file": 49,"line": 115,"col": 28,"fields": [5091,5092]},{"file": 39,"line": 0,"col": 0,"fields": []},{"file": 24,"line": 627,"col": 18,"fields": [5093,5094,5095,5096,5097]},{"file": 32,"line": 99,"col": 18,"fields": [5098,5099,5100]},{"file": 40,"line": 0,"col": 0,"fields": []},{"file": 22,"line": 1095,"col": 24,"fields": [5101]},{"file": 6,"line": 498,"col": 27,"fields": [5102,5103]},{"file": 41,"line": 14,"col": 17,"fields": [5104,5105,5106,5107,5108,5109,5110,5111]},{"file": 6,"line": 79,"col": 26,"fields": [5112]},{"file": 6,"line": 59,"col": 25,"fields": [5113,5114,5115,5116]},{"file": 6,"line": 69,"col": 30,"fields": [5117,5118,5119,5120]},{"file": 6,"line": 41,"col": 28,"fields": [5121,5122,5123,5124]},{"file": 6,"line": 33,"col": 27,"fields": [5125,5126,5127]},{"file": 6,"line": 50,"col": 27,"fields": [5128,5129,5130,5131]},{"file": 9,"line": 103,"col": 26,"fields": [5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154]},{"file": 9,"line": 139,"col": 28,"fields": [5155,5156,5157]},{"file": 9,"line": 128,"col": 26,"fields": [5158,5159,5160,5161,5162,5163,5164,5165,5166]},{"file": 25,"line": 261,"col": 17,"fields": [5167,5168]},{"file": 3,"line": 0,"col": 0,"fields": []},{"file": 11,"line": 149,"col": 25,"fields": [5169,5170,5171,5172]},{"file": 11,"line": 296,"col": 25,"fields": [5173,5174,5175]},{"file": 41,"line": 0,"col": 0,"fields": []},{"file": 41,"line": 46,"col": 23,"fields": [5176,5177,5178]},{"file": 42,"line": 0,"col": 0,"fields": []},{"file": 43,"line": 0,"col": 0,"fields": []},{"file": 43,"line": 33,"col": 8,"fields": [5179,5180]},{"file": 44,"line": 3,"col": 0,"fields": []},{"file": 44,"line": 21,"col": 24,"fields": [5181,5182]},{"file": 36,"line": 48,"col": 36,"fields": [5183,5184]},{"file": 44,"line": 16,"col": 18,"fields": [5185,5186]},{"file": 45,"line": 0,"col": 0,"fields": []},{"file": 36,"line": 157,"col": 23,"fields": [5187,5188,5189,5190,5191,5192,5193]},{"file": 46,"line": 6,"col": 0,"fields": []},{"file": 47,"line": 0,"col": 0,"fields": []},{"file": 18,"line": 29,"col": 15,"fields": [5194,5195,5196,5197,5198,5199,5200]},{"file": 21,"line": 18,"col": 17,"fields": [5201,5202]},{"file": 22,"line": 12,"col": 22,"fields": [5203,5204,5205]},{"file": 24,"line": 52,"col": 20,"fields": [5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217]},{"file": 24,"line": 39,"col": 32,"fields": [5218,5219,5220,5221,5222,5223,5224,5225,5226]},{"file": 24,"line": 461,"col": 16,"fields": [5227,5228,5229,5230,5231,5232]},{"file": 24,"line": 491,"col": 12,"fields": [5233,5234]},{"file": 25,"line": 32,"col": 17,"fields": [5235,5236,5237,5238,5239,5240,5241]},{"file": 25,"line": 235,"col": 23,"fields": [5242,5243]},{"file": 25,"line": 225,"col": 19,"fields": [5244,5245,5246,5247,5248,5249,5250]},{"file": 48,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 102,"col": 13,"fields": [5251,5252,5253,5254]},{"file": 49,"line": 0,"col": 0,"fields": []},{"file": 34,"line": 10,"col": 27,"fields": [5255,5256,5257,5258,5259,5260,5261,5262]},{"file": 50,"line": 0,"col": 0,"fields": []},{"file": 31,"line": 41,"col": 24,"fields": []},{"file": 51,"line": 0,"col": 0,"fields": []},{"file": 34,"line": 205,"col": 23,"fields": [5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274]},{"file": 34,"line": 29,"col": 27,"fields": [5275,5276,5277,5278,5279,5280]},{"file": 34,"line": 112,"col": 31,"fields": [5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291]},{"file": 34,"line": 21,"col": 25,"fields": [5292,5293]},{"file": 6,"line": 512,"col": 24,"fields": [5294,5295]},{"file": 41,"line": 911,"col": 23,"fields": [5296,5297,5298,5299,5300,5301,5302,5303]},{"file": 11,"line": 303,"col": 31,"fields": [5304,5305,5306,5307,5308,5309,5310,5311,5312]},{"file": 52,"line": 2,"col": 0,"fields": []},{"file": 25,"line": 236,"col": 26,"fields": [5313,5314]},{"file": 48,"line": 7,"col": 25,"fields": [5315,5316,5317]},{"file": 11,"line": 316,"col": 35,"fields": [5318,5319,5320]},{"file": 4,"line": 295,"col": 12,"docs": " Insert a new node at the end of the list.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [5321,5322]},{"file": 4,"line": 397,"col": 12,"docs": " Allocate and initialize a node and its data.\n\n Arguments:\n     data: The data to put inside the node.\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [5323,5324,5325]},{"file": 4,"line": 197,"col": 12,"docs": " Node inside the linked list wrapping the actual data.\n"},{"file": 4,"line": 385,"col": 12,"docs": " Deallocate a node.\n\n Arguments:\n     node: Pointer to the node to deallocate.\n     allocator: Dynamic memory allocator.\n","fields": [5326,5327,5328]},{"file": 4,"line": 309,"col": 12,"docs": " Insert a new node at the beginning of the list.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [5329,5330]},{"file": 4,"line": 353,"col": 12,"docs": " Remove and return the last node in the list.\n\n Returns:\n     A pointer to the last node in the list.\n","fields": [5331]},{"file": 4,"line": 232,"col": 12,"docs": " Insert a new node after an existing one.\n\n Arguments:\n     node: Pointer to a node in the list.\n     new_node: Pointer to the new node to insert.\n","fields": [5332,5333,5334]},{"file": 4,"line": 219,"col": 12,"docs": " Initialize a linked list.\n\n Returns:\n     An empty linked list.\n","fields": []},{"file": 4,"line": 253,"col": 12,"docs": " Insert a new node before an existing one.\n\n Arguments:\n     node: Pointer to a node in the list.\n     new_node: Pointer to the new node to insert.\n","fields": [5335,5336,5337]},{"file": 4,"line": 274,"col": 12,"docs": " Concatenate list2 onto the end of list1, removing all entries from the former.\n\n Arguments:\n     list1: the list to concatenate onto\n     list2: the list to be concatenated\n","fields": [5338,5339]},{"file": 4,"line": 328,"col": 12,"docs": " Remove a node from the list.\n\n Arguments:\n     node: Pointer to the node to be removed.\n","fields": [5340,5341]},{"file": 4,"line": 363,"col": 12,"docs": " Remove and return the first node in the list.\n\n Returns:\n     A pointer to the first node in the list.\n","fields": [5342]},{"file": 4,"line": 376,"col": 12,"docs": " Allocate a new node.\n\n Arguments:\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [5343,5344]},{"file": 4,"line": 194,"col": 8},{"file": 5,"line": 105,"col": 12,"fields": [5345]},{"file": 5,"line": 113,"col": 12,"fields": [5346,5347,5348]},{"file": 5,"line": 16,"col": 12},{"file": 5,"line": 26,"col": 12,"fields": [5349,5350]},{"file": 5,"line": 18,"col": 12,"fields": []},{"file": 5,"line": 59,"col": 12,"fields": [5351,5352]},{"file": 5,"line": 42,"col": 12,"fields": [5353]},{"file": 5,"line": 15,"col": 12},{"file": 5,"line": 76,"col": 12,"docs": " Thread-safe with get() and remove(). Returns whether node was actually removed.\n","fields": [5354,5355]},{"file": 5,"line": 99,"col": 12,"fields": [5356]},{"file": 6,"line": 18,"col": 8},{"file": 6,"line": 24,"col": 8},{"file": 4,"line": 136,"col": 12,"docs": " Allocate and initialize a node and its data.\n\n Arguments:\n     data: The data to put inside the node.\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [5357,5358,5359]},{"file": 4,"line": 19,"col": 12,"docs": " Node inside the linked list wrapping the actual data.\n"},{"file": 4,"line": 124,"col": 12,"docs": " Deallocate a node.\n\n Arguments:\n     node: Pointer to the node to deallocate.\n     allocator: Dynamic memory allocator.\n","fields": [5360,5361,5362]},{"file": 4,"line": 69,"col": 12,"docs": " Insert a new node after an existing one.\n\n Arguments:\n     node: Pointer to a node in the list.\n     new_node: Pointer to the new node to insert.\n","fields": [5363,5364,5365]},{"file": 4,"line": 86,"col": 12,"docs": " Remove a node from the list.\n\n Arguments:\n     node: Pointer to the node to be removed.\n","fields": [5366,5367]},{"file": 4,"line": 115,"col": 12,"docs": " Allocate a new node.\n\n Arguments:\n     allocator: Dynamic memory allocator.\n\n Returns:\n     A pointer to the new node.\n","fields": [5368,5369]},{"file": 4,"line": 102,"col": 12,"docs": " Remove and return the first node in the list.\n\n Returns:\n     A pointer to the first node in the list.\n","fields": [5370]},{"file": 4,"line": 16,"col": 8},{"file": 7,"line": 73,"col": 12,"docs": " Sets the value at index `i`, asserting that the value is in range.\n","fields": [5371,5372,5373]},{"file": 7,"line": 67,"col": 12,"docs": " Sets the value at index `i`, or returns `error.OutOfBounds` if\n the index is not in range.\n","fields": [5374,5375,5376]},{"file": 7,"line": 137,"col": 12,"docs": " Extend the list by 1 element, but asserting `self.capacity`\n is sufficient to hold an additional item.\n","fields": [5377,5378]},{"file": 7,"line": 169,"col": 12,"docs": " Removes the element at the specified index and returns it\n or an error.OutOfBounds is returned. If no error then\n the empty slot is filled from the end of the list.\n","fields": [5379,5380]},{"file": 7,"line": 61,"col": 12,"docs": " Safely access index i of the list. \n","fields": [5381,5382]},{"file": 7,"line": 157,"col": 12,"docs": " Removes the element at the specified index and returns it.\n The empty slot is filled from the end of the list.\n","fields": [5383,5384]},{"file": 7,"line": 253,"col": 12,"docs": " Return an iterator over the list.\n","fields": [5385]},{"file": 7,"line": 224,"col": 12,"docs": " Remove and return the last element from the list. Asserts\n the list has at least one item.\n","fields": [5386]},{"file": 7,"line": 176,"col": 12,"docs": " Append the slice of items to the list. Allocates more\n memory as necessary.\n","fields": [5387,5388]},{"file": 7,"line": 120,"col": 12,"docs": " Insert slice `items` at index `n`. Moves\n `list[n .. list.count()]` to make room.\n","fields": [5389,5390,5391]},{"file": 7,"line": 92,"col": 12,"docs": " ArrayList takes ownership of the passed in slice. The slice must have been\n allocated with `allocator`.\n Deinitialize with `deinit` or use `toOwnedSlice`.\n","fields": [5392,5393]},{"file": 7,"line": 32,"col": 12},{"file": 7,"line": 184,"col": 12,"docs": " Adjust the list's length to `new_len`. Doesn't initialize\n added items if any.\n","fields": [5394,5395]},{"file": 7,"line": 44,"col": 12,"docs": " Release all allocated memory.\n","fields": [5396]},{"file": 7,"line": 110,"col": 12,"docs": " Insert `item` at index `n`. Moves `list[n .. list.count()]`\n to make room.\n","fields": [5397,5398,5399]},{"file": 7,"line": 235,"col": 12},{"file": 7,"line": 190,"col": 12,"docs": " Reduce allocated capacity to `new_len`.\n","fields": [5400,5401]},{"file": 7,"line": 31,"col": 12},{"file": 7,"line": 101,"col": 12,"docs": " The caller owns the returned memory. ArrayList becomes empty.\n","fields": [5402]},{"file": 7,"line": 144,"col": 12,"docs": " Remove the element at index `i` from the list and return\n its value. Asserts the array has at least one item.\n","fields": [5403,5404]},{"file": 7,"line": 230,"col": 12,"docs": " Like `pop` but returns `null` if empty.\n","fields": [5405]},{"file": 7,"line": 50,"col": 12,"docs": " Return contents as a slice. Only valid while the list\n doesn't change size.\n","fields": [5406]},{"file": 7,"line": 22,"col": 8},{"file": 8,"line": 18,"col": 12},{"file": 8,"line": 68,"col": 12,"fields": [5407,5408,5409]},{"file": 8,"line": 80,"col": 12,"fields": [5410,5411,5412,5413]},{"file": 8,"line": 55,"col": 12,"docs": " Write a native-endian integer.\n","fields": [5414,5415,5416]},{"file": 8,"line": 16,"col": 12},{"file": 8,"line": 62,"col": 12,"docs": " Write a foreign-endian integer.\n","fields": [5417,5418,5419]},{"file": 8,"line": 46,"col": 12,"fields": [5420,5421,5422]},{"file": 8,"line": 74,"col": 12,"fields": [5423,5424,5425]},{"file": 8,"line": 15,"col": 8},{"file": 9,"line": 384,"col": 8,"fields": [5426]},{"file": 9,"line": 515,"col": 8,"fields": [5427]},{"file": 9,"line": 209,"col": 8,"fields": [5428,5429]},{"file": 9,"line": 440,"col": 8,"fields": [5430]},{"file": 9,"line": 207,"col": 8},{"file": 9,"line": 370,"col": 8,"fields": [5431]},{"file": 9,"line": 433,"col": 8,"fields": [5432]},{"file": 9,"line": 226,"col": 8,"fields": [5433,5434]},{"file": 9,"line": 447,"col": 8,"fields": [5435]},{"file": 9,"line": 316,"col": 8,"fields": [5436]},{"file": 9,"line": 396,"col": 8,"fields": [5437]},{"file": 9,"line": 465,"col": 8,"fields": [5438]},{"file": 9,"line": 377,"col": 8,"fields": [5439]},{"file": 9,"line": 493,"col": 8,"fields": [5440]},{"file": 9,"line": 451,"col": 8,"fields": [5441]},{"file": 9,"line": 220,"col": 8,"fields": [5442,5443]},{"file": 9,"line": 406,"col": 8,"fields": [5444]},{"file": 9,"line": 11,"col": 8},{"file": 9,"line": 149,"col": 8},{"file": 9,"line": 193,"col": 8},{"file": 9,"line": 511,"col": 8,"fields": [5445]},{"file": 9,"line": 311,"col": 8},{"file": 9,"line": 236,"col": 8,"fields": [5446,5447]},{"file": 9,"line": 507,"col": 8,"fields": [5448]},{"file": 9,"line": 174,"col": 8},{"file": 9,"line": 199,"col": 8},{"file": 9,"line": 575,"col": 8},{"file": 9,"line": 337,"col": 8,"fields": [5449]},{"file": 9,"line": 416,"col": 8,"fields": [5450]},{"file": 9,"line": 51,"col": 8},{"file": 9,"line": 500,"col": 8,"fields": [5451]},{"file": 9,"line": 182,"col": 8},{"file": 9,"line": 246,"col": 8,"fields": [5452]},{"file": 9,"line": 472,"col": 8,"fields": [5453]},{"file": 9,"line": 582,"col": 8,"fields": [5454]},{"file": 9,"line": 347,"col": 8,"fields": [5455]},{"file": 9,"line": 479,"col": 8,"fields": [5456]},{"file": 9,"line": 261,"col": 8,"fields": [5457,5458]},{"file": 9,"line": 486,"col": 8,"fields": [5459]},{"file": 9,"line": 357,"col": 4,"fields": [5460]},{"file": 10,"line": 279,"col": 12,"fields": [5461]},{"file": 10,"line": 165,"col": 12,"docs": " Increases capacity so that the hash map will be at most\n 60% full when expected_count items are put into it\n","fields": [5462,5463]},{"file": 10,"line": 203,"col": 12,"docs": " Calls put() and asserts that no kv pair is clobbered.\n","fields": [5464,5465,5466]},{"file": 10,"line": 270,"col": 12,"fields": [5467]},{"file": 10,"line": 44,"col": 12},{"file": 10,"line": 55,"col": 12},{"file": 10,"line": 108,"col": 12,"fields": [5468]},{"file": 10,"line": 207,"col": 12,"fields": [5469,5470,5471]},{"file": 10,"line": 104,"col": 12,"fields": [5472]},{"file": 10,"line": 146,"col": 12,"fields": [5473,5474,5475]},{"file": 10,"line": 223,"col": 12,"fields": [5476,5477]},{"file": 10,"line": 197,"col": 12,"docs": " Returns the kv pair that was already there.\n","fields": [5478,5479,5480]},{"file": 10,"line": 60,"col": 12},{"file": 10,"line": 117,"col": 12,"fields": [5481]},{"file": 10,"line": 227,"col": 12,"fields": [5482,5483]},{"file": 10,"line": 266,"col": 12,"docs": " Calls remove(), asserts that a kv pair is removed, and discards it.\n","fields": [5484,5485]},{"file": 10,"line": 154,"col": 8,"fields": [5486]},{"file": 10,"line": 42,"col": 8},{"file": 10,"line": 314,"col": 8},{"file": 10,"line": 49,"col": 8},{"file": 11,"line": 182,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 159,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 196,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 139,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 214,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 166,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 289,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 238,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 210,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 190,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 221,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 247,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 282,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 133,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 230,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 174,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 276,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 203,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 266,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 258,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 126,"col": 8,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 12,"line": 49,"col": 12,"fields": [5487]},{"file": 12,"line": 22,"col": 12,"fields": []},{"file": 12,"line": 15,"col": 12},{"file": 12,"line": 31,"col": 12,"docs": " push operation, but only if you are the first item in the stack. if you did not succeed in\n being the first item in the stack, returns the other item that was there.\n","fields": [5488,5489]},{"file": 12,"line": 17,"col": 12},{"file": 12,"line": 36,"col": 12,"fields": [5490,5491]},{"file": 12,"line": 64,"col": 12,"fields": [5492]},{"file": 12,"line": 13,"col": 8},{"file": 0,"line": 222,"col": 12},{"file": 0,"line": 117,"col": 8},{"file": 0,"line": 114,"col": 8},{"file": 0,"line": 112,"col": 8},{"file": 0,"line": 183,"col": 8},{"file": 0,"line": 465,"col": 8,"fields": [5493]},{"file": 0,"line": 23,"col": 8},{"file": 0,"line": 67,"col": 8},{"file": 0,"line": 51,"col": 8},{"file": 0,"line": 39,"col": 8},{"file": 13,"line": 173,"col": 12,"docs": " Reads 1 byte from the stream or returns `error.EndOfStream`.\n","fields": [5494]},{"file": 13,"line": 204,"col": 12,"fields": [5495,5496]},{"file": 13,"line": 231,"col": 12,"fields": [5497,5498]},{"file": 13,"line": 224,"col": 12,"fields": [5499,5500]},{"file": 13,"line": 89,"col": 12,"docs": " Allocates enough memory to hold all the contents of the stream. If the allocated\n memory would be greater than `max_size`, returns `error.StreamTooLong`.\n Caller owns returned memory.\n If this function returns an error, the contents from the stream read so far are lost.\n","fields": [5501,5502,5503]},{"file": 13,"line": 101,"col": 12,"docs": " Replaces `buffer` contents by reading from the stream until `delimiter` is found.\n Does not include the delimiter in the result.\n If `buffer.len()` would exceed `max_size`, `error.StreamTooLong` is returned and the contents\n read from the stream so far are lost.\n","fields": [5504,5505,5506,5507]},{"file": 13,"line": 192,"col": 12,"docs": " Reads a foreign-endian integer\n","fields": [5508,5509]},{"file": 13,"line": 18,"col": 12},{"file": 13,"line": 185,"col": 12,"docs": " Reads a native-endian integer\n","fields": [5510,5511]},{"file": 13,"line": 180,"col": 12,"docs": " Same as `readByte` except the returned byte is signed.\n","fields": [5512]},{"file": 13,"line": 216,"col": 12,"fields": [5513,5514,5515,5516]},{"file": 13,"line": 162,"col": 12,"docs": " Reads from the stream until specified byte is found, discarding all data,\n including the delimiter.\n If end-of-stream is found, this function succeeds.\n","fields": [5517,5518]},{"file": 13,"line": 17,"col": 12},{"file": 13,"line": 198,"col": 12,"fields": [5519,5520]},{"file": 13,"line": 137,"col": 12,"docs": " Reads from the stream until specified byte is found. If the buffer is not\n large enough to hold the entire contents, `error.StreamTooLong` is returned.\n If end-of-stream is found, returns the rest of the stream. If this\n function is called again after that, returns null.\n Returns a slice of the stream data, with ptr equal to `buf.ptr`. The\n delimiter byte is not included in the returned slice.\n","fields": [5521,5522,5523]},{"file": 13,"line": 123,"col": 12,"docs": " Allocates enough memory to read until `delimiter`. If the allocated\n memory would be greater than `max_size`, returns `error.StreamTooLong`.\n Caller owns returned memory.\n If this function returns an error, the contents from the stream read so far are lost.\n","fields": [5524,5525,5526,5527]},{"file": 13,"line": 65,"col": 12,"docs": " Replaces `buffer` contents by reading from the stream until it is finished.\n If `buffer.len()` would exceed `max_size`, `error.StreamTooLong` is returned and\n the contents read from the stream are lost.\n","fields": [5528,5529,5530]},{"file": 13,"line": 210,"col": 12,"fields": [5531,5532,5533]},{"file": 13,"line": 16,"col": 8},{"file": 0,"line": 11,"col": 4},{"file": 0,"line": 13,"col": 4},{"file": 0,"line": 512,"col": 4},{"file": 0,"line": 1,"col": 0},{"file": 0,"line": 9,"col": 0},{"file": 0,"line": 749,"col": 0,"fields": [5534]},{"file": 0,"line": 6,"col": 0},{"file": 0,"line": 480,"col": 0},{"file": 0,"line": 0,"col": 0},{"file": 0,"line": 716,"col": 0,"fields": [5535]},{"file": 0,"line": 479,"col": 0,"fields": [5536,5537]},{"file": 0,"line": 5,"col": 0},{"file": 0,"line": 8,"col": 0},{"file": 0,"line": 579,"col": 0},{"file": 0,"line": 4,"col": 0},{"file": 0,"line": 473,"col": 0,"fields": [5538,5539]},{"file": 0,"line": 2,"col": 0},{"file": 1,"line": 20,"col": 4},{"file": 1,"line": 14,"col": 4},{"file": 11,"line": 71,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 11,"col": 4},{"file": 1,"line": 9,"col": 4},{"file": 1,"line": 6,"col": 4},{"file": 1,"line": 2,"col": 4},{"file": 1,"line": 10,"col": 4},{"file": 11,"line": 328,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 5,"col": 4},{"file": 11,"line": 92,"col": 4},{"file": 11,"line": 60,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 7,"col": 4},{"file": 11,"line": 12,"col": 4,"docs": " Deprecated: use `std.Target.ObjectFormat`.\n"},{"file": 11,"line": 44,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 3,"col": 4},{"file": 11,"line": 350,"col": 4,"docs": " This function type is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 8,"col": 4},{"file": 11,"line": 6,"col": 4,"docs": " Deprecated: use `std.Target.Arch`.\n"},{"file": 1,"line": 13,"col": 4},{"file": 11,"line": 21,"col": 4,"docs": " `explicit_subsystem` is missing when the subsystem is automatically detected,\n so Zig standard library has the subsystem detection logic here. This should generally be\n used rather than `explicit_subsystem`.\n On non-Windows targets, this is `null`.\n"},{"file": 11,"line": 15,"col": 4,"docs": " Deprecated: use `std.Target.SubSystem`.\n"},{"file": 11,"line": 85,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 335,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 354,"col": 4,"docs": " This function is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 15,"col": 4},{"file": 1,"line": 4,"col": 4},{"file": 11,"line": 3,"col": 4,"docs": " Deprecated: use `std.Target.Os`.\n"},{"file": 11,"line": 342,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 9,"col": 4,"docs": " Deprecated: use `std.Target.Abi`.\n"},{"file": 11,"line": 51,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 12,"col": 4},{"file": 11,"line": 96,"col": 4,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 1,"line": 16,"col": 0},{"file": 2,"line": 51,"col": 4},{"file": 2,"line": 9,"col": 4},{"file": 2,"line": 30,"col": 4},{"file": 2,"line": 19,"col": 4},{"file": 2,"line": 13,"col": 4},{"file": 2,"line": 12,"col": 4},{"file": 2,"line": 50,"col": 4},{"file": 2,"line": 24,"col": 4},{"file": 2,"line": 5,"col": 4},{"file": 2,"line": 39,"col": 4},{"file": 2,"line": 54,"col": 4},{"file": 2,"line": 35,"col": 4},{"file": 2,"line": 6,"col": 4},{"file": 2,"line": 36,"col": 4},{"file": 2,"line": 62,"col": 4},{"file": 2,"line": 7,"col": 4},{"file": 2,"line": 38,"col": 4},{"file": 2,"line": 64,"col": 4},{"file": 2,"line": 29,"col": 4},{"file": 2,"line": 0,"col": 4},{"file": 2,"line": 45,"col": 4},{"file": 2,"line": 37,"col": 4},{"file": 2,"line": 18,"col": 4},{"file": 2,"line": 61,"col": 4},{"file": 2,"line": 46,"col": 4},{"file": 2,"line": 8,"col": 4},{"file": 2,"line": 43,"col": 4},{"file": 2,"line": 25,"col": 4},{"file": 2,"line": 40,"col": 4},{"file": 2,"line": 28,"col": 4},{"file": 2,"line": 27,"col": 4},{"file": 2,"line": 22,"col": 4},{"file": 2,"line": 47,"col": 4},{"file": 2,"line": 48,"col": 4},{"file": 2,"line": 56,"col": 4},{"file": 2,"line": 4,"col": 4},{"file": 2,"line": 32,"col": 4},{"file": 2,"line": 33,"col": 4},{"file": 2,"line": 42,"col": 4},{"file": 2,"line": 60,"col": 4},{"file": 2,"line": 31,"col": 4},{"file": 2,"line": 34,"col": 4},{"file": 2,"line": 59,"col": 4},{"file": 2,"line": 58,"col": 4},{"file": 2,"line": 52,"col": 4},{"file": 2,"line": 53,"col": 4},{"file": 2,"line": 41,"col": 4},{"file": 2,"line": 44,"col": 4},{"file": 2,"line": 2,"col": 4},{"file": 2,"line": 11,"col": 4},{"file": 2,"line": 16,"col": 4},{"file": 2,"line": 63,"col": 4},{"file": 2,"line": 17,"col": 4},{"file": 2,"line": 23,"col": 4},{"file": 2,"line": 55,"col": 4},{"file": 2,"line": 65,"col": 4},{"file": 2,"line": 15,"col": 4},{"file": 2,"line": 10,"col": 4},{"file": 2,"line": 66,"col": 4},{"file": 2,"line": 1,"col": 4},{"file": 2,"line": 20,"col": 4},{"file": 2,"line": 14,"col": 4},{"file": 2,"line": 57,"col": 4},{"file": 2,"line": 49,"col": 4},{"file": 2,"line": 3,"col": 4},{"file": 2,"line": 21,"col": 4},{"file": 3,"line": 2,"col": 0},{"file": 3,"line": 1,"col": 0},{"file": 3,"line": 0,"col": 0},{"file": 3,"line": 3,"col": 0},{"file": 31,"line": 481,"col": 8,"fields": [5540]},{"file": 35,"line": 376,"col": 12},{"file": 35,"line": 377,"col": 12},{"file": 35,"line": 345,"col": 8,"fields": [5541]},{"file": 35,"line": 25,"col": 8},{"file": 35,"line": 224,"col": 8,"fields": [5542]},{"file": 35,"line": 49,"col": 8,"docs": " `openRead` except with a null terminated UTF16LE encoded path\n","fields": [5543]},{"file": 35,"line": 107,"col": 8,"docs": " If the path does not exist it will be created.\n If a file already exists in the destination this returns OpenError.PathAlreadyExists\n Call close to clean up.\n","fields": [5544,5545]},{"file": 35,"line": 63,"col": 8,"docs": " Calls `openWriteMode` with `default_mode` for the mode.\n","fields": [5546]},{"file": 35,"line": 15,"col": 8},{"file": 35,"line": 280,"col": 8},{"file": 35,"line": 231,"col": 8},{"file": 35,"line": 358,"col": 8,"docs": " Implementation of io.InStream trait for File\n"},{"file": 35,"line": 200,"col": 8,"docs": " Repositions read/write file offset relative to the end.\n","fields": [5547,5548]},{"file": 35,"line": 195,"col": 8,"docs": " Repositions read/write file offset relative to the current offset.\n","fields": [5549,5550]},{"file": 35,"line": 311,"col": 8},{"file": 35,"line": 222,"col": 8},{"file": 35,"line": 192,"col": 8},{"file": 35,"line": 211,"col": 8,"fields": [5551]},{"file": 35,"line": 323,"col": 8,"fields": [5552,5553]},{"file": 35,"line": 20,"col": 8},{"file": 35,"line": 91,"col": 8,"docs": " Same as `openWriteMode` except `path` is null-terminated and UTF16LE encoded\n","fields": [5554,5555]},{"file": 35,"line": 372,"col": 8,"docs": " Implementation of io.OutStream trait for File\n"},{"file": 35,"line": 80,"col": 8,"docs": " Same as `openWriteMode` except `path` is null-terminated.\n","fields": [5556,5557]},{"file": 35,"line": 70,"col": 8,"docs": " If the path does not exist it will be created.\n If a file already exists in the destination it will be truncated.\n Call close to clean up.\n","fields": [5558,5559]},{"file": 35,"line": 126,"col": 8,"fields": [5560,5561]},{"file": 35,"line": 209,"col": 8},{"file": 35,"line": 245,"col": 8},{"file": 35,"line": 386,"col": 8,"docs": " Implementation of io.SeekableStream trait for File\n"},{"file": 35,"line": 317,"col": 8},{"file": 35,"line": 148,"col": 8,"docs": " Test for the existence of `path`.\n `path` is UTF8-encoded.\n In general it is recommended to avoid this function. For example,\n instead of testing if a file exists and then opening it, just\n open it and handle the error for file not found.\n","fields": [5562]},{"file": 35,"line": 286,"col": 8,"docs": " The underlying file system may have a different granularity than nanoseconds,\n and therefore this function cannot guarantee any precision will be stored.\n Further, the maximum value is limited by the system ABI. When a value is provided\n that exceeds this range, the value is clamped to the maximum.\n","fields": [5563,5564,5565]},{"file": 35,"line": 158,"col": 8,"docs": " Same as `access` except the parameter is null-terminated UTF16LE-encoded.\n","fields": [5566]},{"file": 35,"line": 153,"col": 8,"docs": " Same as `access` except the parameter is null-terminated.\n","fields": [5567]},{"file": 35,"line": 116,"col": 8,"fields": [5568,5569]},{"file": 35,"line": 362,"col": 12},{"file": 35,"line": 363,"col": 12},{"file": 18,"line": 1262,"col": 8},{"file": 18,"line": 291,"col": 4},{"file": 31,"line": 358,"col": 8,"fields": [5570]},{"file": 31,"line": 344,"col": 4},{"file": 37,"line": 64,"col": 12,"fields": [5571]},{"file": 37,"line": 68,"col": 12},{"file": 37,"line": 45,"col": 8},{"file": 37,"line": 55,"col": 8,"docs": " number of iterations to spin yielding the thread\n"},{"file": 37,"line": 52,"col": 8,"docs": " number of iterations to perform in the cpu yield loop\n"},{"file": 37,"line": 46,"col": 8},{"file": 37,"line": 49,"col": 8,"docs": " number of iterations to spin yielding the cpu\n"},{"file": 37,"line": 44,"col": 8},{"file": 38,"line": 120,"col": 8,"fields": [5572]},{"file": 38,"line": 111,"col": 4},{"file": 39,"line": 170,"col": 8,"fields": [5573,5574]},{"file": 39,"line": 119,"col": 8,"fields": [5575,5576]},{"file": 4,"line": 0,"col": 0},{"file": 4,"line": 5,"col": 0},{"file": 4,"line": 1,"col": 0},{"file": 4,"line": 2,"col": 0},{"file": 4,"line": 3,"col": 0},{"file": 4,"line": 4,"col": 0},{"file": 4,"line": 202,"col": 16,"fields": [5577]},{"file": 5,"line": 1,"col": 0},{"file": 5,"line": 151,"col": 0},{"file": 5,"line": 3,"col": 0},{"file": 5,"line": 150,"col": 0},{"file": 5,"line": 0,"col": 0},{"file": 5,"line": 222,"col": 0,"fields": [5578]},{"file": 5,"line": 2,"col": 0},{"file": 5,"line": 5,"col": 0},{"file": 5,"line": 4,"col": 0},{"file": 5,"line": 136,"col": 0},{"file": 5,"line": 240,"col": 0,"fields": [5579]},{"file": 6,"line": 275,"col": 4,"docs": " data must outlive the returned frame\n","fields": [5580,5581,5582,5583]},{"file": 6,"line": 12,"col": 4},{"file": 6,"line": 241,"col": 4},{"file": 6,"line": 467,"col": 4,"docs": " Creates if does not exist. Does not truncate.\n","fields": [5584,5585,5586]},{"file": 6,"line": 633,"col": 4,"docs": " contents must remain alive until writeFile completes.\n","fields": [5587,5588,5589,5590]},{"file": 6,"line": 130,"col": 4,"fields": [5591,5592,5593,5594]},{"file": 6,"line": 244,"col": 4,"docs": " data - just the inner references - must live until preadv frame completes.\n","fields": [5595,5596,5597,5598]},{"file": 6,"line": 299,"col": 4,"fields": [5599,5600,5601,5602]},{"file": 6,"line": 88,"col": 4,"docs": " data - just the inner references - must live until pwritev frame completes.\n","fields": [5603,5604,5605,5606]},{"file": 6,"line": 170,"col": 4,"docs": " iovecs must live until pwritev frame completes.\n","fields": [5607,5608,5609,5610]},{"file": 6,"line": 437,"col": 4,"docs": " Creates if does not exist. Truncates the file if it exists.\n Uses the default mode.\n","fields": [5611,5612]},{"file": 6,"line": 85,"col": 4},{"file": 6,"line": 1414,"col": 4},{"file": 6,"line": 375,"col": 4,"fields": [5613,5614,5615,5616]},{"file": 6,"line": 338,"col": 4,"docs": " iovecs must live until preadv frame completes\n","fields": [5617,5618,5619,5620]},{"file": 6,"line": 14,"col": 4},{"file": 6,"line": 118,"col": 4,"docs": " data must outlive the returned frame\n","fields": [5621,5622,5623,5624]},{"file": 6,"line": 208,"col": 4,"docs": " iovecs must live until pwritev frame completes.\n","fields": [5625,5626,5627]},{"file": 6,"line": 1388,"col": 4},{"file": 6,"line": 498,"col": 4,"docs": " This abstraction helps to close file handles in defer expressions\n without the possibility of failure and without the use of suspend points.\n Start a `CloseOperation` before opening a file, so that you can defer\n `CloseOperation.finish`.\n If you call `setHandle` then finishing will close the fd; otherwise finishing\n will deallocate the `CloseOperation`.\n"},{"file": 6,"line": 442,"col": 4,"docs": " Creates if does not exist. Truncates the file if it exists.\n","fields": [5628,5629,5630]},{"file": 6,"line": 699,"col": 4,"docs": " The frame resumes when the last data has been confirmed written, but before the file handle\n is closed.\n Caller owns returned memory.\n","fields": [5631,5632,5633]},{"file": 6,"line": 414,"col": 4,"fields": [5634,5635]},{"file": 6,"line": 628,"col": 4,"docs": " contents must remain alive until writeFile completes.\n TODO make this atomic or provide writeFileAtomic and rename this one to writeFileTruncate\n","fields": [5636,5637,5638]},{"file": 6,"line": 724,"col": 4},{"file": 6,"line": 0,"col": 0},{"file": 6,"line": 8,"col": 0},{"file": 6,"line": 735,"col": 0,"fields": [5639]},{"file": 6,"line": 1313,"col": 0},{"file": 6,"line": 5,"col": 0},{"file": 6,"line": 4,"col": 0},{"file": 6,"line": 1340,"col": 0,"fields": [5640]},{"file": 6,"line": 2,"col": 0},{"file": 6,"line": 1336,"col": 0,"fields": [5641,5642]},{"file": 6,"line": 646,"col": 0,"fields": [5643,5644,5645]},{"file": 6,"line": 1,"col": 0},{"file": 6,"line": 10,"col": 0},{"file": 6,"line": 7,"col": 0},{"file": 6,"line": 729,"col": 0,"fields": [5646,5647]},{"file": 6,"line": 9,"col": 0},{"file": 6,"line": 661,"col": 0,"fields": [5648,5649,5650,5651]},{"file": 6,"line": 3,"col": 0},{"file": 6,"line": 6,"col": 0},{"file": 6,"line": 79,"col": 12},{"file": 6,"line": 59,"col": 12},{"file": 6,"line": 69,"col": 12},{"file": 6,"line": 41,"col": 12},{"file": 6,"line": 33,"col": 12},{"file": 6,"line": 50,"col": 12},{"file": 4,"line": 45,"col": 16,"docs": " Remove a node from the list.\n\n Arguments:\n     node: Pointer to the node to be removed.\n Returns:\n     node removed\n","fields": [5652]},{"file": 4,"line": 34,"col": 16,"docs": " Insert a new node after the current one.\n\n Arguments:\n     new_node: Pointer to the new node to insert.\n","fields": [5653,5654]},{"file": 4,"line": 23,"col": 16,"fields": [5655]},{"file": 7,"line": 0,"col": 0},{"file": 7,"line": 5,"col": 0},{"file": 7,"line": 483,"col": 0},{"file": 7,"line": 1,"col": 0},{"file": 7,"line": 2,"col": 0},{"file": 7,"line": 3,"col": 0},{"file": 7,"line": 4,"col": 0},{"file": 8,"line": 6,"col": 4},{"file": 8,"line": 5,"col": 4},{"file": 8,"line": 1,"col": 0},{"file": 8,"line": 0,"col": 0},{"file": 8,"line": 2,"col": 0},{"file": 8,"line": 3,"col": 0},{"file": 9,"line": 7,"col": 4,"docs": " TODO Nearly all the functions in this namespace would be\n better off if https://github.com/ziglang/zig/issues/425\n was solved.\n"},{"file": 9,"line": 2,"col": 0},{"file": 9,"line": 0,"col": 0},{"file": 9,"line": 1,"col": 0},{"file": 9,"line": 103,"col": 12},{"file": 9,"line": 139,"col": 12},{"file": 9,"line": 144,"col": 12},{"file": 9,"line": 128,"col": 12},{"file": 10,"line": 546,"col": 4,"fields": [5656]},{"file": 10,"line": 28,"col": 4,"fields": [5657]},{"file": 10,"line": 554,"col": 4,"fields": [5658,5659]},{"file": 10,"line": 15,"col": 4,"fields": [5660,5661]},{"file": 10,"line": 24,"col": 4,"fields": [5662,5663]},{"file": 10,"line": 20,"col": 4,"docs": " Builtin hashmap for strings as keys.\n","fields": [5664]},{"file": 10,"line": 10,"col": 0},{"file": 10,"line": 8,"col": 0},{"file": 10,"line": 4,"col": 0},{"file": 10,"line": 0,"col": 0},{"file": 10,"line": 1,"col": 0},{"file": 10,"line": 6,"col": 0},{"file": 10,"line": 3,"col": 0},{"file": 10,"line": 13,"col": 0},{"file": 10,"line": 9,"col": 0},{"file": 10,"line": 12,"col": 0},{"file": 10,"line": 7,"col": 0},{"file": 10,"line": 2,"col": 0},{"file": 10,"line": 5,"col": 0},{"file": 25,"line": 261,"col": 4},{"file": 11,"line": 383,"col": 0},{"file": 11,"line": 382,"col": 0},{"file": 11,"line": 149,"col": 12,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 11,"line": 296,"col": 12,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 12,"line": 1,"col": 0},{"file": 12,"line": 85,"col": 0},{"file": 12,"line": 84,"col": 0},{"file": 12,"line": 70,"col": 0},{"file": 12,"line": 149,"col": 0,"fields": [5665]},{"file": 12,"line": 2,"col": 0},{"file": 12,"line": 3,"col": 0},{"file": 12,"line": 0,"col": 0},{"file": 12,"line": 71,"col": 0},{"file": 12,"line": 166,"col": 0,"fields": [5666]},{"file": 41,"line": 46,"col": 12},{"file": 41,"line": 34,"col": 12},{"file": 41,"line": 44,"col": 12},{"file": 41,"line": 52,"col": 12},{"file": 41,"line": 71,"col": 12},{"file": 41,"line": 82,"col": 8},{"file": 41,"line": 66,"col": 8},{"file": 0,"line": 118,"col": 12},{"file": 0,"line": 119,"col": 12},{"file": 15,"line": 16,"col": 8},{"file": 13,"line": 8,"col": 4},{"file": 13,"line": 9,"col": 4},{"file": 13,"line": 1,"col": 0},{"file": 13,"line": 2,"col": 0},{"file": 13,"line": 3,"col": 0},{"file": 13,"line": 0,"col": 0},{"file": 13,"line": 4,"col": 0},{"file": 13,"line": 6,"col": 0},{"file": 13,"line": 5,"col": 0},{"file": 14,"line": 129,"col": 4,"docs": " This function is intended to be used only in tests. When the two slices are not\n equal, prints diagnostics to stderr to show exactly how they are not equal,\n then aborts.\n","fields": [5667,5668,5669]},{"file": 14,"line": 6,"col": 4,"docs": " This function is intended to be used only in tests. It prints diagnostics to stderr\n and then aborts when actual_error_union is not expected_error.\n","fields": [5670,5671]},{"file": 14,"line": 0,"col": 0},{"file": 14,"line": 2,"col": 0},{"file": 14,"line": 1,"col": 0},{"file": 15,"line": 368,"col": 4,"fields": [5672,5673]},{"file": 15,"line": 1484,"col": 4,"docs": "Given a pointer to an array, returns a pointer to a portion of that array, preserving constness.\n","fields": [5674,5675,5676]},{"file": 15,"line": 706,"col": 4,"docs": " Writes a twos-complement big-endian integer to memory.\n Asserts that buffer.len >= T.bit_count / 8.\n The bit count of T must be divisible by 8.\n Any extra bytes in buffer before writing the integer are set to zero. To\n avoid the branch to check for extra buffer bytes, use writeIntBig instead.\n","fields": [5677,5678,5679]},{"file": 15,"line": 1389,"col": 4,"docs": "Given any value, returns a copy of its bytes in an array.\n","fields": [5680]},{"file": 15,"line": 1464,"col": 4,"docs": "Given a pointer to an array of bytes, returns a value of the specified type backed by a\n copy of those bytes.\n","fields": [5681,5682]},{"file": 15,"line": 658,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, but\n the integer bit width must be divisible by 8.\n This function stores in foreign endian, which means it does a @byteSwap first.\n","fields": [5683,5684,5685]},{"file": 15,"line": 851,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that\n are separated by bytes in `delimiter`.\n separate(\"abc|def||ghi\", \"|\")\n will return slices for \"abc\", \"def\", \"\", \"ghi\", null, in that order.\n If `delimiter` does not exist in buffer,\n the iterator will return `buffer`, null, in that order.\n The delimiter length must not be zero.\n See also the related function `tokenize`.\n It is planned to rename this function to `split` before 1.0.0, like this:\n pub fn split(buffer: []const u8, delimiter: []const u8) SplitIterator {\n","fields": [5686,5687]},{"file": 15,"line": 949,"col": 4},{"file": 15,"line": 1209,"col": 4,"fields": [5688,5689]},{"file": 15,"line": 892,"col": 4,"fields": [5690,5691,5692]},{"file": 15,"line": 432,"col": 4,"fields": [5693,5694,5695,5696]},{"file": 15,"line": 720,"col": 4},{"file": 15,"line": 465,"col": 4,"fields": [5697,5698,5699]},{"file": 15,"line": 675,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, but\n the integer bit width must be divisible by 8.\n","fields": [5700,5701,5702,5703]},{"file": 15,"line": 423,"col": 4,"docs": " Linear search for the last index of a scalar value inside a slice.\n","fields": [5704,5705,5706]},{"file": 15,"line": 240,"col": 4},{"file": 15,"line": 689,"col": 4,"docs": " Writes a twos-complement little-endian integer to memory.\n Asserts that buf.len >= T.bit_count / 8.\n The bit count of T must be divisible by 8.\n Any extra bytes in buffer after writing the integer are set to zero. To\n avoid the branch to check for extra buffer bytes, use writeIntLittle\n instead.\n","fields": [5707,5708,5709]},{"file": 15,"line": 1197,"col": 4,"fields": [5710,5711]},{"file": 15,"line": 584,"col": 4},{"file": 15,"line": 455,"col": 4,"fields": [5712,5713,5714,5715]},{"file": 15,"line": 662,"col": 4},{"file": 15,"line": 388,"col": 4,"docs": " Remove values from the beginning of a slice.\n","fields": [5716,5717,5718]},{"file": 15,"line": 514,"col": 4,"docs": " Reads an integer from memory with size equal to bytes.len.\n T specifies the return type, which must be large enough to store\n the result.\n","fields": [5719,5720,5721]},{"file": 15,"line": 1538,"col": 4,"docs": " Given an address and an alignment, return true if the address is a multiple of the alignment\n The alignment must be a power of 2 and greater than 0.\n","fields": [5722,5723]},{"file": 15,"line": 736,"col": 4,"docs": " Writes a twos-complement integer to memory, with the specified endianness.\n Asserts that buf.len >= T.bit_count / 8.\n The bit count of T must be evenly divisible by 8.\n Any extra bytes in buffer not part of the integer are set to zero, with\n respect to endianness. To avoid the branch to check for extra buffer bytes,\n use writeInt instead.\n","fields": [5724,5725,5726,5727]},{"file": 15,"line": 977,"col": 4,"docs": " Naively combines a series of slices with a separator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [5728,5729,5730]},{"file": 15,"line": 1012,"col": 4,"docs": " Copies each T from slices into a new slice that exactly holds all the elements.\n","fields": [5731,5732,5733]},{"file": 15,"line": 1421,"col": 4,"docs": "Given a pointer to an array of bytes, returns a pointer to a value of the specified type\n backed by those bytes, preserving constness.\n","fields": [5734,5735]},{"file": 15,"line": 1299,"col": 4,"docs": " Converts an integer from specified endianness to host endianness.\n","fields": [5736,5737,5738]},{"file": 15,"line": 483,"col": 4,"fields": [5739,5740,5741,5742]},{"file": 15,"line": 1315,"col": 4,"docs": " Converts an integer which has host endianness to little endian.\n","fields": [5743,5744]},{"file": 15,"line": 1307,"col": 4,"docs": " Converts an integer which has host endianness to the desired endianness.\n","fields": [5745,5746,5747]},{"file": 15,"line": 444,"col": 4,"fields": [5748,5749,5750]},{"file": 15,"line": 910,"col": 4},{"file": 15,"line": 1283,"col": 4,"docs": " Converts a little-endian integer to host endianness.\n","fields": [5751,5752]},{"file": 15,"line": 1291,"col": 4,"docs": " Converts a big-endian integer to host endianness.\n","fields": [5753,5754]},{"file": 15,"line": 418,"col": 4,"docs": " Linear search for the index of a scalar value inside a slice.\n","fields": [5755,5756,5757]},{"file": 15,"line": 1323,"col": 4,"docs": " Converts an integer which has host endianness to big endian.\n","fields": [5758,5759]},{"file": 15,"line": 650,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement.\n This function always succeeds, has defined behavior for all inputs, and\n accepts any integer bit width.\n This function stores in native endian, which means it is implemented as a simple\n memory store.\n","fields": [5760,5761,5762]},{"file": 15,"line": 15,"col": 4},{"file": 15,"line": 298,"col": 4,"fields": [5763,5764,5765]},{"file": 15,"line": 440,"col": 4,"fields": [5766,5767,5768]},{"file": 15,"line": 554,"col": 4},{"file": 15,"line": 332,"col": 4,"docs": " Returns true if lhs < rhs, false otherwise\n","fields": [5769,5770,5771]},{"file": 15,"line": 901,"col": 4,"fields": [5772,5773,5774]},{"file": 15,"line": 402,"col": 4,"docs": " Remove values from the beginning and end of a slice.\n","fields": [5775,5776,5777]},{"file": 15,"line": 789,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that are not\n any of the bytes in `delimiter_bytes`.\n tokenize(\"   abc def    ghi  \", \" \")\n Will return slices for \"abc\", \"def\", \"ghi\", null, in that order.\n If `buffer` is empty, the iterator will return null.\n If `delimiter_bytes` does not exist in buffer,\n the iterator will return `buffer`, null, in that order.\n See also the related function `separate`.\n","fields": [5778,5779]},{"file": 15,"line": 725,"col": 4},{"file": 15,"line": 579,"col": 4},{"file": 15,"line": 395,"col": 4,"docs": " Remove values from the end of a slice.\n","fields": [5780,5781,5782]},{"file": 15,"line": 280,"col": 4,"fields": [5783,5784]},{"file": 15,"line": 667,"col": 4},{"file": 15,"line": 10,"col": 4},{"file": 15,"line": 472,"col": 4,"docs": " Find the index in a slice of a sub-slice, searching from the end backwards.\n To start looking at a different index, slice the haystack first.\n TODO is there even a better algorithm for this?\n","fields": [5785,5786,5787]},{"file": 15,"line": 549,"col": 4},{"file": 15,"line": 575,"col": 4,"docs": " Asserts that bytes.len >= T.bit_count / 8. Reads the integer starting from index 0\n and ignores extra bytes.\n The bit count of T must be evenly divisible by 8.\n Assumes the endianness of memory is foreign, so it must byte-swap.\n","fields": [5788,5789]},{"file": 15,"line": 262,"col": 4,"docs": " Copy all of source into dest at position 0.\n dest.len must be >= source.len.\n dest.ptr must be >= src.ptr.\n","fields": [5790,5791,5792]},{"file": 15,"line": 373,"col": 4,"docs": " Returns true if all elements in a slice are equal to the scalar value provided\n","fields": [5793,5794,5795]},{"file": 15,"line": 1407,"col": 0,"fields": [5796,5797]},{"file": 15,"line": 1109,"col": 0,"fields": []},{"file": 15,"line": 6,"col": 0},{"file": 15,"line": 1477,"col": 0,"fields": [5798,5799]},{"file": 15,"line": 2,"col": 0},{"file": 15,"line": 4,"col": 0},{"file": 15,"line": 3,"col": 0},{"file": 15,"line": 1,"col": 0},{"file": 15,"line": 8,"col": 0},{"file": 15,"line": 7,"col": 0},{"file": 15,"line": 1058,"col": 0,"fields": []},{"file": 15,"line": 0,"col": 0},{"file": 15,"line": 5,"col": 0},{"file": 16,"line": 25,"col": 4,"docs": " π/2\n"},{"file": 16,"line": 152,"col": 4},{"file": 16,"line": 149,"col": 4},{"file": 16,"line": 150,"col": 4},{"file": 16,"line": 193,"col": 4},{"file": 16,"line": 153,"col": 4},{"file": 16,"line": 89,"col": 4},{"file": 16,"line": 161,"col": 4},{"file": 16,"line": 178,"col": 4},{"file": 16,"line": 74,"col": 4},{"file": 16,"line": 538,"col": 4},{"file": 16,"line": 53,"col": 4},{"file": 16,"line": 394,"col": 4,"docs": " Rotates right. Only unsigned values can be rotated.\n Negative shift values results in shift modulo the bit count.\n","fields": [5800,5801,5802]},{"file": 16,"line": 664,"col": 4,"docs": " Returns the absolute value of the integer parameter.\n Result is an unsigned integer.\n","fields": [5803]},{"file": 16,"line": 173,"col": 4},{"file": 16,"line": 155,"col": 4},{"file": 16,"line": 78,"col": 4},{"file": 16,"line": 570,"col": 4,"fields": [5804,5805,5806]},{"file": 16,"line": 796,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two).\n Only unsigned integers can be used. Zero is not an allowed input.\n If the value doesn't fit, returns an error.\n","fields": [5807,5808]},{"file": 16,"line": 192,"col": 4},{"file": 16,"line": 80,"col": 4},{"file": 16,"line": 366,"col": 4,"docs": " Shifts right. Overflowed bits are truncated.\n A negative shift amount results in a left shift.\n","fields": [5809,5810,5811]},{"file": 16,"line": 189,"col": 4},{"file": 16,"line": 196,"col": 4},{"file": 16,"line": 57,"col": 4},{"file": 16,"line": 46,"col": 4},{"file": 16,"line": 37,"col": 4,"docs": " 2/sqrt(π)\n"},{"file": 16,"line": 190,"col": 4},{"file": 16,"line": 157,"col": 4},{"file": 16,"line": 200,"col": 4},{"file": 16,"line": 137,"col": 4,"fields": []},{"file": 16,"line": 93,"col": 4},{"file": 16,"line": 97,"col": 4},{"file": 16,"line": 319,"col": 4,"fields": [5812,5813,5814]},{"file": 16,"line": 191,"col": 4},{"file": 16,"line": 868,"col": 4,"fields": [5815,5816]},{"file": 16,"line": 159,"col": 4},{"file": 16,"line": 616,"col": 4,"fields": [5817,5818,5819]},{"file": 16,"line": 61,"col": 4},{"file": 16,"line": 34,"col": 4,"docs": " 2/π\n"},{"file": 16,"line": 43,"col": 4,"docs": " 1/sqrt(2)\n"},{"file": 16,"line": 197,"col": 4},{"file": 16,"line": 182,"col": 4},{"file": 16,"line": 195,"col": 4},{"file": 16,"line": 56,"col": 4},{"file": 16,"line": 86,"col": 4},{"file": 16,"line": 175,"col": 4},{"file": 16,"line": 71,"col": 4},{"file": 16,"line": 81,"col": 4},{"file": 16,"line": 59,"col": 4},{"file": 16,"line": 151,"col": 4},{"file": 16,"line": 199,"col": 4},{"file": 16,"line": 176,"col": 4},{"file": 16,"line": 145,"col": 4,"fields": []},{"file": 16,"line": 96,"col": 4},{"file": 16,"line": 65,"col": 4},{"file": 16,"line": 166,"col": 4},{"file": 16,"line": 16,"col": 4,"docs": " log10(e)\n"},{"file": 16,"line": 63,"col": 4},{"file": 16,"line": 170,"col": 4},{"file": 16,"line": 28,"col": 4,"docs": " π/4\n"},{"file": 16,"line": 185,"col": 4},{"file": 16,"line": 87,"col": 4},{"file": 16,"line": 847,"col": 4,"fields": [5820,5821]},{"file": 16,"line": 169,"col": 4},{"file": 16,"line": 7,"col": 4,"docs": " Euler's number (e)\n"},{"file": 16,"line": 784,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two).\n Only unsigned integers can be used. Zero is not an allowed input.\n Result is a type with 1 more bit than the input type.\n","fields": [5822,5823]},{"file": 16,"line": 66,"col": 4},{"file": 16,"line": 181,"col": 4},{"file": 16,"line": 168,"col": 4},{"file": 16,"line": 333,"col": 4,"fields": [5824,5825,5826]},{"file": 16,"line": 90,"col": 4},{"file": 16,"line": 156,"col": 4},{"file": 16,"line": 60,"col": 4},{"file": 16,"line": 158,"col": 4},{"file": 16,"line": 68,"col": 4},{"file": 16,"line": 639,"col": 4,"fields": [5827,5828,5829]},{"file": 16,"line": 22,"col": 4,"docs": " ln(10)\n"},{"file": 16,"line": 324,"col": 4,"fields": [5830,5831,5832]},{"file": 16,"line": 208,"col": 4,"fields": [5833]},{"file": 16,"line": 77,"col": 4},{"file": 16,"line": 174,"col": 4},{"file": 16,"line": 67,"col": 4},{"file": 16,"line": 179,"col": 4},{"file": 16,"line": 54,"col": 4},{"file": 16,"line": 186,"col": 4},{"file": 16,"line": 72,"col": 4},{"file": 16,"line": 50,"col": 4},{"file": 16,"line": 441,"col": 4,"fields": [5834,5835]},{"file": 16,"line": 83,"col": 4},{"file": 16,"line": 413,"col": 4,"docs": " Rotates left. Only unsigned values can be rotated.\n Negative shift values results in shift modulo the bit count.\n","fields": [5836,5837,5838]},{"file": 16,"line": 40,"col": 4,"docs": " sqrt(2)\n"},{"file": 16,"line": 184,"col": 4},{"file": 16,"line": 133,"col": 4,"fields": []},{"file": 16,"line": 329,"col": 4,"fields": [5839]},{"file": 16,"line": 743,"col": 4,"docs": " Align cast a pointer but return an error if it's the wrong alignment\n","fields": [5840,5841]},{"file": 16,"line": 69,"col": 4},{"file": 16,"line": 164,"col": 4},{"file": 16,"line": 160,"col": 4},{"file": 16,"line": 49,"col": 4},{"file": 16,"line": 47,"col": 4},{"file": 16,"line": 591,"col": 4,"fields": [5842,5843,5844]},{"file": 16,"line": 695,"col": 4,"docs": " Returns the negation of the integer parameter.\n Result is a signed integer.\n","fields": [5845]},{"file": 16,"line": 163,"col": 4},{"file": 16,"line": 84,"col": 4},{"file": 16,"line": 48,"col": 4},{"file": 16,"line": 62,"col": 4},{"file": 16,"line": 105,"col": 4,"fields": [5846]},{"file": 16,"line": 167,"col": 4},{"file": 16,"line": 129,"col": 4,"fields": []},{"file": 16,"line": 340,"col": 4,"docs": " Shifts left. Overflowed bits are truncated.\n A negative shift amount results in a right shift.\n","fields": [5847,5848,5849]},{"file": 16,"line": 19,"col": 4,"docs": " ln(2)\n"},{"file": 16,"line": 202,"col": 4},{"file": 16,"line": 95,"col": 4},{"file": 16,"line": 55,"col": 4},{"file": 16,"line": 75,"col": 4},{"file": 16,"line": 141,"col": 4,"fields": []},{"file": 16,"line": 92,"col": 4},{"file": 16,"line": 162,"col": 4},{"file": 16,"line": 188,"col": 4},{"file": 16,"line": 165,"col": 4},{"file": 16,"line": 172,"col": 4},{"file": 16,"line": 194,"col": 4},{"file": 16,"line": 99,"col": 4,"fields": [5850,5851,5852,5853]},{"file": 16,"line": 154,"col": 4},{"file": 16,"line": 221,"col": 4,"fields": [5854]},{"file": 16,"line": 31,"col": 4,"docs": " 1/π\n"},{"file": 16,"line": 180,"col": 4},{"file": 16,"line": 187,"col": 4},{"file": 16,"line": 740,"col": 4},{"file": 16,"line": 10,"col": 4,"docs": " Archimedes' constant (π)\n"},{"file": 16,"line": 13,"col": 4,"docs": " log2(e)\n"},{"file": 16,"line": 171,"col": 4},{"file": 16,"line": 516,"col": 4,"fields": [5855]},{"file": 16,"line": 549,"col": 4,"fields": [5856,5857,5858]},{"file": 16,"line": 177,"col": 4},{"file": 16,"line": 183,"col": 4},{"file": 16,"line": 544,"col": 0,"fields": []},{"file": 16,"line": 581,"col": 0,"fields": []},{"file": 16,"line": 830,"col": 0,"fields": []},{"file": 16,"line": 3,"col": 0},{"file": 16,"line": 0,"col": 0},{"file": 16,"line": 627,"col": 0,"fields": []},{"file": 16,"line": 2,"col": 0},{"file": 16,"line": 813,"col": 0,"fields": []},{"file": 16,"line": 650,"col": 0,"fields": []},{"file": 16,"line": 772,"col": 0,"fields": []},{"file": 16,"line": 509,"col": 0,"fields": []},{"file": 16,"line": 604,"col": 0,"fields": []},{"file": 16,"line": 4,"col": 0},{"file": 16,"line": 1,"col": 0},{"file": 16,"line": 533,"col": 0,"fields": []},{"file": 16,"line": 560,"col": 0,"fields": []},{"file": 43,"line": 27,"col": 8,"docs": " Represents a unique ID per thread.\n May be an integer or pointer depending on the platform.\n On Linux and POSIX, this is the same as Handle.\n"},{"file": 43,"line": 74,"col": 8,"fields": [5859]},{"file": 43,"line": 32,"col": 8},{"file": 43,"line": 343,"col": 8,"fields": []},{"file": 43,"line": 16,"col": 8,"docs": " Represents a kernel thread handle.\n May be an integer or a pointer depending on the platform.\n On Linux and POSIX, this is the same as Id.\n"},{"file": 43,"line": 70,"col": 8,"docs": " Returns the handle of this thread.\n On Linux and POSIX, this is the same as Id.\n On Linux, it is possible that the thread spawned with `spawn`\n finishes executing entirely before the clone syscall completes. In this\n case, this function will return 0 rather than the no-longer-existing thread's\n pid.\n","fields": [5860]},{"file": 43,"line": 53,"col": 8,"docs": " Returns the ID of the calling thread.\n Makes a syscall every time the function is called.\n On Linux and POSIX, this Id is the same as a Handle.\n","fields": []},{"file": 43,"line": 336,"col": 8},{"file": 43,"line": 11,"col": 8},{"file": 43,"line": 143,"col": 8,"docs": " caller must call wait on the returned thread\n fn startFn(@typeOf(context)) T\n where T is u8, noreturn, void, or !void\n caller must call wait on the returned thread\n","fields": [5861,5862]},{"file": 43,"line": 109,"col": 8},{"file": 36,"line": 839,"col": 4,"docs": " Cross-device link\n"},{"file": 36,"line": 397,"col": 4,"docs": " write on a pipe with no one to read it\n"},{"file": 36,"line": 656,"col": 4,"docs": " absolute timeout\n"},{"file": 36,"line": 403,"col": 4,"docs": " software termination signal from kill\n"},{"file": 36,"line": 951,"col": 4,"docs": " Software caused connection abort\n"},{"file": 36,"line": 215,"col": 4,"docs": " map from file (default)\n"},{"file": 36,"line": 1136,"col": 4},{"file": 36,"line": 503,"col": 4,"docs": " reserved by system\n"},{"file": 36,"line": 275,"col": 4},{"file": 36,"line": 740,"col": 4},{"file": 36,"line": 768,"col": 4,"fields": [5863]},{"file": 36,"line": 1145,"col": 4},{"file": 36,"line": 339,"col": 4},{"file": 36,"line": 587,"col": 4,"docs": " size increased\n"},{"file": 17,"line": 3067,"col": 4,"fields": [5864,5865]},{"file": 17,"line": 1775,"col": 4,"fields": [5866]},{"file": 17,"line": 786,"col": 4,"docs": " Like `execvpe` except the parameters are null-terminated,\n matching the syscall API on all targets. This removes the need for an allocator.\n This function also uses the PATH environment variable to get the full path to the executable.\n If `file` is an absolute path, this is the same as `execveC`.\n","fields": [5867,5868,5869]},{"file": 36,"line": 714,"col": 4},{"file": 36,"line": 659,"col": 4,"docs": " ext[1] holds leeway for power aware timers\n"},{"file": 36,"line": 324,"col": 4},{"file": 36,"line": 305,"col": 4,"docs": " atomically obtain an exclusive lock\n"},{"file": 36,"line": 196,"col": 4},{"file": 36,"line": 939,"col": 4,"docs": " Can't assign requested address\n"},{"file": 36,"line": 1186,"col": 4},{"file": 17,"line": 2405,"col": 4},{"file": 17,"line": 2880,"col": 4,"fields": [5870,5871,5872,5873,5874,5875,5876]},{"file": 17,"line": 3081,"col": 4},{"file": 36,"line": 578,"col": 4,"docs": " OOB data\n"},{"file": 36,"line": 200,"col": 4,"docs": " [MC2] no permissions\n"},{"file": 36,"line": 346,"col": 4,"docs": " block specified signal set\n"},{"file": 44,"line": 21,"col": 4},{"file": 36,"line": 8,"col": 4},{"file": 36,"line": 672,"col": 4},{"file": 36,"line": 697,"col": 4},{"file": 36,"line": 326,"col": 4},{"file": 36,"line": 418,"col": 4,"docs": " to parent on child stop or exit\n"},{"file": 36,"line": 1004,"col": 4,"docs": " Stale NFS file handle\n"},{"file": 36,"line": 197,"col": 4},{"file": 36,"line": 1146,"col": 4},{"file": 17,"line": 2853,"col": 4,"fields": [5877]},{"file": 36,"line": 284,"col": 4,"docs": " open for reading and writing\n"},{"file": 36,"line": 845,"col": 4,"docs": " Not a directory\n"},{"file": 36,"line": 379,"col": 4,"docs": " EMT instruction\n"},{"file": 36,"line": 1010,"col": 4,"docs": " RPC struct is bad\n"},{"file": 17,"line": 3053,"col": 4,"docs": " Transmit a message to another socket.\n\n The `send` call may be used only when the socket is in a connected state (so that the intended\n recipient  is  known).   The  only  difference  between `send` and `write` is the presence of\n flags.  With a zero flags argument, `send` is equivalent to  `write`.   Also,  the  following\n call\n\n     send(sockfd, buf, len, flags);\n\n is equivalent to\n\n     sendto(sockfd, buf, len, flags, NULL, 0);\n\n There is no  indication  of  failure  to  deliver.\n\n When the message does not fit into the send buffer of  the  socket,  `send`  normally  blocks,\n unless  the socket has been placed in nonblocking I/O mode.  In nonblocking mode it would fail\n with `SendError.WouldBlock`.  The `select` call may be used  to  determine when it is\n possible to send more data.\n","fields": [5878,5879,5880]},{"file": 36,"line": 620,"col": 4,"docs": " exit status to be returned, valid for child       process only\n"},{"file": 36,"line": 716,"col": 4},{"file": 36,"line": 48,"col": 4},{"file": 36,"line": 713,"col": 4},{"file": 36,"line": 1078,"col": 4,"docs": " Bad message\n"},{"file": 36,"line": 394,"col": 4,"docs": " bad argument to system call\n"},{"file": 36,"line": 676,"col": 4},{"file": 36,"line": 836,"col": 4,"docs": " File exists\n"},{"file": 36,"line": 191,"col": 4},{"file": 17,"line": 2157,"col": 4},{"file": 17,"line": 2364,"col": 4,"fields": [5881,5882,5883,5884,5885]},{"file": 36,"line": 10,"col": 4},{"file": 36,"line": 1152,"col": 4},{"file": 17,"line": 699,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n `file_path` is relative to the open directory handle `dir_fd`.\n See also `openat`.\n","fields": [5886,5887,5888,5889]},{"file": 17,"line": 2031,"col": 4},{"file": 36,"line": 376,"col": 4,"docs": " compatibility\n"},{"file": 36,"line": 851,"col": 4,"docs": " Invalid argument\n"},{"file": 36,"line": 960,"col": 4,"docs": " Socket is already connected\n"},{"file": 17,"line": 2437,"col": 4,"docs": " Repositions read/write file offset relative to the current offset.\n","fields": [5890,5891]},{"file": 36,"line": 1163,"col": 4,"fields": [5892]},{"file": 17,"line": 2125,"col": 4,"docs": " add a watch to an initialized inotify instance\n","fields": [5893,5894,5895]},{"file": 36,"line": 1001,"col": 4,"docs": " Disc quota exceeded\n"},{"file": 36,"line": 911,"col": 4,"docs": " Message too long\n"},{"file": 36,"line": 698,"col": 4},{"file": 36,"line": 1038,"col": 4,"docs": " Need authenticator\n"},{"file": 17,"line": 2647,"col": 4,"fields": [5896,5897,5898]},{"file": 36,"line": 193,"col": 4},{"file": 36,"line": 734,"col": 4},{"file": 36,"line": 406,"col": 4,"docs": " urgent condition on IO channel\n"},{"file": 36,"line": 1048,"col": 4,"docs": " Value too large to be stored in data type\n"},{"file": 36,"line": 319,"col": 4},{"file": 17,"line": 1308,"col": 4},{"file": 36,"line": 490,"col": 4,"docs": " unique kevent per udata value\n"},{"file": 36,"line": 258,"col": 4,"docs": " don't keep zombies around\n"},{"file": 17,"line": 2838,"col": 4,"fields": [5899,5900]},{"file": 36,"line": 370,"col": 4,"docs": " abort()\n"},{"file": 36,"line": 1179,"col": 4,"fields": [5901]},{"file": 36,"line": 730,"col": 4},{"file": 36,"line": 678,"col": 4},{"file": 36,"line": 515,"col": 4,"docs": " error, data contains errno\n"},{"file": 17,"line": 2765,"col": 4},{"file": 36,"line": 689,"col": 4},{"file": 36,"line": 1028,"col": 4,"docs": " Function not implemented\n"},{"file": 36,"line": 252,"col": 4,"docs": " do not generate SIGCHLD on child stop\n"},{"file": 36,"line": 184,"col": 4},{"file": 36,"line": 1057,"col": 4,"docs": " Shared library version mismatch\n"},{"file": 36,"line": 1120,"col": 4},{"file": 36,"line": 647,"col": 4,"docs": " data is seconds\n"},{"file": 36,"line": 727,"col": 4},{"file": 17,"line": 954,"col": 4,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`.\n A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent\n one; the latter case is known as a dangling link.\n If `sym_link_path` exists, it will not be overwritten.\n See also `symlinkC` and `symlinkW`.\n","fields": [5902,5903]},{"file": 36,"line": 824,"col": 4,"docs": " Permission denied\n"},{"file": 36,"line": 1144,"col": 4},{"file": 17,"line": 1596,"col": 4},{"file": 36,"line": 677,"col": 4},{"file": 36,"line": 774,"col": 4,"fields": [5904]},{"file": 36,"line": 472,"col": 4,"docs": " disable event (not reported)\n"},{"file": 36,"line": 314,"col": 4,"docs": " descriptor requested for event notifications only\n"},{"file": 36,"line": 221,"col": 4,"docs": " region may contain semaphores\n"},{"file": 36,"line": 700,"col": 4},{"file": 17,"line": 1255,"col": 4},{"file": 36,"line": 445,"col": 4,"docs": " information request\n"},{"file": 36,"line": 1191,"col": 4,"docs": " Use effective ids in access check\n"},{"file": 17,"line": 2067,"col": 4,"fields": [5905,5906,5907,5908]},{"file": 36,"line": 421,"col": 4,"docs": " to readers pgrp upon background tty read\n"},{"file": 36,"line": 1066,"col": 4,"docs": " Identifier removed\n"},{"file": 36,"line": 623,"col": 4,"docs": " provide details on reasons for exit\n"},{"file": 17,"line": 1021,"col": 4},{"file": 36,"line": 1167,"col": 4,"fields": [5909]},{"file": 36,"line": 605,"col": 4,"docs": " vnode was unlocked by flock(2)\n"},{"file": 17,"line": 1481,"col": 4,"fields": [5910,5911]},{"file": 36,"line": 596,"col": 4,"docs": " vnode was renamed\n"},{"file": 17,"line": 2736,"col": 4,"fields": [5912]},{"file": 36,"line": 905,"col": 4,"docs": " Socket operation on non-socket\n"},{"file": 36,"line": 739,"col": 4},{"file": 36,"line": 530,"col": 4,"docs": " attached to struct proc\n"},{"file": 36,"line": 754,"col": 4},{"file": 36,"line": 581,"col": 4,"docs": " vnode was removed\n"},{"file": 17,"line": 1788,"col": 4},{"file": 36,"line": 329,"col": 4},{"file": 17,"line": 2358,"col": 4},{"file": 36,"line": 22,"col": 4},{"file": 36,"line": 674,"col": 4},{"file": 36,"line": 629,"col": 4},{"file": 36,"line": 521,"col": 4},{"file": 17,"line": 28,"col": 4},{"file": 36,"line": 517,"col": 4},{"file": 17,"line": 3126,"col": 4,"fields": [5913,5914,5915]},{"file": 36,"line": 748,"col": 4},{"file": 36,"line": 994,"col": 4,"docs": " Too many processes\n"},{"file": 36,"line": 343,"col": 4},{"file": 36,"line": 706,"col": 4},{"file": 36,"line": 361,"col": 4,"docs": " quit\n"},{"file": 17,"line": 2993,"col": 4,"docs": " Transmit a message to another socket.\n\n The `sendto` call may be used only when the socket is in a connected state (so that the intended\n recipient  is  known). The  following call\n\n     send(sockfd, buf, len, flags);\n\n is equivalent to\n\n     sendto(sockfd, buf, len, flags, NULL, 0);\n\n If  sendto()  is used on a connection-mode (`SOCK_STREAM`, `SOCK_SEQPACKET`) socket, the arguments\n `dest_addr` and `addrlen` are asserted to be `null` and `0` respectively, and asserted\n that the socket was actually connected.\n Otherwise, the address of the target is given by `dest_addr` with `addrlen` specifying  its  size.\n\n If the message is too long to pass atomically through the underlying protocol,\n `SendError.MessageTooBig` is returned, and the message is not transmitted.\n\n There is no  indication  of  failure  to  deliver.\n\n When the message does not fit into the send buffer of  the  socket,  `sendto`  normally  blocks,\n unless  the socket has been placed in nonblocking I/O mode.  In nonblocking mode it would fail\n with `SendError.WouldBlock`.  The `select` call may be used  to  determine when it is\n possible to send more data.\n","fields": [5916,5917,5918,5919,5920]},{"file": 36,"line": 273,"col": 4},{"file": 36,"line": 984,"col": 4,"docs": " Host is down\n"},{"file": 36,"line": 954,"col": 4,"docs": " Connection reset by peer\n"},{"file": 36,"line": 760,"col": 4},{"file": 36,"line": 4,"col": 4},{"file": 36,"line": 333,"col": 4},{"file": 36,"line": 818,"col": 4,"docs": " Resource deadlock avoided\n"},{"file": 17,"line": 2334,"col": 4,"docs": " Creates a unidirectional data channel that can be used for interprocess communication.\n","fields": []},{"file": 36,"line": 112,"col": 4},{"file": 36,"line": 690,"col": 4},{"file": 36,"line": 1060,"col": 4,"docs": " Malformed Macho file\n"},{"file": 36,"line": 715,"col": 4},{"file": 36,"line": 1111,"col": 4,"docs": " Interface output queue is full\n"},{"file": 17,"line": 846,"col": 4,"fields": [5921,5922]},{"file": 36,"line": 562,"col": 4,"docs": " and fflags\n"},{"file": 36,"line": 475,"col": 4,"docs": " only report one occurrence\n"},{"file": 36,"line": 1117,"col": 4},{"file": 36,"line": 708,"col": 4},{"file": 36,"line": 520,"col": 4},{"file": 36,"line": 1131,"col": 4},{"file": 36,"line": 699,"col": 4},{"file": 36,"line": 448,"col": 4,"docs": " user defined signal 1\n"},{"file": 36,"line": 296,"col": 4,"docs": " truncate size to 0\n"},{"file": 36,"line": 630,"col": 4},{"file": 44,"line": 16,"col": 4},{"file": 36,"line": 373,"col": 4,"docs": " pollable event ([XSR] generated, not supported)\n"},{"file": 36,"line": 113,"col": 4},{"file": 17,"line": 2039,"col": 4,"fields": []},{"file": 36,"line": 1194,"col": 4,"docs": " Act on the symlink itself not the target\n"},{"file": 17,"line": 1444,"col": 4,"fields": [5923,5924,5925]},{"file": 36,"line": 230,"col": 4,"docs": " don't cache pages for this mapping\n"},{"file": 17,"line": 68,"col": 4,"docs": " See also `getenv`. Populated by startup code before main().\n"},{"file": 36,"line": 892,"col": 4,"docs": " Resource temporarily unavailable\n"},{"file": 36,"line": 869,"col": 4,"docs": " No space left on device\n"},{"file": 17,"line": 2049,"col": 4},{"file": 17,"line": 2814,"col": 4},{"file": 36,"line": 243,"col": 4,"docs": " take signal on signal stack\n"},{"file": 17,"line": 2928,"col": 4},{"file": 36,"line": 710,"col": 4},{"file": 36,"line": 551,"col": 4,"docs": " Exception events\n"},{"file": 36,"line": 1202,"col": 4},{"file": 36,"line": 261,"col": 4,"docs": " signal handler with SA_SIGINFO args\n"},{"file": 36,"line": 469,"col": 4,"docs": " enable event\n"},{"file": 36,"line": 509,"col": 4,"docs": " filter-specific flag\n"},{"file": 36,"line": 553,"col": 4},{"file": 36,"line": 679,"col": 4},{"file": 36,"line": 593,"col": 4,"docs": " link count changed\n"},{"file": 36,"line": 400,"col": 4,"docs": " alarm clock\n"},{"file": 36,"line": 584,"col": 4,"docs": " data contents changed\n"},{"file": 17,"line": 73,"col": 4,"docs": " Populated by startup code before main().\n Not available on Windows. See `std.process.args`\n for obtaining the process arguments.\n"},{"file": 17,"line": 245,"col": 4,"docs": " Exits the program cleanly with the specified status code.\n","fields": [5926]},{"file": 17,"line": 2183,"col": 4},{"file": 36,"line": 702,"col": 4},{"file": 17,"line": 1400,"col": 4},{"file": 36,"line": 1153,"col": 4},{"file": 17,"line": 2346,"col": 4,"fields": [5927]},{"file": 36,"line": 1148,"col": 4},{"file": 36,"line": 454,"col": 4,"docs": " no flag value\n"},{"file": 17,"line": 116,"col": 4,"docs": " Obtain a series of random bytes. These bytes can be used to seed user-space\n random number generators or for cryptographic purposes.\n When linking against libc, this calls the\n appropriate OS-specific library call. Otherwise it uses the zig standard\n library implementation.\n","fields": [5928]},{"file": 36,"line": 358,"col": 4,"docs": " interrupt\n"},{"file": 17,"line": 53,"col": 4,"docs": " When linking libc, this is the C API. Otherwise, it is the OS-specific system interface.\n"},{"file": 36,"line": 750,"col": 4},{"file": 36,"line": 895,"col": 4,"docs": " Operation would block\n"},{"file": 17,"line": 25,"col": 4},{"file": 36,"line": 264,"col": 4,"docs": " do not bounce off kernel's sigtramp\n"},{"file": 36,"line": 136,"col": 4,"docs": " Renamed from `kevent` to `Kevent` to avoid conflict with function name.\n"},{"file": 36,"line": 209,"col": 4,"docs": " [MC2] pages can be executed\n"},{"file": 36,"line": 857,"col": 4,"docs": " Too many open files\n"},{"file": 36,"line": 695,"col": 4},{"file": 36,"line": 1051,"col": 4,"docs": " Bad executable\n"},{"file": 17,"line": 2195,"col": 4},{"file": 36,"line": 720,"col": 4},{"file": 17,"line": 2851,"col": 4},{"file": 36,"line": 908,"col": 4,"docs": " Destination address required\n"},{"file": 17,"line": 109,"col": 4},{"file": 17,"line": 333,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [5929,5930]},{"file": 36,"line": 5,"col": 4},{"file": 36,"line": 759,"col": 4},{"file": 36,"line": 1128,"col": 4},{"file": 36,"line": 617,"col": 4,"docs": " shared with EVFILT_SIGNAL\n"},{"file": 17,"line": 913,"col": 4,"docs": " The result is a slice of out_buffer, indexed from 0.\n","fields": [5931]},{"file": 17,"line": 1471,"col": 4,"fields": [5932]},{"file": 17,"line": 1381,"col": 4,"docs": " Same as `chdir` except the parameter is null-terminated.\n","fields": [5933]},{"file": 36,"line": 1159,"col": 4,"fields": [5934]},{"file": 36,"line": 752,"col": 4},{"file": 17,"line": 2790,"col": 4,"fields": [5935,5936]},{"file": 36,"line": 791,"col": 4,"docs": " No such file or directory\n"},{"file": 17,"line": 1323,"col": 4,"docs": " Deletes an empty directory.\n","fields": [5937]},{"file": 36,"line": 412,"col": 4,"docs": " stop signal from tty\n"},{"file": 36,"line": 725,"col": 4},{"file": 36,"line": 611,"col": 4,"docs": " process forked\n"},{"file": 36,"line": 317,"col": 4,"docs": " mark as close-on-exec\n"},{"file": 36,"line": 966,"col": 4,"docs": " Can't send after socket shutdown\n"},{"file": 17,"line": 2277,"col": 4,"docs": " check user's permissions for a file\n TODO currently this assumes `mode` is `F_OK` on Windows.\n","fields": [5938,5939]},{"file": 36,"line": 632,"col": 4},{"file": 36,"line": 997,"col": 4,"docs": " Too many users\n"},{"file": 36,"line": 872,"col": 4,"docs": " Illegal seek\n"},{"file": 36,"line": 914,"col": 4,"docs": " Protocol wrong type for socket\n"},{"file": 36,"line": 692,"col": 4},{"file": 17,"line": 1284,"col": 4,"docs": " Same as `mkdir` but the parameter is a null-terminated UTF8-encoded string.\n","fields": [5940,5941]},{"file": 36,"line": 641,"col": 4,"docs": " will quit immediately on      memory pressure\n"},{"file": 36,"line": 1137,"col": 4},{"file": 36,"line": 524,"col": 4,"docs": " attached to aio requests\n"},{"file": 36,"line": 1197,"col": 4,"docs": " Act on target of symlink\n"},{"file": 36,"line": 833,"col": 4,"docs": " Device / Resource busy\n"},{"file": 36,"line": 237,"col": 4,"docs": " [XSI] no hang in wait/no child to reap\n"},{"file": 17,"line": 2131,"col": 4,"docs": " Same as `inotify_add_watch` except pathname is null-terminated.\n","fields": [5942,5943,5944]},{"file": 17,"line": 2554,"col": 4,"docs": " Return the canonicalized absolute pathname.\n Expands all symbolic links and resolves references to `.`, `..`, and\n extra `/` characters in `pathname`.\n The return value is a slice of `out_buffer`, but not necessarily from the beginning.\n See also `realpathC` and `realpathW`.\n","fields": [5945,5946]},{"file": 36,"line": 218,"col": 4,"docs": " interpret addr exactly\n"},{"file": 36,"line": 287,"col": 4,"docs": " do not block on open or for data to become available\n"},{"file": 36,"line": 1135,"col": 4},{"file": 17,"line": 1993,"col": 4,"fields": [5947,5948]},{"file": 36,"line": 981,"col": 4,"docs": " File name too long\n"},{"file": 36,"line": 780,"col": 4,"fields": [5949]},{"file": 36,"line": 696,"col": 4},{"file": 36,"line": 212,"col": 4,"docs": " allocated from memory, swap space\n"},{"file": 36,"line": 1139,"col": 4},{"file": 36,"line": 536,"col": 4,"docs": " timers\n"},{"file": 36,"line": 233,"col": 4,"docs": " don't reserve needed swap area\n"},{"file": 17,"line": 2493,"col": 4,"docs": " Returns the read/write file offset relative to the beginning.\n","fields": [5950]},{"file": 36,"line": 1140,"col": 4},{"file": 36,"line": 932,"col": 4,"docs": " Address family not supported by protocol family\n"},{"file": 17,"line": 817,"col": 4,"docs": " This function must allocate memory to add a null terminating bytes on path and each arg.\n It must also convert to KEY=VALUE\\0 format for environment variables, and include null\n pointers after the args and after the environment variables.\n `argv_slice[0]` is the executable path.\n This function also uses the PATH environment variable to get the full path to the executable.\n","fields": [5951,5952,5953]},{"file": 36,"line": 496,"col": 4,"docs": " ... in combination with EV_DELETE\n will defer delete until udata-specific\n event enabled. EINPROGRESS will be\n returned to indicate the deferral\n"},{"file": 17,"line": 2716,"col": 4,"fields": [5954,5955]},{"file": 17,"line": 2564,"col": 4,"docs": " Same as `realpath` except `pathname` is null-terminated.\n","fields": [5956,5957]},{"file": 17,"line": 2521,"col": 4},{"file": 36,"line": 328,"col": 4},{"file": 36,"line": 518,"col": 4},{"file": 36,"line": 299,"col": 4,"docs": " error if O_CREAT and the file exists\n"},{"file": 36,"line": 681,"col": 4},{"file": 36,"line": 7,"col": 4},{"file": 36,"line": 669,"col": 4,"docs": " data is mach absolute time units\n"},{"file": 36,"line": 157,"col": 4},{"file": 17,"line": 1761,"col": 4},{"file": 17,"line": 1334,"col": 4,"docs": " Same as `rmdir` except the parameter is null-terminated.\n","fields": [5958]},{"file": 36,"line": 866,"col": 4,"docs": " File too large\n"},{"file": 36,"line": 726,"col": 4},{"file": 17,"line": 2763,"col": 4,"docs": " Whether or not error.Unexpected will print its value and a stack trace.\n if this happens the fix is to add the error code to the corresponding\n switch expression, possibly introduce a new error in the error set, and\n send a patch to Zig.\n"},{"file": 36,"line": 107,"col": 4},{"file": 36,"line": 1013,"col": 4,"docs": " RPC version wrong\n"},{"file": 36,"line": 185,"col": 4},{"file": 17,"line": 361,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [5959,5960,5961]},{"file": 36,"line": 707,"col": 4},{"file": 17,"line": 538,"col": 4,"docs": " Write multiple buffers to a file descriptor, with a position offset.\n Keeps trying if it gets interrupted.\n","fields": [5962,5963,5964]},{"file": 36,"line": 821,"col": 4,"docs": " Cannot allocate memory\n"},{"file": 36,"line": 644,"col": 4,"docs": " there was an error\n"},{"file": 36,"line": 842,"col": 4,"docs": " Operation not supported by device\n"},{"file": 36,"line": 430,"col": 4,"docs": " exceeded CPU time limit\n"},{"file": 36,"line": 451,"col": 4,"docs": " user defined signal 2\n"},{"file": 17,"line": 1555,"col": 4},{"file": 36,"line": 281,"col": 4,"docs": " open for writing only\n"},{"file": 36,"line": 568,"col": 4,"docs": " copy fflags\n"},{"file": 36,"line": 269,"col": 4},{"file": 36,"line": 731,"col": 4},{"file": 36,"line": 1025,"col": 4,"docs": " No locks available\n"},{"file": 36,"line": 1041,"col": 4,"docs": " Device power is off\n"},{"file": 17,"line": 907,"col": 4},{"file": 36,"line": 635,"col": 4,"docs": " will react on memory          pressure\n"},{"file": 36,"line": 274,"col": 4},{"file": 36,"line": 338,"col": 4},{"file": 36,"line": 724,"col": 4},{"file": 17,"line": 2595,"col": 4,"docs": " Same as `realpath` except `pathname` is null-terminated and UTF16LE-encoded.\n","fields": [5965,5966]},{"file": 36,"line": 673,"col": 4},{"file": 17,"line": 2263,"col": 4},{"file": 36,"line": 978,"col": 4,"docs": " Too many levels of symbolic links\n"},{"file": 36,"line": 1150,"col": 4},{"file": 36,"line": 352,"col": 4,"docs": " set specified signal set\n"},{"file": 36,"line": 1090,"col": 4,"docs": " No STREAM resources\n"},{"file": 36,"line": 506,"col": 4,"docs": " filter-specific flag\n"},{"file": 17,"line": 612,"col": 4},{"file": 36,"line": 758,"col": 4},{"file": 36,"line": 694,"col": 4},{"file": 36,"line": 783,"col": 4,"fields": [5967]},{"file": 36,"line": 684,"col": 4},{"file": 36,"line": 1075,"col": 4,"docs": " Attribute not found\n"},{"file": 36,"line": 1200,"col": 4,"docs": " Path refers to directory\n"},{"file": 36,"line": 683,"col": 4},{"file": 17,"line": 2185,"col": 4,"fields": []},{"file": 36,"line": 975,"col": 4,"docs": " Connection refused\n"},{"file": 36,"line": 1063,"col": 4,"docs": " Operation canceled\n"},{"file": 17,"line": 2465,"col": 4,"docs": " Repositions read/write file offset relative to the end.\n","fields": [5968,5969]},{"file": 36,"line": 439,"col": 4,"docs": " profiling time alarm\n"},{"file": 36,"line": 688,"col": 4},{"file": 36,"line": 542,"col": 4,"docs": " Filesystem events\n"},{"file": 17,"line": 2328,"col": 4},{"file": 36,"line": 729,"col": 4},{"file": 36,"line": 183,"col": 4},{"file": 36,"line": 32,"col": 4,"docs": " UNIX domain socket\n"},{"file": 36,"line": 755,"col": 4},{"file": 36,"line": 388,"col": 4,"docs": " bus error\n"},{"file": 36,"line": 815,"col": 4,"docs": " No child processes\n"},{"file": 36,"line": 920,"col": 4,"docs": " Protocol not supported\n"},{"file": 36,"line": 882,"col": 4,"docs": " Broken pipe\n"},{"file": 36,"line": 227,"col": 4,"docs": " share changes\n"},{"file": 36,"line": 442,"col": 4,"docs": " window size changes\n"},{"file": 17,"line": 1412,"col": 4,"docs": " Read value of a symbolic link.\n The return value is a slice of `out_buffer` from index 0.\n","fields": [5970,5971]},{"file": 36,"line": 863,"col": 4,"docs": " Text file busy\n"},{"file": 36,"line": 463,"col": 4,"docs": " add event to kq (implies enable)\n"},{"file": 36,"line": 590,"col": 4,"docs": " attributes changed\n"},{"file": 36,"line": 460,"col": 4,"docs": " output events only include change\n"},{"file": 36,"line": 527,"col": 4,"docs": " attached to vnodes\n"},{"file": 36,"line": 484,"col": 4,"docs": " force immediate event output\n ... with or without EV_ERROR\n ... use KEVENT_FLAG_ERROR_EVENTS\n     on syscalls supporting flags\n"},{"file": 36,"line": 751,"col": 4},{"file": 36,"line": 38,"col": 4},{"file": 36,"line": 788,"col": 4,"docs": " Operation not permitted\n"},{"file": 17,"line": 994,"col": 4,"fields": [5972,5973,5974]},{"file": 36,"line": 718,"col": 4},{"file": 36,"line": 737,"col": 4},{"file": 17,"line": 2148,"col": 4,"docs": " remove an existing watch from an inotify instance\n","fields": [5975,5976]},{"file": 36,"line": 457,"col": 4,"docs": " immediate timeout\n"},{"file": 36,"line": 1084,"col": 4,"docs": " No message available on STREAM\n"},{"file": 36,"line": 854,"col": 4,"docs": " Too many open files in system\n"},{"file": 36,"line": 336,"col": 4},{"file": 36,"line": 935,"col": 4,"docs": " Address already in use\n"},{"file": 36,"line": 926,"col": 4,"docs": " Operation not supported\n"},{"file": 36,"line": 830,"col": 4,"docs": " Block device required\n"},{"file": 17,"line": 2782,"col": 4},{"file": 36,"line": 803,"col": 4,"docs": " Device not configured\n"},{"file": 17,"line": 1959,"col": 4,"fields": [5977]},{"file": 36,"line": 800,"col": 4,"docs": " Input/output error\n"},{"file": 36,"line": 608,"col": 4,"docs": " process exited\n"},{"file": 36,"line": 321,"col": 4},{"file": 36,"line": 721,"col": 4},{"file": 17,"line": 1054,"col": 4,"docs": " Same as `unlink` except the parameter is a null terminated UTF8-encoded string.\n","fields": [5978]},{"file": 17,"line": 650,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n See also `openC`.\n","fields": [5979,5980,5981]},{"file": 36,"line": 323,"col": 4},{"file": 17,"line": 1250,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated UTF16LE encoded byte arrays.\n Assumes target is Windows.\n","fields": [5982,5983]},{"file": 36,"line": 687,"col": 4},{"file": 17,"line": 1814,"col": 4,"fields": [5984,5985,5986,5987]},{"file": 17,"line": 1078,"col": 4},{"file": 36,"line": 249,"col": 4,"docs": " reset to SIG_DFL when taking signal\n"},{"file": 36,"line": 190,"col": 4},{"file": 36,"line": 181,"col": 4},{"file": 36,"line": 1142,"col": 4},{"file": 17,"line": 1929,"col": 4,"docs": " Initiate a connection on a socket.\n","fields": [5988,5989,5990]},{"file": 36,"line": 1122,"col": 4},{"file": 17,"line": 3174,"col": 4},{"file": 36,"line": 728,"col": 4},{"file": 36,"line": 182,"col": 4},{"file": 36,"line": 987,"col": 4,"docs": " No route to host\n"},{"file": 36,"line": 719,"col": 4},{"file": 17,"line": 200,"col": 4},{"file": 36,"line": 545,"col": 4,"docs": " User events\n"},{"file": 17,"line": 1094,"col": 4,"docs": " Same as `unlinkat` but `file_path` is a null-terminated string.\n","fields": [5991,5992,5993]},{"file": 36,"line": 1102,"col": 4,"docs": " No such policy registered\n"},{"file": 36,"line": 322,"col": 4},{"file": 36,"line": 614,"col": 4,"docs": " process exec'd\n"},{"file": 36,"line": 733,"col": 4},{"file": 36,"line": 797,"col": 4,"docs": " Interrupted system call\n"},{"file": 36,"line": 991,"col": 4,"docs": " Directory not empty\n"},{"file": 17,"line": 29,"col": 4},{"file": 17,"line": 202,"col": 4,"fields": [5994]},{"file": 36,"line": 1133,"col": 4},{"file": 36,"line": 278,"col": 4,"docs": " open for reading only\n"},{"file": 36,"line": 878,"col": 4,"docs": " Too many links\n"},{"file": 36,"line": 602,"col": 4,"docs": " No specific vnode event: to test for EVFILT_READ      activation\n"},{"file": 36,"line": 761,"col": 4},{"file": 36,"line": 1016,"col": 4,"docs": " RPC prog. not avail\n"},{"file": 36,"line": 478,"col": 4,"docs": " clear event state after reporting\n"},{"file": 36,"line": 631,"col": 4},{"file": 36,"line": 693,"col": 4},{"file": 36,"line": 653,"col": 4,"docs": " data is nanoseconds\n"},{"file": 36,"line": 1096,"col": 4,"docs": " Protocol error\n"},{"file": 36,"line": 671,"col": 4},{"file": 17,"line": 270,"col": 4},{"file": 36,"line": 270,"col": 4},{"file": 36,"line": 745,"col": 4},{"file": 36,"line": 885,"col": 4,"docs": " Numerical argument out of domain\n"},{"file": 17,"line": 1491,"col": 4,"fields": [5995]},{"file": 36,"line": 744,"col": 4},{"file": 17,"line": 1370,"col": 4,"docs": " Changes the current working directory of the calling process.\n `dir_path` is recommended to be a UTF-8 encoded string.\n","fields": [5996]},{"file": 17,"line": 1000,"col": 4,"fields": [5997,5998,5999]},{"file": 36,"line": 341,"col": 4},{"file": 17,"line": 429,"col": 4},{"file": 36,"line": 340,"col": 4},{"file": 36,"line": 680,"col": 4},{"file": 17,"line": 1849,"col": 4},{"file": 36,"line": 705,"col": 4},{"file": 17,"line": 729,"col": 4,"fields": [6000,6001]},{"file": 36,"line": 487,"col": 4,"docs": " disable event after reporting\n"},{"file": 36,"line": 777,"col": 4,"fields": [6002]},{"file": 36,"line": 331,"col": 4},{"file": 36,"line": 794,"col": 4,"docs": " No such process\n"},{"file": 36,"line": 1105,"col": 4,"docs": " State not recoverable\n"},{"file": 36,"line": 565,"col": 4,"docs": " or fflags\n"},{"file": 36,"line": 742,"col": 4},{"file": 36,"line": 1119,"col": 4},{"file": 17,"line": 234,"col": 4,"fields": [6003,6004]},{"file": 36,"line": 367,"col": 4,"docs": " trace trap (not reset when caught)\n"},{"file": 36,"line": 556,"col": 4,"docs": " On input, NOTE_TRIGGER causes the event to be triggered for output.\n"},{"file": 36,"line": 665,"col": 4,"docs": " system does maximum timer coalescing\n"},{"file": 36,"line": 1114,"col": 4,"docs": " Must be equal largest errno\n"},{"file": 36,"line": 1147,"col": 4},{"file": 36,"line": 203,"col": 4,"docs": " [MC2] pages can be read\n"},{"file": 17,"line": 1501,"col": 4,"fields": [6005,6006]},{"file": 36,"line": 206,"col": 4,"docs": " [MC2] pages can be written\n"},{"file": 36,"line": 500,"col": 4,"docs": " report that source has vanished\n ... only valid with EV_DISPATCH2\n"},{"file": 36,"line": 533,"col": 4,"docs": " attached to struct proc\n"},{"file": 36,"line": 1155,"col": 4,"fields": [6007]},{"file": 17,"line": 1273,"col": 4,"docs": " Create a directory.\n `mode` is ignored on Windows.\n","fields": [6008,6009]},{"file": 36,"line": 1081,"col": 4,"docs": " Reserved\n"},{"file": 36,"line": 948,"col": 4,"docs": " Network dropped connection on reset\n"},{"file": 17,"line": 1874,"col": 4,"fields": [6010,6011,6012]},{"file": 36,"line": 675,"col": 4},{"file": 36,"line": 325,"col": 4},{"file": 36,"line": 812,"col": 4,"docs": " Bad file descriptor\n"},{"file": 36,"line": 809,"col": 4,"docs": " Exec format error\n"},{"file": 36,"line": 1087,"col": 4,"docs": " Reserved\n"},{"file": 17,"line": 2315,"col": 4,"docs": " Call from Windows-specific code if you already have a UTF-16LE encoded, null terminated string.\n Otherwise use `access` or `accessC`.\n TODO currently this ignores `mode`.\n","fields": [6013,6014]},{"file": 36,"line": 599,"col": 4,"docs": " vnode access was revoked\n"},{"file": 36,"line": 753,"col": 4},{"file": 36,"line": 332,"col": 4},{"file": 36,"line": 427,"col": 4,"docs": " input/output possible signal\n"},{"file": 36,"line": 1072,"col": 4,"docs": " Illegal byte sequence\n"},{"file": 17,"line": 2734,"col": 4},{"file": 17,"line": 3062,"col": 4},{"file": 36,"line": 342,"col": 4},{"file": 17,"line": 2116,"col": 4},{"file": 17,"line": 742,"col": 4},{"file": 17,"line": 1084,"col": 4,"docs": " Delete a file name and possibly the file it refers to, based on an open directory handle.\n","fields": [6015,6016,6017]},{"file": 36,"line": 575,"col": 4,"docs": " low water mark\n"},{"file": 36,"line": 1044,"col": 4,"docs": " Device error, e.g. paper out\n"},{"file": 36,"line": 335,"col": 4},{"file": 36,"line": 246,"col": 4,"docs": " restart system on signal return\n"},{"file": 36,"line": 732,"col": 4},{"file": 36,"line": 771,"col": 4,"fields": [6018]},{"file": 36,"line": 626,"col": 4,"docs": " mask for signal & exit status\n"},{"file": 17,"line": 1423,"col": 4,"docs": " Same as `readlink` except `file_path` is null-terminated.\n","fields": [6019,6020]},{"file": 36,"line": 929,"col": 4,"docs": " Protocol family not supported\n"},{"file": 36,"line": 1149,"col": 4},{"file": 17,"line": 2104,"col": 4,"docs": " initialize an inotify instance\n","fields": [6021]},{"file": 36,"line": 723,"col": 4},{"file": 36,"line": 1019,"col": 4,"docs": " Program version wrong\n"},{"file": 36,"line": 747,"col": 4},{"file": 36,"line": 180,"col": 4},{"file": 36,"line": 711,"col": 4},{"file": 36,"line": 942,"col": 4,"docs": " Network is down\n"},{"file": 36,"line": 743,"col": 4},{"file": 36,"line": 1151,"col": 4},{"file": 17,"line": 1043,"col": 4,"docs": " Delete a name and possibly the file it refers to.\n See also `unlinkC`.\n","fields": [6022]},{"file": 36,"line": 741,"col": 4},{"file": 36,"line": 1132,"col": 4},{"file": 36,"line": 1022,"col": 4,"docs": " Bad procedure for program\n"},{"file": 36,"line": 717,"col": 4},{"file": 36,"line": 559,"col": 4,"docs": " ignore input fflags\n"},{"file": 17,"line": 2172,"col": 4,"docs": " `memory.len` must be page-aligned.\n","fields": [6023,6024]},{"file": 17,"line": 1580,"col": 4,"fields": [6025,6026,6027]},{"file": 17,"line": 27,"col": 4},{"file": 36,"line": 1007,"col": 4,"docs": " Too many levels of remote in path\n"},{"file": 17,"line": 2288,"col": 4,"docs": " Same as `access` except `path` is null-terminated.\n","fields": [6028,6029]},{"file": 36,"line": 762,"col": 4},{"file": 36,"line": 195,"col": 4},{"file": 17,"line": 933,"col": 4},{"file": 36,"line": 1143,"col": 4},{"file": 36,"line": 1183,"col": 4,"fields": [6030]},{"file": 36,"line": 415,"col": 4,"docs": " continue a stopped process\n"},{"file": 36,"line": 293,"col": 4,"docs": " create file if it does not exist\n"},{"file": 17,"line": 2381,"col": 4,"fields": [6031,6032,6033,6034,6035]},{"file": 36,"line": 1175,"col": 4,"fields": [6036]},{"file": 36,"line": 1130,"col": 4},{"file": 36,"line": 703,"col": 4},{"file": 17,"line": 30,"col": 4},{"file": 17,"line": 1668,"col": 4,"fields": [6037,6038]},{"file": 36,"line": 945,"col": 4,"docs": " Network is unreachable\n"},{"file": 36,"line": 255,"col": 4,"docs": " don't mask the signal we're delivering\n"},{"file": 36,"line": 627,"col": 4},{"file": 36,"line": 116,"col": 4,"docs": " Renamed from `sigaction` to `Sigaction` to avoid conflict with function name.\n"},{"file": 36,"line": 61,"col": 4,"docs": " Renamed to Stat to not conflict with the stat function.\n atime, mtime, and ctime have functions to return `timespec`,\n because although this is a POSIX API, the layout and names of\n the structs are inconsistent across operating systems, and\n in C, macros are used to hide the differences. Here we use\n methods to accomplish this.\n"},{"file": 36,"line": 512,"col": 4,"docs": " EOF detected\n"},{"file": 36,"line": 122,"col": 4},{"file": 36,"line": 539,"col": 4,"docs": " Mach portsets\n"},{"file": 36,"line": 917,"col": 4,"docs": " Protocol not available\n"},{"file": 36,"line": 662,"col": 4,"docs": " system does minimal timer coalescing\n"},{"file": 36,"line": 272,"col": 4},{"file": 17,"line": 759,"col": 4,"docs": " Like `execve` except the parameters are null-terminated,\n matching the syscall API on all targets. This removes the need for an allocator.\n This function ignores PATH environment variable. See `execvpeC` for that.\n","fields": [6039,6040,6041]},{"file": 36,"line": 1069,"col": 4,"docs": " No message of desired type\n"},{"file": 36,"line": 735,"col": 4},{"file": 17,"line": 2397,"col": 4,"fields": [6042,6043]},{"file": 17,"line": 2714,"col": 4},{"file": 36,"line": 234,"col": 4},{"file": 36,"line": 682,"col": 4},{"file": 17,"line": 691,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted.\n `file_path` is relative to the open directory handle `dir_fd`.\n See also `openatC`.\n","fields": [6044,6045,6046,6047]},{"file": 17,"line": 32,"col": 4},{"file": 17,"line": 1869,"col": 4},{"file": 36,"line": 638,"col": 4,"docs": " will quit on memory       pressure, possibly after cleaning up dirty state\n"},{"file": 36,"line": 1034,"col": 4,"docs": " Authentication error\n"},{"file": 36,"line": 685,"col": 4},{"file": 17,"line": 3124,"col": 4},{"file": 36,"line": 957,"col": 4,"docs": " No buffer space available\n"},{"file": 36,"line": 391,"col": 4,"docs": " segmentation violation\n"},{"file": 17,"line": 31,"col": 4},{"file": 17,"line": 2805,"col": 4,"docs": " Examine and change a signal action.\n","fields": [6048,6049,6050]},{"file": 36,"line": 9,"col": 4},{"file": 36,"line": 436,"col": 4,"docs": " virtual time alarm\n"},{"file": 17,"line": 232,"col": 4},{"file": 17,"line": 508,"col": 4,"docs": " Write multiple buffers to a file descriptor.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [6051,6052]},{"file": 36,"line": 571,"col": 4,"docs": " mask for operations\n"},{"file": 36,"line": 43,"col": 4},{"file": 36,"line": 1116,"col": 4},{"file": 17,"line": 1680,"col": 4},{"file": 17,"line": 1632,"col": 4,"docs": " addr is `*const T` where T is one of the sockaddr\n","fields": [6053,6054,6055]},{"file": 36,"line": 267,"col": 4,"docs": " signal handler with SA_SIGINFO args with 64bit   regs information\n"},{"file": 36,"line": 355,"col": 4,"docs": " hangup\n"},{"file": 17,"line": 968,"col": 4,"docs": " This is the same as `symlink` except the parameters are null-terminated pointers.\n See also `symlink`.\n","fields": [6056,6057]},{"file": 36,"line": 889,"col": 4,"docs": " Result too large\n"},{"file": 36,"line": 722,"col": 4},{"file": 36,"line": 1099,"col": 4,"docs": " STREAM ioctl timeout\n"},{"file": 36,"line": 409,"col": 4,"docs": " sendable stop signal not from tty\n"},{"file": 17,"line": 3094,"col": 4,"fields": [6058,6059,6060,6061,6062]},{"file": 36,"line": 898,"col": 4,"docs": " Operation now in progress\n"},{"file": 17,"line": 2008,"col": 4},{"file": 36,"line": 382,"col": 4,"docs": " floating point exception\n"},{"file": 36,"line": 424,"col": 4,"docs": " like TTIN for output if (tp->t_local&LTOSTOP)\n"},{"file": 36,"line": 327,"col": 4},{"file": 17,"line": 1855,"col": 4,"fields": [6063,6064]},{"file": 36,"line": 704,"col": 4},{"file": 36,"line": 1188,"col": 4},{"file": 17,"line": 1465,"col": 4},{"file": 17,"line": 1358,"col": 4},{"file": 36,"line": 738,"col": 4},{"file": 17,"line": 1834,"col": 4,"docs": " Waits for an I/O event on an epoll file descriptor.\n Returns the number of file descriptors ready for the requested I/O,\n or zero if no file descriptor became ready during the requested timeout milliseconds.\n","fields": [6065,6066,6067]},{"file": 36,"line": 736,"col": 4},{"file": 36,"line": 701,"col": 4},{"file": 36,"line": 875,"col": 4,"docs": " Read-only file system\n"},{"file": 36,"line": 53,"col": 4},{"file": 36,"line": 290,"col": 4,"docs": " append on each write\n"},{"file": 36,"line": 650,"col": 4,"docs": " data is microseconds\n"},{"file": 36,"line": 1093,"col": 4,"docs": " Not a STREAM\n"},{"file": 36,"line": 1134,"col": 4},{"file": 36,"line": 860,"col": 4,"docs": " Inappropriate ioctl for device\n"},{"file": 36,"line": 466,"col": 4,"docs": " delete event from kq\n"},{"file": 36,"line": 308,"col": 4,"docs": " do not follow symlinks\n"},{"file": 17,"line": 869,"col": 4,"fields": [6068,6069]},{"file": 17,"line": 33,"col": 4},{"file": 17,"line": 2097,"col": 4},{"file": 36,"line": 224,"col": 4,"docs": " changes are private\n"},{"file": 36,"line": 15,"col": 4},{"file": 36,"line": 923,"col": 4,"docs": " Socket type not supported\n"},{"file": 36,"line": 302,"col": 4,"docs": " atomically obtain a shared lock\n"},{"file": 36,"line": 1108,"col": 4,"docs": " Previous owner died\n"},{"file": 36,"line": 1141,"col": 4},{"file": 36,"line": 827,"col": 4,"docs": " Bad address\n"},{"file": 36,"line": 320,"col": 4},{"file": 36,"line": 806,"col": 4,"docs": " Argument list too long\n"},{"file": 36,"line": 691,"col": 4},{"file": 36,"line": 1031,"col": 4,"docs": " Inappropriate file type or format\n"},{"file": 36,"line": 757,"col": 4},{"file": 17,"line": 1706,"col": 4,"docs": " Accept a connection on a socket.\n If the application has a global event loop enabled, EAGAIN is handled\n via the event loop. Otherwise EAGAIN results in error.WouldBlock.\n","fields": [6070,6071,6072,6073]},{"file": 36,"line": 189,"col": 4},{"file": 17,"line": 81,"col": 4,"docs": " To obtain errno, call this function with the return value of the\n system function call. For some systems this will obtain the value directly\n from the return code; for others it will use a thread-local errno variable.\n Therefore, this function only returns a well-defined value when it is called\n directly after the system function call which one wants to learn the errno\n value of.\n"},{"file": 36,"line": 712,"col": 4},{"file": 17,"line": 1218,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated byte arrays.\n","fields": [6074,6075]},{"file": 36,"line": 364,"col": 4,"docs": " illegal instruction (not reset when caught)\n"},{"file": 36,"line": 433,"col": 4,"docs": " exceeded file size limit\n"},{"file": 36,"line": 385,"col": 4,"docs": " kill (cannot be caught or ignored)\n"},{"file": 36,"line": 311,"col": 4,"docs": " allow open of symlinks\n"},{"file": 36,"line": 902,"col": 4,"docs": " Operation already in progress\n"},{"file": 17,"line": 1887,"col": 4},{"file": 36,"line": 969,"col": 4,"docs": " Too many references: can't splice\n"},{"file": 36,"line": 666,"col": 4},{"file": 36,"line": 337,"col": 4},{"file": 36,"line": 240,"col": 4,"docs": " [XSI] notify on stop, untraced child\n"},{"file": 17,"line": 1205,"col": 4,"docs": " Change the name or location of a file.\n","fields": [6076,6077]},{"file": 17,"line": 1533,"col": 4,"fields": [6078]},{"file": 36,"line": 963,"col": 4,"docs": " Socket is not connected\n"},{"file": 17,"line": 2725,"col": 4,"fields": [6079,6080]},{"file": 36,"line": 1171,"col": 4,"fields": [6081]},{"file": 36,"line": 972,"col": 4,"docs": " Operation timed out\n"},{"file": 36,"line": 686,"col": 4},{"file": 36,"line": 572,"col": 4},{"file": 17,"line": 26,"col": 4},{"file": 36,"line": 1054,"col": 4,"docs": " Bad CPU type in executable\n"},{"file": 17,"line": 1123,"col": 4,"docs": " Same as `unlinkat` but `sub_path_w` is UTF16LE, NT prefixed. Windows only.\n","fields": [6082,6083,6084]},{"file": 36,"line": 548,"col": 4,"docs": " Virtual memory events\n"},{"file": 36,"line": 349,"col": 4,"docs": " unblock specified signal set\n"},{"file": 36,"line": 848,"col": 4,"docs": " Is a directory\n"},{"file": 17,"line": 1653,"col": 0},{"file": 17,"line": 21,"col": 0},{"file": 17,"line": 19,"col": 0},{"file": 17,"line": 16,"col": 0},{"file": 17,"line": 17,"col": 0},{"file": 17,"line": 158,"col": 0,"fields": [6085]},{"file": 17,"line": 1185,"col": 0},{"file": 17,"line": 20,"col": 0},{"file": 17,"line": 18,"col": 0},{"file": 17,"line": 23,"col": 0},{"file": 17,"line": 22,"col": 0},{"file": 18,"line": 1405,"col": 4},{"file": 18,"line": 2370,"col": 4,"docs": " Attaches a global SIGSEGV handler which calls @panic(\"segmentation fault\");\n","fields": []},{"file": 18,"line": 139,"col": 4,"docs": " Returns a slice with the same pointer as addresses, with a potentially smaller len.\n On Windows, when first_address is not null, we ask for at least 32 stack frames,\n and then try to find the first address. If addresses.len is more than 32, we\n capture that many stack frames exactly, and then look for the first address,\n chopping off the irrelevant frames and shifting so that the returned addresses pointer\n equals the passed in addresses pointer.\n","fields": [6086,6087]},{"file": 18,"line": 326,"col": 4,"fields": [6088,6089,6090,6091]},{"file": 18,"line": 2355,"col": 4,"docs": " Whether or not the current target can print useful debug information when a segfault occurs.\n"},{"file": 18,"line": 1256,"col": 4},{"file": 18,"line": 2356,"col": 4},{"file": 18,"line": 19,"col": 4},{"file": 18,"line": 1229,"col": 4},{"file": 18,"line": 1227,"col": 4},{"file": 18,"line": 1226,"col": 4},{"file": 18,"line": 276,"col": 4},{"file": 18,"line": 828,"col": 4},{"file": 18,"line": 21,"col": 4},{"file": 18,"line": 24,"col": 4},{"file": 18,"line": 110,"col": 4,"docs": " Tries to print the stack trace starting from the supplied base pointer to stderr,\n unbuffered, and ignores any error returned.\n TODO multithreaded awareness\n","fields": [6092,6093]},{"file": 18,"line": 2452,"col": 4,"fields": [6094]},{"file": 18,"line": 67,"col": 4,"fields": []},{"file": 18,"line": 22,"col": 4},{"file": 18,"line": 775,"col": 4,"fields": [6095,6096,6097,6098]},{"file": 18,"line": 1031,"col": 4,"docs": " Initialize DWARF info. The caller has the responsibility to initialize most\n the DwarfInfo fields before calling. These fields can be left undefined:\n * abbrev_table_list\n * compile_unit_list\n","fields": [6099,6100]},{"file": 18,"line": 735,"col": 4,"docs": " This function works in freestanding mode.\n fn printLineFromFile(out_stream: var, line_info: LineInfo) !void\n","fields": [6101,6102,6103,6104,6105]},{"file": 18,"line": 2339,"col": 4,"docs": " This should only be used in temporary test programs.\n"},{"file": 18,"line": 1039,"col": 4,"fields": [6106,6107,6108]},{"file": 18,"line": 1512,"col": 0,"fields": [6109,6110,6111]},{"file": 18,"line": 2,"col": 0},{"file": 18,"line": 628,"col": 0,"fields": [6112,6113]},{"file": 18,"line": 252,"col": 0},{"file": 18,"line": 1664,"col": 0,"docs": " Gets an already existing AbbrevTable given the abbrev_offset, or if not found,\n seeks in the stream and parses it.\n","fields": [6114,6115]},{"file": 18,"line": 2441,"col": 0,"fields": [6116]},{"file": 18,"line": 1562,"col": 0,"fields": [6117]},{"file": 18,"line": 8,"col": 0},{"file": 18,"line": 1495,"col": 0,"fields": [6118,6119]},{"file": 18,"line": 220,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 18,"line": 4,"col": 0},{"file": 18,"line": 1398,"col": 0},{"file": 18,"line": 1002,"col": 0,"fields": [6120,6121]},{"file": 18,"line": 43,"col": 0},{"file": 18,"line": 254,"col": 0},{"file": 18,"line": 7,"col": 0},{"file": 18,"line": 2069,"col": 0},{"file": 18,"line": 1205,"col": 0},{"file": 18,"line": 1525,"col": 0,"fields": [6122,6123,6124]},{"file": 18,"line": 3,"col": 0},{"file": 18,"line": 1417,"col": 0},{"file": 18,"line": 251,"col": 0},{"file": 18,"line": 14,"col": 0},{"file": 18,"line": 1328,"col": 0},{"file": 18,"line": 15,"col": 0},{"file": 18,"line": 1637,"col": 0,"fields": [6125]},{"file": 18,"line": 10,"col": 0},{"file": 18,"line": 2188,"col": 0,"fields": [6126]},{"file": 18,"line": 1685,"col": 0,"fields": [6127,6128,6129]},{"file": 18,"line": 1530,"col": 0,"fields": [6130,6131,6132,6133]},{"file": 18,"line": 253,"col": 0},{"file": 18,"line": 250,"col": 0},{"file": 18,"line": 2074,"col": 0,"fields": [6134,6135]},{"file": 18,"line": 5,"col": 0},{"file": 18,"line": 569,"col": 0,"docs": " TODO this is a special case hack right now. clean it up and maybe make it part of std.fmt\n","fields": [6136]},{"file": 18,"line": 16,"col": 0},{"file": 18,"line": 1519,"col": 0,"fields": [6137,6138,6139]},{"file": 18,"line": 848,"col": 0,"fields": [6140]},{"file": 18,"line": 1295,"col": 0},{"file": 18,"line": 1338,"col": 0},{"file": 18,"line": 6,"col": 0},{"file": 18,"line": 9,"col": 0},{"file": 18,"line": 13,"col": 0},{"file": 18,"line": 2367,"col": 0},{"file": 18,"line": 2344,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 18,"line": 1288,"col": 0},{"file": 18,"line": 558,"col": 0},{"file": 18,"line": 1574,"col": 0,"fields": [6141,6142,6143]},{"file": 18,"line": 1,"col": 0},{"file": 18,"line": 2340,"col": 0},{"file": 18,"line": 42,"col": 0,"docs": " Tries to write to stderr, unbuffered, and ignores any error returned.\n Does not append a newline.\n"},{"file": 18,"line": 1315,"col": 0},{"file": 18,"line": 1064,"col": 0,"fields": [6144]},{"file": 18,"line": 2341,"col": 0},{"file": 18,"line": 2253,"col": 0,"fields": [6145,6146]},{"file": 18,"line": 2326,"col": 0,"fields": [6147,6148,6149]},{"file": 18,"line": 1303,"col": 0},{"file": 18,"line": 29,"col": 0},{"file": 18,"line": 2387,"col": 0,"fields": []},{"file": 18,"line": 45,"col": 0},{"file": 18,"line": 46,"col": 0},{"file": 18,"line": 2086,"col": 0,"fields": [6150]},{"file": 18,"line": 11,"col": 0},{"file": 18,"line": 1283,"col": 0},{"file": 18,"line": 1019,"col": 0,"fields": [6151,6152]},{"file": 18,"line": 0,"col": 0},{"file": 18,"line": 1557,"col": 0,"fields": [6153,6154]},{"file": 18,"line": 358,"col": 0,"fields": [6155,6156,6157,6158]},{"file": 18,"line": 1310,"col": 0},{"file": 18,"line": 1505,"col": 0,"fields": [6159,6160]},{"file": 18,"line": 2403,"col": 0,"fields": [6161,6162,6163]},{"file": 18,"line": 1297,"col": 0},{"file": 18,"line": 1678,"col": 0,"fields": [6164,6165]},{"file": 18,"line": 17,"col": 0},{"file": 18,"line": 72,"col": 0,"docs": " TODO multithreaded awareness\n"},{"file": 18,"line": 1903,"col": 0,"fields": [6166,6167,6168]},{"file": 18,"line": 12,"col": 0},{"file": 18,"line": 1588,"col": 0,"fields": [6169,6170,6171,6172]},{"file": 18,"line": 1220,"col": 0},{"file": 18,"line": 2345,"col": 0},{"file": 18,"line": 249,"col": 0},{"file": 19,"line": 577,"col": 4},{"file": 19,"line": 302,"col": 4},{"file": 19,"line": 386,"col": 4},{"file": 19,"line": 615,"col": 4},{"file": 19,"line": 603,"col": 4},{"file": 19,"line": 350,"col": 4},{"file": 19,"line": 508,"col": 4},{"file": 19,"line": 490,"col": 4},{"file": 19,"line": 148,"col": 4},{"file": 19,"line": 567,"col": 4},{"file": 19,"line": 121,"col": 4},{"file": 19,"line": 515,"col": 4},{"file": 19,"line": 609,"col": 4},{"file": 19,"line": 622,"col": 4},{"file": 19,"line": 449,"col": 4},{"file": 19,"line": 421,"col": 4},{"file": 19,"line": 141,"col": 4},{"file": 19,"line": 389,"col": 4},{"file": 19,"line": 643,"col": 4},{"file": 19,"line": 303,"col": 4},{"file": 19,"line": 430,"col": 4},{"file": 19,"line": 447,"col": 4},{"file": 19,"line": 406,"col": 4},{"file": 19,"line": 325,"col": 4},{"file": 19,"line": 330,"col": 4},{"file": 19,"line": 210,"col": 4},{"file": 19,"line": 437,"col": 4},{"file": 19,"line": 232,"col": 4},{"file": 19,"line": 223,"col": 4},{"file": 19,"line": 269,"col": 4},{"file": 19,"line": 285,"col": 4},{"file": 19,"line": 660,"col": 4},{"file": 19,"line": 418,"col": 4},{"file": 19,"line": 534,"col": 4},{"file": 19,"line": 399,"col": 4},{"file": 19,"line": 474,"col": 4},{"file": 19,"line": 25,"col": 4},{"file": 19,"line": 222,"col": 4},{"file": 19,"line": 341,"col": 4},{"file": 19,"line": 433,"col": 4},{"file": 19,"line": 362,"col": 4},{"file": 19,"line": 292,"col": 4},{"file": 19,"line": 371,"col": 4},{"file": 19,"line": 174,"col": 4},{"file": 19,"line": 74,"col": 4},{"file": 19,"line": 94,"col": 4},{"file": 19,"line": 197,"col": 4},{"file": 19,"line": 340,"col": 4},{"file": 19,"line": 191,"col": 4},{"file": 19,"line": 273,"col": 4},{"file": 19,"line": 344,"col": 4},{"file": 19,"line": 464,"col": 4},{"file": 19,"line": 7,"col": 4},{"file": 19,"line": 568,"col": 4},{"file": 19,"line": 161,"col": 4},{"file": 19,"line": 552,"col": 4},{"file": 19,"line": 471,"col": 4},{"file": 19,"line": 674,"col": 4},{"file": 19,"line": 650,"col": 4},{"file": 19,"line": 81,"col": 4},{"file": 19,"line": 34,"col": 4},{"file": 19,"line": 357,"col": 4},{"file": 19,"line": 611,"col": 4},{"file": 19,"line": 649,"col": 4},{"file": 19,"line": 145,"col": 4},{"file": 19,"line": 46,"col": 4},{"file": 19,"line": 102,"col": 4},{"file": 19,"line": 107,"col": 4},{"file": 19,"line": 237,"col": 4},{"file": 19,"line": 142,"col": 4},{"file": 19,"line": 467,"col": 4},{"file": 19,"line": 29,"col": 4},{"file": 19,"line": 270,"col": 4},{"file": 19,"line": 669,"col": 4},{"file": 19,"line": 54,"col": 4},{"file": 19,"line": 673,"col": 4},{"file": 19,"line": 663,"col": 4},{"file": 19,"line": 110,"col": 4},{"file": 19,"line": 335,"col": 4},{"file": 19,"line": 492,"col": 4},{"file": 19,"line": 566,"col": 4},{"file": 19,"line": 45,"col": 4},{"file": 19,"line": 641,"col": 4},{"file": 19,"line": 153,"col": 4},{"file": 19,"line": 597,"col": 4},{"file": 19,"line": 547,"col": 4},{"file": 19,"line": 192,"col": 4},{"file": 19,"line": 205,"col": 4},{"file": 19,"line": 163,"col": 4},{"file": 19,"line": 177,"col": 4},{"file": 19,"line": 272,"col": 4},{"file": 19,"line": 578,"col": 4},{"file": 19,"line": 27,"col": 4},{"file": 19,"line": 290,"col": 4},{"file": 19,"line": 247,"col": 4},{"file": 19,"line": 347,"col": 4},{"file": 19,"line": 653,"col": 4},{"file": 19,"line": 584,"col": 4},{"file": 19,"line": 0,"col": 4},{"file": 19,"line": 323,"col": 4},{"file": 19,"line": 127,"col": 4},{"file": 19,"line": 204,"col": 4},{"file": 19,"line": 137,"col": 4},{"file": 19,"line": 87,"col": 4},{"file": 19,"line": 40,"col": 4},{"file": 19,"line": 358,"col": 4},{"file": 19,"line": 644,"col": 4},{"file": 19,"line": 588,"col": 4},{"file": 19,"line": 284,"col": 4},{"file": 19,"line": 365,"col": 4},{"file": 19,"line": 257,"col": 4},{"file": 19,"line": 31,"col": 4},{"file": 19,"line": 634,"col": 4},{"file": 19,"line": 93,"col": 4},{"file": 19,"line": 67,"col": 4},{"file": 19,"line": 445,"col": 4},{"file": 19,"line": 309,"col": 4},{"file": 19,"line": 280,"col": 4},{"file": 19,"line": 657,"col": 4},{"file": 19,"line": 454,"col": 4},{"file": 19,"line": 47,"col": 4},{"file": 19,"line": 426,"col": 4},{"file": 19,"line": 367,"col": 4},{"file": 19,"line": 392,"col": 4},{"file": 19,"line": 318,"col": 4},{"file": 19,"line": 100,"col": 4},{"file": 19,"line": 409,"col": 4},{"file": 19,"line": 607,"col": 4},{"file": 19,"line": 28,"col": 4},{"file": 19,"line": 316,"col": 4},{"file": 19,"line": 639,"col": 4},{"file": 19,"line": 672,"col": 4},{"file": 19,"line": 575,"col": 4},{"file": 19,"line": 442,"col": 4},{"file": 19,"line": 374,"col": 4},{"file": 19,"line": 52,"col": 4},{"file": 19,"line": 203,"col": 4},{"file": 19,"line": 556,"col": 4},{"file": 19,"line": 451,"col": 4},{"file": 19,"line": 666,"col": 4},{"file": 19,"line": 679,"col": 4},{"file": 19,"line": 368,"col": 4},{"file": 19,"line": 423,"col": 4},{"file": 19,"line": 612,"col": 4},{"file": 19,"line": 369,"col": 4},{"file": 19,"line": 396,"col": 4},{"file": 19,"line": 626,"col": 4},{"file": 19,"line": 432,"col": 4},{"file": 19,"line": 119,"col": 4},{"file": 19,"line": 408,"col": 4},{"file": 19,"line": 506,"col": 4},{"file": 19,"line": 668,"col": 4},{"file": 19,"line": 15,"col": 4},{"file": 19,"line": 640,"col": 4},{"file": 19,"line": 439,"col": 4},{"file": 19,"line": 520,"col": 4},{"file": 19,"line": 416,"col": 4},{"file": 19,"line": 628,"col": 4},{"file": 19,"line": 542,"col": 4},{"file": 19,"line": 459,"col": 4},{"file": 19,"line": 480,"col": 4},{"file": 19,"line": 565,"col": 4},{"file": 19,"line": 420,"col": 4},{"file": 19,"line": 401,"col": 4},{"file": 19,"line": 261,"col": 4},{"file": 19,"line": 476,"col": 4},{"file": 19,"line": 561,"col": 4},{"file": 19,"line": 132,"col": 4},{"file": 19,"line": 496,"col": 4},{"file": 19,"line": 326,"col": 4},{"file": 19,"line": 256,"col": 4},{"file": 19,"line": 133,"col": 4},{"file": 19,"line": 554,"col": 4},{"file": 19,"line": 502,"col": 4},{"file": 19,"line": 678,"col": 4},{"file": 19,"line": 23,"col": 4},{"file": 19,"line": 114,"col": 4},{"file": 19,"line": 466,"col": 4},{"file": 19,"line": 328,"col": 4},{"file": 19,"line": 629,"col": 4},{"file": 19,"line": 260,"col": 4},{"file": 19,"line": 602,"col": 4},{"file": 19,"line": 373,"col": 4},{"file": 19,"line": 665,"col": 4},{"file": 19,"line": 18,"col": 4},{"file": 19,"line": 245,"col": 4},{"file": 19,"line": 199,"col": 4},{"file": 19,"line": 160,"col": 4},{"file": 19,"line": 241,"col": 4},{"file": 19,"line": 537,"col": 4},{"file": 19,"line": 631,"col": 4},{"file": 19,"line": 509,"col": 4},{"file": 19,"line": 543,"col": 4},{"file": 19,"line": 659,"col": 4},{"file": 19,"line": 317,"col": 4},{"file": 19,"line": 590,"col": 4},{"file": 19,"line": 258,"col": 4},{"file": 19,"line": 478,"col": 4},{"file": 19,"line": 10,"col": 4},{"file": 19,"line": 546,"col": 4},{"file": 19,"line": 627,"col": 4},{"file": 19,"line": 654,"col": 4},{"file": 19,"line": 283,"col": 4},{"file": 19,"line": 343,"col": 4},{"file": 19,"line": 293,"col": 4},{"file": 19,"line": 670,"col": 4},{"file": 19,"line": 187,"col": 4},{"file": 19,"line": 282,"col": 4},{"file": 19,"line": 630,"col": 4},{"file": 19,"line": 545,"col": 4},{"file": 19,"line": 572,"col": 4},{"file": 19,"line": 24,"col": 4},{"file": 19,"line": 324,"col": 4},{"file": 19,"line": 349,"col": 4},{"file": 19,"line": 164,"col": 4},{"file": 19,"line": 591,"col": 4},{"file": 19,"line": 186,"col": 4},{"file": 19,"line": 128,"col": 4},{"file": 19,"line": 348,"col": 4},{"file": 19,"line": 551,"col": 4},{"file": 19,"line": 486,"col": 4},{"file": 19,"line": 38,"col": 4},{"file": 19,"line": 254,"col": 4},{"file": 19,"line": 570,"col": 4},{"file": 19,"line": 22,"col": 4},{"file": 19,"line": 64,"col": 4},{"file": 19,"line": 26,"col": 4},{"file": 19,"line": 623,"col": 4},{"file": 19,"line": 255,"col": 4},{"file": 19,"line": 17,"col": 4},{"file": 19,"line": 315,"col": 4},{"file": 19,"line": 387,"col": 4},{"file": 19,"line": 404,"col": 4},{"file": 19,"line": 185,"col": 4},{"file": 19,"line": 193,"col": 4},{"file": 19,"line": 339,"col": 4},{"file": 19,"line": 182,"col": 4},{"file": 19,"line": 130,"col": 4},{"file": 19,"line": 208,"col": 4},{"file": 19,"line": 131,"col": 4},{"file": 19,"line": 44,"col": 4},{"file": 19,"line": 168,"col": 4},{"file": 19,"line": 294,"col": 4},{"file": 19,"line": 57,"col": 4},{"file": 19,"line": 652,"col": 4},{"file": 19,"line": 481,"col": 4},{"file": 19,"line": 539,"col": 4},{"file": 19,"line": 456,"col": 4},{"file": 19,"line": 9,"col": 4},{"file": 19,"line": 184,"col": 4},{"file": 19,"line": 216,"col": 4},{"file": 19,"line": 242,"col": 4},{"file": 19,"line": 189,"col": 4},{"file": 19,"line": 259,"col": 4},{"file": 19,"line": 390,"col": 4},{"file": 19,"line": 646,"col": 4},{"file": 19,"line": 11,"col": 4},{"file": 19,"line": 427,"col": 4},{"file": 19,"line": 448,"col": 4},{"file": 19,"line": 411,"col": 4},{"file": 19,"line": 213,"col": 4},{"file": 19,"line": 226,"col": 4},{"file": 19,"line": 444,"col": 4},{"file": 19,"line": 321,"col": 4},{"file": 19,"line": 165,"col": 4},{"file": 19,"line": 176,"col": 4},{"file": 19,"line": 126,"col": 4},{"file": 19,"line": 637,"col": 4},{"file": 19,"line": 56,"col": 4},{"file": 19,"line": 55,"col": 4},{"file": 19,"line": 417,"col": 4},{"file": 19,"line": 377,"col": 4},{"file": 19,"line": 393,"col": 4},{"file": 19,"line": 398,"col": 4},{"file": 19,"line": 473,"col": 4},{"file": 19,"line": 167,"col": 4},{"file": 19,"line": 434,"col": 4},{"file": 19,"line": 532,"col": 4},{"file": 19,"line": 58,"col": 4},{"file": 19,"line": 562,"col": 4},{"file": 19,"line": 233,"col": 4},{"file": 19,"line": 461,"col": 4},{"file": 19,"line": 458,"col": 4},{"file": 19,"line": 238,"col": 4},{"file": 19,"line": 470,"col": 4},{"file": 19,"line": 494,"col": 4},{"file": 19,"line": 149,"col": 4},{"file": 19,"line": 608,"col": 4},{"file": 19,"line": 383,"col": 4},{"file": 19,"line": 619,"col": 4},{"file": 19,"line": 239,"col": 4},{"file": 19,"line": 413,"col": 4},{"file": 19,"line": 379,"col": 4},{"file": 19,"line": 156,"col": 4},{"file": 19,"line": 266,"col": 4},{"file": 19,"line": 120,"col": 4},{"file": 19,"line": 14,"col": 4},{"file": 19,"line": 231,"col": 4},{"file": 19,"line": 173,"col": 4},{"file": 19,"line": 355,"col": 4},{"file": 19,"line": 381,"col": 4},{"file": 19,"line": 468,"col": 4},{"file": 19,"line": 60,"col": 4},{"file": 19,"line": 221,"col": 4},{"file": 19,"line": 219,"col": 4},{"file": 19,"line": 582,"col": 4},{"file": 19,"line": 667,"col": 4},{"file": 19,"line": 162,"col": 4},{"file": 19,"line": 195,"col": 4},{"file": 19,"line": 152,"col": 4},{"file": 19,"line": 312,"col": 4},{"file": 19,"line": 271,"col": 4},{"file": 19,"line": 118,"col": 4},{"file": 19,"line": 589,"col": 4},{"file": 19,"line": 76,"col": 4},{"file": 19,"line": 636,"col": 4},{"file": 19,"line": 354,"col": 4},{"file": 19,"line": 635,"col": 4},{"file": 19,"line": 345,"col": 4},{"file": 19,"line": 179,"col": 4},{"file": 19,"line": 499,"col": 4},{"file": 19,"line": 671,"col": 4},{"file": 19,"line": 267,"col": 4},{"file": 19,"line": 209,"col": 4},{"file": 19,"line": 281,"col": 4},{"file": 19,"line": 175,"col": 4},{"file": 19,"line": 655,"col": 4},{"file": 19,"line": 146,"col": 4},{"file": 19,"line": 587,"col": 4},{"file": 19,"line": 363,"col": 4},{"file": 19,"line": 633,"col": 4},{"file": 19,"line": 435,"col": 4},{"file": 19,"line": 201,"col": 4},{"file": 19,"line": 533,"col": 4},{"file": 19,"line": 352,"col": 4},{"file": 19,"line": 576,"col": 4},{"file": 19,"line": 606,"col": 4},{"file": 19,"line": 334,"col": 4},{"file": 19,"line": 656,"col": 4},{"file": 19,"line": 196,"col": 4},{"file": 19,"line": 526,"col": 4},{"file": 19,"line": 453,"col": 4},{"file": 19,"line": 559,"col": 4},{"file": 19,"line": 83,"col": 4},{"file": 19,"line": 425,"col": 4},{"file": 19,"line": 385,"col": 4},{"file": 19,"line": 39,"col": 4},{"file": 19,"line": 172,"col": 4},{"file": 19,"line": 382,"col": 4},{"file": 19,"line": 327,"col": 4},{"file": 19,"line": 410,"col": 4},{"file": 19,"line": 306,"col": 4},{"file": 19,"line": 5,"col": 4},{"file": 19,"line": 180,"col": 4},{"file": 19,"line": 2,"col": 4},{"file": 19,"line": 485,"col": 4},{"file": 19,"line": 159,"col": 4},{"file": 19,"line": 360,"col": 4},{"file": 19,"line": 441,"col": 4},{"file": 19,"line": 484,"col": 4},{"file": 19,"line": 530,"col": 4},{"file": 19,"line": 12,"col": 4},{"file": 19,"line": 124,"col": 4},{"file": 19,"line": 519,"col": 4},{"file": 19,"line": 450,"col": 4},{"file": 19,"line": 13,"col": 4},{"file": 19,"line": 664,"col": 4},{"file": 19,"line": 522,"col": 4},{"file": 19,"line": 662,"col": 4},{"file": 19,"line": 422,"col": 4},{"file": 19,"line": 4,"col": 4},{"file": 19,"line": 395,"col": 4},{"file": 19,"line": 41,"col": 4},{"file": 19,"line": 229,"col": 4},{"file": 19,"line": 429,"col": 4},{"file": 19,"line": 378,"col": 4},{"file": 19,"line": 405,"col": 4},{"file": 19,"line": 277,"col": 4},{"file": 19,"line": 438,"col": 4},{"file": 19,"line": 415,"col": 4},{"file": 19,"line": 540,"col": 4},{"file": 19,"line": 460,"col": 4},{"file": 19,"line": 129,"col": 4},{"file": 19,"line": 36,"col": 4},{"file": 19,"line": 337,"col": 4},{"file": 19,"line": 677,"col": 4},{"file": 19,"line": 604,"col": 4},{"file": 19,"line": 419,"col": 4},{"file": 19,"line": 400,"col": 4},{"file": 19,"line": 75,"col": 4},{"file": 19,"line": 475,"col": 4},{"file": 19,"line": 99,"col": 4},{"file": 19,"line": 136,"col": 4},{"file": 19,"line": 21,"col": 4},{"file": 19,"line": 16,"col": 4},{"file": 19,"line": 518,"col": 4},{"file": 19,"line": 3,"col": 4},{"file": 19,"line": 32,"col": 4},{"file": 19,"line": 359,"col": 4},{"file": 19,"line": 144,"col": 4},{"file": 19,"line": 483,"col": 4},{"file": 19,"line": 181,"col": 4},{"file": 19,"line": 109,"col": 4},{"file": 19,"line": 463,"col": 4},{"file": 19,"line": 53,"col": 4},{"file": 19,"line": 658,"col": 4},{"file": 19,"line": 147,"col": 4},{"file": 19,"line": 211,"col": 4},{"file": 19,"line": 171,"col": 4},{"file": 19,"line": 472,"col": 4},{"file": 19,"line": 202,"col": 4},{"file": 19,"line": 68,"col": 4},{"file": 19,"line": 274,"col": 4},{"file": 19,"line": 230,"col": 4},{"file": 19,"line": 170,"col": 4},{"file": 19,"line": 212,"col": 4},{"file": 19,"line": 366,"col": 4},{"file": 19,"line": 59,"col": 4},{"file": 19,"line": 527,"col": 4},{"file": 19,"line": 500,"col": 4},{"file": 19,"line": 512,"col": 4},{"file": 19,"line": 234,"col": 4},{"file": 19,"line": 113,"col": 4},{"file": 19,"line": 279,"col": 4},{"file": 19,"line": 625,"col": 4},{"file": 19,"line": 80,"col": 4},{"file": 19,"line": 301,"col": 4},{"file": 19,"line": 356,"col": 4},{"file": 19,"line": 477,"col": 4},{"file": 19,"line": 291,"col": 4},{"file": 19,"line": 297,"col": 4},{"file": 19,"line": 240,"col": 4},{"file": 19,"line": 155,"col": 4},{"file": 19,"line": 681,"col": 4},{"file": 19,"line": 265,"col": 4},{"file": 19,"line": 574,"col": 4},{"file": 19,"line": 580,"col": 4},{"file": 19,"line": 573,"col": 4},{"file": 19,"line": 376,"col": 4},{"file": 19,"line": 675,"col": 4},{"file": 19,"line": 346,"col": 4},{"file": 19,"line": 43,"col": 4},{"file": 19,"line": 103,"col": 4},{"file": 19,"line": 598,"col": 4},{"file": 19,"line": 594,"col": 4},{"file": 19,"line": 298,"col": 4},{"file": 19,"line": 529,"col": 4},{"file": 19,"line": 388,"col": 4},{"file": 19,"line": 403,"col": 4},{"file": 19,"line": 252,"col": 4},{"file": 19,"line": 115,"col": 4},{"file": 19,"line": 370,"col": 4},{"file": 19,"line": 104,"col": 4},{"file": 19,"line": 351,"col": 4},{"file": 19,"line": 583,"col": 4},{"file": 19,"line": 65,"col": 4},{"file": 19,"line": 446,"col": 4},{"file": 19,"line": 217,"col": 4},{"file": 19,"line": 596,"col": 4},{"file": 19,"line": 63,"col": 4},{"file": 19,"line": 183,"col": 4},{"file": 19,"line": 380,"col": 4},{"file": 19,"line": 541,"col": 4},{"file": 19,"line": 125,"col": 4},{"file": 19,"line": 228,"col": 4},{"file": 19,"line": 79,"col": 4},{"file": 19,"line": 455,"col": 4},{"file": 19,"line": 647,"col": 4},{"file": 19,"line": 535,"col": 4},{"file": 19,"line": 214,"col": 4},{"file": 19,"line": 487,"col": 4},{"file": 19,"line": 391,"col": 4},{"file": 19,"line": 676,"col": 4},{"file": 19,"line": 428,"col": 4},{"file": 19,"line": 35,"col": 4},{"file": 19,"line": 412,"col": 4},{"file": 19,"line": 248,"col": 4},{"file": 19,"line": 443,"col": 4},{"file": 19,"line": 150,"col": 4},{"file": 19,"line": 268,"col": 4},{"file": 19,"line": 595,"col": 4},{"file": 19,"line": 224,"col": 4},{"file": 19,"line": 452,"col": 4},{"file": 19,"line": 593,"col": 4},{"file": 19,"line": 106,"col": 4},{"file": 19,"line": 375,"col": 4},{"file": 19,"line": 158,"col": 4},{"file": 19,"line": 424,"col": 4},{"file": 19,"line": 586,"col": 4},{"file": 19,"line": 521,"col": 4},{"file": 19,"line": 394,"col": 4},{"file": 19,"line": 397,"col": 4},{"file": 19,"line": 19,"col": 4},{"file": 19,"line": 555,"col": 4},{"file": 19,"line": 585,"col": 4},{"file": 19,"line": 314,"col": 4},{"file": 19,"line": 431,"col": 4},{"file": 19,"line": 154,"col": 4},{"file": 19,"line": 407,"col": 4},{"file": 19,"line": 319,"col": 4},{"file": 19,"line": 227,"col": 4},{"file": 19,"line": 37,"col": 4},{"file": 19,"line": 493,"col": 4},{"file": 19,"line": 495,"col": 4},{"file": 19,"line": 440,"col": 4},{"file": 19,"line": 462,"col": 4},{"file": 19,"line": 482,"col": 4},{"file": 19,"line": 479,"col": 4},{"file": 19,"line": 457,"col": 4},{"file": 19,"line": 200,"col": 4},{"file": 19,"line": 42,"col": 4},{"file": 19,"line": 169,"col": 4},{"file": 19,"line": 372,"col": 4},{"file": 19,"line": 503,"col": 4},{"file": 19,"line": 651,"col": 4},{"file": 19,"line": 402,"col": 4},{"file": 19,"line": 469,"col": 4},{"file": 19,"line": 642,"col": 4},{"file": 19,"line": 648,"col": 4},{"file": 19,"line": 288,"col": 4},{"file": 19,"line": 253,"col": 4},{"file": 19,"line": 618,"col": 4},{"file": 19,"line": 82,"col": 4},{"file": 19,"line": 414,"col": 4},{"file": 19,"line": 300,"col": 4},{"file": 19,"line": 48,"col": 4},{"file": 19,"line": 531,"col": 4},{"file": 19,"line": 1,"col": 4},{"file": 19,"line": 215,"col": 4},{"file": 19,"line": 151,"col": 4},{"file": 19,"line": 299,"col": 4},{"file": 19,"line": 30,"col": 4},{"file": 19,"line": 264,"col": 4},{"file": 19,"line": 465,"col": 4},{"file": 19,"line": 550,"col": 4},{"file": 19,"line": 661,"col": 4},{"file": 19,"line": 289,"col": 4},{"file": 19,"line": 632,"col": 4},{"file": 19,"line": 353,"col": 4},{"file": 19,"line": 599,"col": 4},{"file": 19,"line": 33,"col": 4},{"file": 19,"line": 8,"col": 4},{"file": 19,"line": 579,"col": 4},{"file": 19,"line": 218,"col": 4},{"file": 19,"line": 384,"col": 4},{"file": 19,"line": 71,"col": 4},{"file": 19,"line": 276,"col": 4},{"file": 19,"line": 111,"col": 4},{"file": 19,"line": 491,"col": 4},{"file": 19,"line": 364,"col": 4},{"file": 19,"line": 361,"col": 4},{"file": 19,"line": 524,"col": 4},{"file": 19,"line": 194,"col": 4},{"file": 19,"line": 188,"col": 4},{"file": 19,"line": 112,"col": 4},{"file": 19,"line": 680,"col": 4},{"file": 19,"line": 178,"col": 4},{"file": 19,"line": 157,"col": 4},{"file": 19,"line": 20,"col": 4},{"file": 19,"line": 117,"col": 4},{"file": 19,"line": 571,"col": 4},{"file": 19,"line": 592,"col": 4},{"file": 19,"line": 190,"col": 4},{"file": 19,"line": 544,"col": 4},{"file": 19,"line": 605,"col": 4},{"file": 19,"line": 313,"col": 4},{"file": 19,"line": 166,"col": 4},{"file": 19,"line": 275,"col": 4},{"file": 19,"line": 278,"col": 4},{"file": 19,"line": 51,"col": 4},{"file": 19,"line": 225,"col": 4},{"file": 19,"line": 6,"col": 4},{"file": 19,"line": 436,"col": 4},{"file": 19,"line": 122,"col": 4},{"file": 19,"line": 620,"col": 4},{"file": 19,"line": 198,"col": 4},{"file": 19,"line": 116,"col": 4},{"file": 19,"line": 220,"col": 4},{"file": 19,"line": 251,"col": 4},{"file": 19,"line": 123,"col": 4},{"file": 19,"line": 553,"col": 4},{"file": 19,"line": 569,"col": 4},{"file": 20,"line": 5,"col": 4},{"file": 20,"line": 3,"col": 4},{"file": 20,"line": 4,"col": 4},{"file": 20,"line": 0,"col": 4},{"file": 20,"line": 1,"col": 4},{"file": 20,"line": 6,"col": 4},{"file": 20,"line": 7,"col": 4},{"file": 20,"line": 2,"col": 4},{"file": 20,"line": 8,"col": 4},{"file": 21,"line": 96,"col": 4,"fields": [6173]},{"file": 21,"line": 886,"col": 4},{"file": 21,"line": 28,"col": 4,"docs": " The application's chosen I/O mode. This defaults to `Mode.blocking` but can be overridden\n by `root.event_loop`.\n"},{"file": 21,"line": 64,"col": 4},{"file": 21,"line": 625,"col": 4,"docs": " Implementation of OutStream trait for Buffer\n"},{"file": 21,"line": 38,"col": 4,"fields": []},{"file": 21,"line": 1081,"col": 4,"docs": " Creates a serializer that serializes types to any stream.\n  If `is_packed` is true, the data will be bit-packed into the stream.\n  Note that the you must call `serializer.flush()` when you are done\n  writing bit-packed data in order ensure any unwritten bits are committed.\n  If `is_packed` is false, data is packed to the smallest byte. In the case\n  of packed structs, the struct will written bit-packed and with the specified\n  endianess, after which data will resume being written at the next byte boundary.\n  Types may implement a custom serialization routine with a\n  function named `serialize` in the form of:\n    pub fn serialize(self: Self, serializer: var) !void\n  which will be called when the serializer is used to serialize that type. It will\n  pass a const pointer to the type instance to be serialized and a pointer\n  to the serializer struct.\n","fields": [6174,6175,6176]},{"file": 21,"line": 646,"col": 4,"docs": " Creates a stream which allows for writing bit fields to another stream\n","fields": [6177,6178]},{"file": 21,"line": 569,"col": 4,"fields": [6179]},{"file": 21,"line": 306,"col": 4,"docs": " Creates a stream which allows for reading bit fields from another stream\n","fields": [6180,6181]},{"file": 21,"line": 18,"col": 4},{"file": 21,"line": 508,"col": 4},{"file": 21,"line": 774,"col": 4},{"file": 21,"line": 511,"col": 4,"docs": " An OutStream that doesn't write to anything.\n"},{"file": 21,"line": 823,"col": 4,"docs": " Reads all characters until the next newline into buf, and returns\n a slice of the characters read (excluding the newline character(s)).\n","fields": [6182,6183]},{"file": 21,"line": 211,"col": 4,"docs": " Creates a stream which supports 'un-reading' data, so that it can be read again.\n This makes look-ahead style parsing much easier.\n","fields": [6184,6185]},{"file": 21,"line": 65,"col": 4},{"file": 21,"line": 34,"col": 4},{"file": 21,"line": 573,"col": 4,"fields": [6186,6187]},{"file": 21,"line": 903,"col": 4,"docs": " Creates a deserializer that deserializes types from any stream.\n  If `is_packed` is true, the data stream is treated as bit-packed,\n  otherwise data is expected to be packed to the smallest byte.\n  Types may implement a custom deserialization routine with a\n  function named `deserialize` in the form of:\n    pub fn deserialize(self: *Self, deserializer: var) !void\n  which will be called when the deserializer is used to deserialize\n  that type. It will pass a pointer to the type instance to deserialize\n  into and a pointer to the deserializer struct.\n","fields": [6188,6189,6190]},{"file": 21,"line": 815,"col": 4,"fields": [6191]},{"file": 21,"line": 275,"col": 4},{"file": 21,"line": 865,"col": 4,"docs": " Reads all characters until the next newline into slice, and returns\n a slice of the characters read (excluding the newline character(s)).\n","fields": [6192,6193]},{"file": 21,"line": 100,"col": 4,"fields": [6194,6195]},{"file": 21,"line": 63,"col": 4},{"file": 21,"line": 66,"col": 4},{"file": 21,"line": 454,"col": 4,"docs": " This is a simple OutStream that writes to a fixed buffer, and returns an error\n when it runs out of space.\n"},{"file": 21,"line": 77,"col": 4,"docs": " On success, caller owns returned buffer.\n TODO move this to `std.fs` and add a version to `std.fs.Dir`.\n","fields": [6196,6197]},{"file": 21,"line": 62,"col": 4},{"file": 21,"line": 69,"col": 4,"docs": " TODO move this to `std.fs` and add a version to `std.fs.Dir`.\n","fields": [6198,6199]},{"file": 21,"line": 36,"col": 4},{"file": 21,"line": 857,"col": 4,"fields": [6200]},{"file": 21,"line": 533,"col": 4,"docs": " An OutStream that counts how many bytes has been written to it.\n","fields": [6201]},{"file": 21,"line": 54,"col": 4,"fields": []},{"file": 21,"line": 1,"col": 0},{"file": 21,"line": 5,"col": 0},{"file": 21,"line": 8,"col": 0},{"file": 21,"line": 6,"col": 0},{"file": 21,"line": 13,"col": 0},{"file": 21,"line": 16,"col": 0},{"file": 21,"line": 507,"col": 0},{"file": 21,"line": 12,"col": 0},{"file": 21,"line": 14,"col": 0},{"file": 21,"line": 2,"col": 0},{"file": 21,"line": 0,"col": 0},{"file": 21,"line": 3,"col": 0},{"file": 21,"line": 11,"col": 0},{"file": 21,"line": 9,"col": 0},{"file": 21,"line": 15,"col": 0},{"file": 21,"line": 7,"col": 0},{"file": 21,"line": 10,"col": 0},{"file": 22,"line": 1074,"col": 4,"fields": [6202,6203]},{"file": 22,"line": 10,"col": 4},{"file": 22,"line": 1578,"col": 4,"fields": [6204]},{"file": 22,"line": 573,"col": 4,"fields": [6205,6206,6207,6208,6209]},{"file": 22,"line": 698,"col": 4,"fields": [6210,6211,6212,6213,6214]},{"file": 22,"line": 1552,"col": 4,"fields": [6215]},{"file": 22,"line": 603,"col": 4,"fields": [6216,6217,6218,6219,6220]},{"file": 22,"line": 1068,"col": 4},{"file": 22,"line": 843,"col": 4,"fields": [6221,6222,6223,6224,6225,6226]},{"file": 22,"line": 1120,"col": 4,"fields": [6227,6228,6229],"varArgs": true},{"file": 22,"line": 998,"col": 4,"fields": [6230,6231,6232]},{"file": 22,"line": 18,"col": 4},{"file": 22,"line": 1108,"col": 4},{"file": 22,"line": 981,"col": 4,"fields": [6233,6234,6235,6236,6237]},{"file": 22,"line": 1118,"col": 4},{"file": 22,"line": 1585,"col": 4,"fields": [6238,6239]},{"file": 22,"line": 583,"col": 4,"fields": [6240,6241,6242,6243,6244]},{"file": 22,"line": 1028,"col": 4,"fields": [6245,6246,6247]},{"file": 22,"line": 12,"col": 4},{"file": 22,"line": 5,"col": 0},{"file": 22,"line": 6,"col": 0},{"file": 22,"line": 1095,"col": 0},{"file": 22,"line": 1129,"col": 0,"fields": [6248,6249]},{"file": 22,"line": 1,"col": 0},{"file": 22,"line": 7,"col": 0},{"file": 22,"line": 25,"col": 0,"fields": [6250,6251,6252]},{"file": 22,"line": 989,"col": 0},{"file": 22,"line": 2,"col": 0},{"file": 22,"line": 4,"col": 0},{"file": 22,"line": 534,"col": 0,"fields": [6253,6254,6255,6256,6257,6258]},{"file": 22,"line": 36,"col": 0,"fields": [6259]},{"file": 22,"line": 1539,"col": 0,"fields": [6260,6261,6262],"varArgs": true},{"file": 22,"line": 1151,"col": 0,"fields": [6263,6264,6265,6266,6267]},{"file": 22,"line": 1020,"col": 0},{"file": 22,"line": 0,"col": 0},{"file": 22,"line": 993,"col": 0,"fields": [6268,6269]},{"file": 22,"line": 8,"col": 0},{"file": 22,"line": 3,"col": 0},{"file": 23,"line": 1,"col": 4},{"file": 23,"line": 2,"col": 4},{"file": 23,"line": 0,"col": 4},{"file": 24,"line": 422,"col": 4},{"file": 24,"line": 355,"col": 4,"docs": " The following variable length array appears immediately after the header.\n The structure definition follows.\n LineBlockFragmentHeader Blocks[]\n Each `LineBlockFragmentHeader` as specified below.\n"},{"file": 24,"line": 16,"col": 4},{"file": 24,"line": 310,"col": 4},{"file": 24,"line": 52,"col": 4},{"file": 24,"line": 39,"col": 4},{"file": 24,"line": 377,"col": 4,"docs": " The following two variable length arrays appear immediately after the\n header.  The structure definitions follow.\n LineNumberEntry   Lines[NumLines];\n ColumnNumberEntry Columns[NumLines];\n"},{"file": 24,"line": 450,"col": 4},{"file": 24,"line": 405,"col": 4},{"file": 24,"line": 389,"col": 4},{"file": 24,"line": 442,"col": 4},{"file": 24,"line": 327,"col": 4},{"file": 24,"line": 343,"col": 4},{"file": 24,"line": 461,"col": 4},{"file": 24,"line": 70,"col": 4},{"file": 24,"line": 102,"col": 4},{"file": 24,"line": 111,"col": 4,"docs": " Duplicate copy of SymbolRecordKind, but using the official CV names. Useful\n for reference purposes and when dealing with unknown record types.\n"},{"file": 24,"line": 312,"col": 4},{"file": 24,"line": 411,"col": 4,"docs": " Checksum bytes follow.\n"},{"file": 24,"line": 78,"col": 4},{"file": 24,"line": 338,"col": 4},{"file": 24,"line": 367,"col": 4},{"file": 24,"line": 0,"col": 0},{"file": 24,"line": 581,"col": 0},{"file": 24,"line": 7,"col": 0},{"file": 24,"line": 3,"col": 0},{"file": 24,"line": 1,"col": 0},{"file": 24,"line": 627,"col": 0},{"file": 24,"line": 5,"col": 0},{"file": 24,"line": 8,"col": 0},{"file": 24,"line": 576,"col": 0,"fields": [6270,6271]},{"file": 24,"line": 6,"col": 0},{"file": 24,"line": 2,"col": 0},{"file": 24,"line": 10,"col": 0},{"file": 24,"line": 491,"col": 0},{"file": 24,"line": 4,"col": 0},{"file": 25,"line": 256,"col": 4},{"file": 25,"line": 32,"col": 4},{"file": 25,"line": 24,"col": 4},{"file": 25,"line": 0,"col": 0},{"file": 25,"line": 21,"col": 0},{"file": 25,"line": 12,"col": 0},{"file": 25,"line": 22,"col": 0},{"file": 25,"line": 20,"col": 0},{"file": 25,"line": 235,"col": 0},{"file": 25,"line": 18,"col": 0},{"file": 25,"line": 11,"col": 0},{"file": 25,"line": 1,"col": 0},{"file": 25,"line": 4,"col": 0},{"file": 25,"line": 260,"col": 0},{"file": 25,"line": 5,"col": 0},{"file": 25,"line": 245,"col": 0},{"file": 25,"line": 225,"col": 0},{"file": 25,"line": 17,"col": 0},{"file": 25,"line": 13,"col": 0},{"file": 25,"line": 2,"col": 0},{"file": 25,"line": 7,"col": 0},{"file": 25,"line": 3,"col": 0},{"file": 26,"line": 6,"col": 4},{"file": 26,"line": 10,"col": 4},{"file": 26,"line": 24,"col": 4},{"file": 26,"line": 32,"col": 4},{"file": 26,"line": 19,"col": 4},{"file": 26,"line": 5,"col": 4},{"file": 26,"line": 21,"col": 4},{"file": 26,"line": 22,"col": 4},{"file": 26,"line": 15,"col": 4},{"file": 26,"line": 27,"col": 4},{"file": 26,"line": 25,"col": 4},{"file": 26,"line": 13,"col": 4},{"file": 26,"line": 14,"col": 4},{"file": 26,"line": 1,"col": 4},{"file": 26,"line": 18,"col": 4},{"file": 26,"line": 28,"col": 4},{"file": 26,"line": 9,"col": 4},{"file": 26,"line": 4,"col": 4},{"file": 26,"line": 29,"col": 4},{"file": 26,"line": 12,"col": 0},{"file": 26,"line": 31,"col": 0},{"file": 26,"line": 0,"col": 0},{"file": 26,"line": 3,"col": 0},{"file": 26,"line": 17,"col": 0},{"file": 27,"line": 1195,"col": 4,"fields": [6272,6273,6274]},{"file": 27,"line": 1206,"col": 4,"fields": [6275,6276,6277]},{"file": 27,"line": 981,"col": 4,"fields": [6278]},{"file": 27,"line": 971,"col": 4,"fields": [6279]},{"file": 27,"line": 3,"col": 0},{"file": 27,"line": 5,"col": 0},{"file": 27,"line": 1172,"col": 0},{"file": 27,"line": 1174,"col": 0,"fields": [6280]},{"file": 27,"line": 1039,"col": 0},{"file": 27,"line": 4,"col": 0},{"file": 27,"line": 0,"col": 0},{"file": 27,"line": 2,"col": 0},{"file": 27,"line": 102,"col": 0},{"file": 27,"line": 38,"col": 0},{"file": 27,"line": 22,"col": 0},{"file": 27,"line": 995,"col": 0,"fields": []},{"file": 27,"line": 1,"col": 0},{"file": 27,"line": 1043,"col": 0,"fields": [6281,6282]},{"file": 49,"line": 46,"col": 4},{"file": 49,"line": 7,"col": 0,"fields": []},{"file": 28,"line": 92,"col": 4,"fields": []},{"file": 49,"line": 109,"col": 4,"docs": " resolved protocol is unknown\n"},{"file": 49,"line": 14,"col": 4,"fields": [6283]},{"file": 49,"line": 100,"col": 4,"docs": " ai_socktype not supported\n"},{"file": 28,"line": 135,"col": 4,"fields": [6284,6285,6286,6287]},{"file": 28,"line": 203,"col": 4,"fields": [6288,6289,6290]},{"file": 28,"line": 124,"col": 4,"fields": [6291,6292,6293,6294,6295]},{"file": 28,"line": 115,"col": 4,"fields": [6296,6297,6298]},{"file": 28,"line": 62,"col": 4,"fields": [6299,6300,6301,6302]},{"file": 49,"line": 85,"col": 4,"docs": " ai_family not supported\n"},{"file": 28,"line": 103,"col": 4,"fields": [6303,6304,6305]},{"file": 28,"line": 146,"col": 4,"fields": [6306,6307,6308,6309]},{"file": 28,"line": 63,"col": 4,"fields": [6310,6311,6312,6313]},{"file": 49,"line": 115,"col": 4},{"file": 49,"line": 126,"col": 4},{"file": 49,"line": 43,"col": 4},{"file": 28,"line": 117,"col": 4,"fields": [6314,6315]},{"file": 28,"line": 65,"col": 4,"fields": [6316,6317],"varArgs": true},{"file": 49,"line": 16,"col": 4,"fields": [6318,6319,6320,6321,6322,6323,6324]},{"file": 28,"line": 125,"col": 4,"fields": [6325,6326,6327,6328]},{"file": 49,"line": 70,"col": 4,"docs": " prevent service name resolution\n"},{"file": 28,"line": 105,"col": 4,"fields": [6329,6330,6331]},{"file": 28,"line": 165,"col": 4,"fields": [6332,6333,6334,6335]},{"file": 28,"line": 73,"col": 4,"fields": [6336,6337,6338],"varArgs": true},{"file": 49,"line": 106,"col": 4,"docs": " invalid value for hints\n"},{"file": 28,"line": 113,"col": 4,"fields": [6339,6340,6341,6342,6343,6344]},{"file": 49,"line": 11,"col": 4,"fields": [6345,6346,6347,6348]},{"file": 28,"line": 122,"col": 4,"fields": [6349,6350,6351]},{"file": 49,"line": 88,"col": 4,"docs": " memory allocation failure\n"},{"file": 49,"line": 49,"col": 4,"fields": []},{"file": 28,"line": 220,"col": 4},{"file": 28,"line": 170,"col": 4,"fields": [6352,6353]},{"file": 28,"line": 217,"col": 4,"fields": [6354]},{"file": 28,"line": 223,"col": 4,"fields": [6355]},{"file": 28,"line": 75,"col": 4,"fields": [6356]},{"file": 28,"line": 163,"col": 4,"fields": [6357,6358]},{"file": 28,"line": 182,"col": 4,"fields": [6359,6360,6361,6362]},{"file": 28,"line": 78,"col": 4,"fields": [6363,6364,6365,6366]},{"file": 28,"line": 84,"col": 4,"fields": [6367,6368,6369,6370]},{"file": 28,"line": 97,"col": 4,"fields": [6371,6372]},{"file": 28,"line": 162,"col": 4,"fields": [6373,6374,6375,6376]},{"file": 28,"line": 221,"col": 4,"fields": [6377,6378]},{"file": 28,"line": 112,"col": 4,"fields": [6379]},{"file": 28,"line": 216,"col": 4,"fields": [6380]},{"file": 28,"line": 147,"col": 4,"fields": [6381,6382]},{"file": 28,"line": 99,"col": 4,"fields": [6383]},{"file": 28,"line": 191,"col": 4,"fields": [6384,6385,6386,6387,6388,6389,6390]},{"file": 49,"line": 64,"col": 4,"docs": " fill ai_canonname\n"},{"file": 28,"line": 102,"col": 4,"fields": [6391,6392]},{"file": 49,"line": 8,"col": 4,"fields": [6393,6394]},{"file": 49,"line": 82,"col": 4,"docs": " non-recoverable failure in name resolution\n"},{"file": 49,"line": 112,"col": 4,"docs": " argument buffer overflow\n"},{"file": 28,"line": 168,"col": 4,"fields": [6395]},{"file": 28,"line": 173,"col": 4,"fields": [6396,6397,6398,6399,6400,6401]},{"file": 28,"line": 218,"col": 4,"fields": [6402]},{"file": 28,"line": 145,"col": 4,"fields": [6403,6404]},{"file": 28,"line": 109,"col": 4,"fields": [6405,6406]},{"file": 28,"line": 100,"col": 4,"fields": [6407,6408,6409]},{"file": 49,"line": 36,"col": 4,"docs": " The value of the link editor defined symbol _MH_EXECUTE_SYM is the address\n of the mach header in a Mach-O executable file type.  It does not appear in\n any file type other than a MH_EXECUTE file type.  The type of the symbol is\n absolute as the header is not part of any section.\n This symbol is populated when linking the system's libc, which is guaranteed\n on this operating system. However when building object files or libraries,\n the system libc won't be linked until the final executable. So we\n export a weak symbol here, to be overridden by the real one.\n"},{"file": 28,"line": 38,"col": 4,"docs": " The return type is `type` to force comptime function call execution.\n TODO: https://github.com/ziglang/zig/issues/425\n If not linking libc, returns struct{pub const ok = false;}\n If linking musl libc, returns struct{pub const ok = true;}\n If linking gnu libc (glibc), the `ok` value will be true if the target\n version is greater than or equal to `glibc_version`.\n If linking a libc other than these, returns `false`.\n","fields": [6410]},{"file": 28,"line": 110,"col": 4,"fields": [6411,6412]},{"file": 28,"line": 60,"col": 4,"fields": [6413,6414]},{"file": 28,"line": 96,"col": 4,"fields": [6415,6416]},{"file": 28,"line": 121,"col": 4,"fields": [6417,6418,6419]},{"file": 28,"line": 205,"col": 4,"fields": [6420,6421,6422,6423,6424]},{"file": 28,"line": 222,"col": 4,"fields": [6425]},{"file": 49,"line": 48,"col": 4,"fields": [6426]},{"file": 28,"line": 114,"col": 4,"fields": [6427,6428,6429,6430,6431]},{"file": 28,"line": 126,"col": 4,"fields": [6432,6433,6434,6435,6436,6437]},{"file": 49,"line": 94,"col": 4,"docs": " hostname nor servname provided, or not known\n"},{"file": 28,"line": 94,"col": 4,"fields": [6438]},{"file": 28,"line": 89,"col": 4,"fields": [6439,6440,6441]},{"file": 28,"line": 189,"col": 4,"fields": [6442]},{"file": 28,"line": 86,"col": 4,"fields": [6443,6444]},{"file": 28,"line": 152,"col": 4,"fields": [6445,6446]},{"file": 49,"line": 44,"col": 4},{"file": 28,"line": 101,"col": 4,"fields": [6447]},{"file": 28,"line": 172,"col": 4,"fields": []},{"file": 28,"line": 88,"col": 4,"fields": [6448]},{"file": 49,"line": 73,"col": 4,"docs": "  address family for hostname not supported\n"},{"file": 28,"line": 87,"col": 4,"fields": [6449,6450,6451]},{"file": 28,"line": 201,"col": 4,"fields": [6452]},{"file": 28,"line": 119,"col": 4,"fields": [6453,6454,6455]},{"file": 28,"line": 213,"col": 4,"fields": []},{"file": 49,"line": 52,"col": 4,"fields": [6456,6457]},{"file": 28,"line": 226,"col": 4},{"file": 28,"line": 67,"col": 4,"fields": [6458]},{"file": 28,"line": 72,"col": 4,"fields": [6459,6460,6461]},{"file": 28,"line": 156,"col": 4,"fields": [6462,6463,6464]},{"file": 28,"line": 95,"col": 4,"fields": [6465,6466]},{"file": 49,"line": 61,"col": 4,"docs": " get address to use bind()\n"},{"file": 28,"line": 166,"col": 4,"fields": [6467]},{"file": 28,"line": 82,"col": 4,"fields": [6468,6469]},{"file": 49,"line": 51,"col": 4,"fields": [6470,6471,6472]},{"file": 28,"line": 120,"col": 4,"fields": [6473,6474]},{"file": 28,"line": 85,"col": 4,"fields": [6475,6476,6477,6478,6479,6480]},{"file": 28,"line": 108,"col": 4,"fields": [6481,6482]},{"file": 49,"line": 67,"col": 4,"docs": " prevent host name resolution\n"},{"file": 28,"line": 77,"col": 4,"fields": [6483,6484,6485]},{"file": 28,"line": 71,"col": 4,"fields": [6486,6487]},{"file": 28,"line": 90,"col": 4,"fields": [6488,6489]},{"file": 28,"line": 148,"col": 4,"fields": [6490]},{"file": 49,"line": 91,"col": 4,"docs": " no address associated with hostname\n"},{"file": 28,"line": 106,"col": 4,"fields": [6491,6492]},{"file": 49,"line": 13,"col": 4,"fields": []},{"file": 28,"line": 169,"col": 4,"fields": []},{"file": 28,"line": 70,"col": 4,"fields": [6493,6494]},{"file": 28,"line": 155,"col": 4,"fields": [6495]},{"file": 49,"line": 58,"col": 4,"fields": [6496,6497]},{"file": 28,"line": 111,"col": 4,"fields": [6498]},{"file": 28,"line": 74,"col": 4,"fields": [6499,6500,6501,6502],"varArgs": true},{"file": 28,"line": 68,"col": 4,"fields": [6503]},{"file": 28,"line": 93,"col": 4,"fields": [6504,6505]},{"file": 28,"line": 61,"col": 4,"fields": [6506]},{"file": 28,"line": 66,"col": 4,"fields": []},{"file": 49,"line": 119,"col": 4},{"file": 28,"line": 107,"col": 4,"fields": [6507,6508,6509]},{"file": 49,"line": 79,"col": 4,"docs": " invalid value for ai_flags\n"},{"file": 28,"line": 80,"col": 4,"fields": [6510,6511,6512]},{"file": 28,"line": 104,"col": 4,"fields": [6513,6514]},{"file": 28,"line": 69,"col": 4,"fields": [6515]},{"file": 28,"line": 91,"col": 4,"fields": [6516,6517,6518]},{"file": 28,"line": 160,"col": 4,"fields": [6519,6520]},{"file": 28,"line": 118,"col": 4,"fields": [6521,6522,6523]},{"file": 49,"line": 50,"col": 4,"fields": [6524,6525]},{"file": 28,"line": 136,"col": 4,"fields": [6526,6527,6528,6529,6530,6531]},{"file": 28,"line": 154,"col": 4,"fields": [6532,6533]},{"file": 49,"line": 97,"col": 4,"docs": " servname not supported for ai_socktype\n"},{"file": 28,"line": 153,"col": 4,"fields": [6534]},{"file": 28,"line": 83,"col": 4,"fields": [6535,6536,6537]},{"file": 28,"line": 149,"col": 4,"fields": [6538,6539]},{"file": 49,"line": 54,"col": 4,"fields": [6540,6541]},{"file": 49,"line": 76,"col": 4,"docs": " temporary failure in name resolution\n"},{"file": 28,"line": 225,"col": 4},{"file": 28,"line": 167,"col": 4,"fields": [6542,6543,6544]},{"file": 49,"line": 113,"col": 4},{"file": 49,"line": 9,"col": 4,"fields": [6545]},{"file": 28,"line": 79,"col": 4,"fields": [6546,6547,6548,6549]},{"file": 28,"line": 123,"col": 4,"fields": [6550,6551,6552,6553]},{"file": 49,"line": 103,"col": 4,"docs": " system error returned in errno\n"},{"file": 28,"line": 81,"col": 4,"fields": [6554,6555,6556,6557]},{"file": 28,"line": 159,"col": 4,"fields": [6558,6559]},{"file": 28,"line": 76,"col": 4,"fields": [6560,6561,6562]},{"file": 28,"line": 98,"col": 4,"fields": [6563,6564]},{"file": 28,"line": 150,"col": 4,"fields": [6565,6566]},{"file": 28,"line": 215,"col": 4},{"file": 28,"line": 2,"col": 0},{"file": 28,"line": 1,"col": 0},{"file": 28,"line": 0,"col": 0},{"file": 29,"line": 393,"col": 4,"docs": "Compares two of any type for equality. Containers are compared on a field-by-field basis,\n where possible. Pointers are not followed.\n","fields": [6567,6568]},{"file": 29,"line": 74,"col": 4,"fields": [6569]},{"file": 29,"line": 161,"col": 4,"fields": [6570]},{"file": 29,"line": 547,"col": 4,"docs": " Given a type and a name, return the field index according to source order.\n Returns `null` if the field is not found.\n","fields": [6571,6572]},{"file": 29,"line": 556,"col": 4,"docs": " Given a type, reference all the declarations inside, so that the semantic analyzer sees them.\n","fields": [6573]},{"file": 29,"line": 532,"col": 4},{"file": 29,"line": 278,"col": 4,"fields": [6574,6575]},{"file": 29,"line": 341,"col": 4,"docs": "Returns the active tag of a tagged union\n","fields": [6576]},{"file": 29,"line": 197,"col": 4,"fields": [6577,6578]},{"file": 29,"line": 7,"col": 4},{"file": 29,"line": 318,"col": 4,"fields": [6579]},{"file": 29,"line": 118,"col": 4,"fields": [6580]},{"file": 29,"line": 12,"col": 4,"fields": [6581]},{"file": 29,"line": 534,"col": 4,"fields": [6582,6583]},{"file": 29,"line": 366,"col": 4,"docs": "Given a tagged union type, and an enum, return the type of the union\n field corresponding to the enum tag.\n","fields": [6584,6585]},{"file": 29,"line": 55,"col": 4,"fields": [6586,6587]},{"file": 29,"line": 233,"col": 4,"fields": [6588]},{"file": 29,"line": 3,"col": 0},{"file": 29,"line": 1,"col": 0},{"file": 29,"line": 4,"col": 0},{"file": 29,"line": 0,"col": 0},{"file": 29,"line": 2,"col": 0},{"file": 29,"line": 9,"col": 0},{"file": 29,"line": 5,"col": 0},{"file": 29,"line": 10,"col": 0},{"file": 30,"line": 1043,"col": 4},{"file": 30,"line": 289,"col": 4,"docs": " Calls makeDir recursively to make an entire path. Returns success if the path\n already exists and is a directory.\n This function is not atomic, and if it returns an error, the file system may\n have been modified regardless.\n TODO determine if we can remove the allocator requirement from this function\n","fields": [6589,6590]},{"file": 30,"line": 29,"col": 4,"docs": " This represents the maximum size of a UTF-8 encoded file path.\n All file system operations which return a path are guaranteed to\n fit into a UTF-8 encoded array of this length.\n"},{"file": 30,"line": 1136,"col": 4,"docs": " Read value of a symbolic link.\n The return value is a slice of buffer, from index `0`.\n","fields": [6591,6592]},{"file": 30,"line": 333,"col": 4,"docs": " Same as `deleteDir` except the parameter is a null-terminated UTF16LE-encoded string.\n","fields": [6593]},{"file": 30,"line": 1112,"col": 4,"docs": " Recursively iterates over a directory.\n Must call `Walker.deinit` when done.\n `dir_path` must not end in a path separator.\n The order of returned file system entries is undefined.\n","fields": [6594,6595]},{"file": 30,"line": 19,"col": 4},{"file": 30,"line": 1181,"col": 4,"docs": " Get the path to the current executable.\n If you only need the directory, use selfExeDirPath.\n If you only want an open file handle, use openSelfExe.\n This function may return an error if the current executable\n was deleted after spawning.\n Returned value is a slice of out_buffer.\n\n On Linux, depends on procfs being mounted. If the currently executing binary has\n been deleted, the file path looks something like `/a/b/c/exe (deleted)`.\n TODO make the return type of this a null terminated pointer\n","fields": [6596]},{"file": 30,"line": 87,"col": 4,"docs": " Check the file size, mtime, and mode of `source_path` and `dest_path`. If they are equal, does nothing.\n Otherwise, atomically copies `source_path` to `dest_path`. The destination file gains the mtime,\n atime, and mode of the source file so that the next call to `updateFile` will not need a copy.\n Returns the previous status of the file before updating.\n If any of the directories do not exist for dest_path, they are created.\n TODO https://github.com/ziglang/zig/issues/2885\n","fields": [6597,6598,6599]},{"file": 30,"line": 24,"col": 4},{"file": 30,"line": 17,"col": 4},{"file": 30,"line": 323,"col": 4,"docs": " Returns `error.DirNotEmpty` if the directory is not empty.\n To delete a directory recursively, see `deleteTree`.\n","fields": [6600]},{"file": 30,"line": 1147,"col": 4,"fields": []},{"file": 30,"line": 156,"col": 4,"docs": " Guaranteed to be atomic. However until https://patchwork.kernel.org/patch/9636735/ is\n merged and readily available,\n there is a possibility of power loss or application termination leaving temporary files present\n in the same directory as dest_path.\n Destination file will have the same mode as the source file.\n","fields": [6601,6602]},{"file": 30,"line": 359,"col": 4},{"file": 30,"line": 12,"col": 4},{"file": 30,"line": 9,"col": 4},{"file": 30,"line": 179,"col": 4,"docs": " Guaranteed to be atomic. However until https://patchwork.kernel.org/patch/9636735/ is\n merged and readily available,\n there is a possibility of power loss or application termination leaving temporary files present\n","fields": [6603,6604,6605]},{"file": 30,"line": 1247,"col": 4,"docs": " `realpath`, except caller must free the returned memory.\n","fields": [6606,6607]},{"file": 30,"line": 342,"col": 4,"docs": " Removes a symlink, file, or directory.\n If `full_path` is relative, this is equivalent to `Dir.deleteTree` with the\n current working directory as the open directory handle.\n If `full_path` is absolute, this is equivalent to `Dir.deleteTree` with the\n base directory.\n","fields": [6608]},{"file": 30,"line": 1169,"col": 4},{"file": 30,"line": 18,"col": 4},{"file": 30,"line": 270,"col": 4,"docs": " Create a new directory.\n","fields": [6609]},{"file": 30,"line": 1222,"col": 4,"docs": " `selfExeDirPath` except allocates the result on the heap.\n Caller owns returned memory.\n","fields": [6610]},{"file": 30,"line": 16,"col": 4},{"file": 30,"line": 13,"col": 4},{"file": 30,"line": 1145,"col": 4},{"file": 30,"line": 196,"col": 4},{"file": 30,"line": 280,"col": 4,"docs": " Same as `makeDir` except the parameter is a null-terminated UTF16LE-encoded string.\n","fields": [6611]},{"file": 30,"line": 77,"col": 4,"fields": [6612,6613]},{"file": 30,"line": 10,"col": 4},{"file": 30,"line": 20,"col": 4},{"file": 30,"line": 23,"col": 4},{"file": 30,"line": 21,"col": 4},{"file": 30,"line": 1216,"col": 4,"docs": " Same as `selfExePath` except the result is UTF16LE-encoded.\n","fields": [6614]},{"file": 30,"line": 1229,"col": 4,"docs": " Get the directory path that contains the current executable.\n Returned value is a slice of out_buffer.\n","fields": [6615]},{"file": 30,"line": 14,"col": 4},{"file": 30,"line": 328,"col": 4,"docs": " Same as `deleteDir` except the parameter is a null-terminated UTF8-encoded string.\n","fields": [6616]},{"file": 30,"line": 275,"col": 4,"docs": " Same as `makeDir` except the parameter is a null-terminated UTF8-encoded string.\n","fields": [6617]},{"file": 30,"line": 43,"col": 4,"docs": " TODO remove the allocator requirement from this API\n","fields": [6618,6619,6620]},{"file": 30,"line": 15,"col": 4},{"file": 30,"line": 1141,"col": 4,"docs": " Same as `readLink`, except the parameter is null-terminated.\n","fields": [6621,6622]},{"file": 30,"line": 0,"col": 0},{"file": 30,"line": 40,"col": 0},{"file": 30,"line": 2,"col": 0},{"file": 30,"line": 6,"col": 0},{"file": 30,"line": 4,"col": 0},{"file": 30,"line": 5,"col": 0},{"file": 30,"line": 1,"col": 0},{"file": 30,"line": 267,"col": 0},{"file": 30,"line": 72,"col": 0},{"file": 30,"line": 7,"col": 0},{"file": 30,"line": 3,"col": 0},{"file": 31,"line": 583,"col": 4},{"file": 31,"line": 10,"col": 4},{"file": 31,"line": 424,"col": 4},{"file": 31,"line": 637,"col": 4,"fields": [6623,6624]},{"file": 31,"line": 337,"col": 4,"docs": " This allocator takes an existing allocator, wraps it, and provides an interface\n where you can allocate without freeing, and then free it all together.\n"},{"file": 31,"line": 491,"col": 4},{"file": 31,"line": 237,"col": 4},{"file": 31,"line": 14,"col": 4},{"file": 31,"line": 35,"col": 4,"docs": " This allocator makes a syscall directly for every allocation and free.\n Thread-safe and lock-free.\n"},{"file": 31,"line": 649,"col": 4,"fields": [6625]},{"file": 31,"line": 6,"col": 0},{"file": 31,"line": 865,"col": 0,"fields": [6626,6627]},{"file": 31,"line": 918,"col": 0,"fields": [6628]},{"file": 31,"line": 488,"col": 0,"fields": [6629]},{"file": 31,"line": 8,"col": 0},{"file": 31,"line": 502,"col": 0},{"file": 31,"line": 0,"col": 0},{"file": 31,"line": 7,"col": 0},{"file": 31,"line": 837,"col": 0,"fields": [6630]},{"file": 31,"line": 27,"col": 0,"fields": [6631,6632,6633,6634,6635]},{"file": 31,"line": 20,"col": 0,"fields": [6636,6637,6638,6639,6640]},{"file": 31,"line": 769,"col": 0},{"file": 31,"line": 492,"col": 0},{"file": 31,"line": 889,"col": 0,"fields": [6641]},{"file": 31,"line": 5,"col": 0},{"file": 31,"line": 1,"col": 0},{"file": 31,"line": 489,"col": 0,"fields": [6642,6643]},{"file": 31,"line": 3,"col": 0},{"file": 31,"line": 15,"col": 0},{"file": 31,"line": 41,"col": 0},{"file": 31,"line": 36,"col": 0},{"file": 31,"line": 12,"col": 0},{"file": 31,"line": 2,"col": 0},{"file": 31,"line": 4,"col": 0},{"file": 32,"line": 99,"col": 4,"docs": " A monotonic high-performance timer.\n Timer.start() must be called to initialize the struct, which captures\n   the counter frequency on windows and darwin, records the resolution,\n   and gives the user an opportunity to check for the existnece of\n   monotonic clocks without forcing them to check for error on each read.\n .resolution is in nanoseconds on all platforms but .start_time's meaning\n   depends on the OS. On Windows and Darwin it is a hardware counter\n   value that requires calculation to convert to a meaninful unit.\n"},{"file": 32,"line": 73,"col": 4},{"file": 32,"line": 31,"col": 4,"docs": " Get the posix timestamp, UTC, in milliseconds\n TODO audit this function. is it possible to return an error?\n","fields": []},{"file": 32,"line": 88,"col": 4},{"file": 32,"line": 89,"col": 4},{"file": 32,"line": 77,"col": 4},{"file": 32,"line": 80,"col": 4,"docs": " Divisions of a second\n"},{"file": 32,"line": 87,"col": 4},{"file": 32,"line": 72,"col": 4,"docs": " Multiples of a base unit (nanoseconds)\n"},{"file": 32,"line": 75,"col": 4},{"file": 32,"line": 25,"col": 4,"docs": " Get the posix timestamp, UTC, in seconds\n TODO audit this function. is it possible to return an error?\n","fields": []},{"file": 32,"line": 7,"col": 4},{"file": 32,"line": 76,"col": 4},{"file": 32,"line": 74,"col": 4},{"file": 32,"line": 86,"col": 4,"docs": " Common time divisions\n"},{"file": 32,"line": 82,"col": 4},{"file": 32,"line": 81,"col": 4},{"file": 32,"line": 83,"col": 4},{"file": 32,"line": 0,"col": 0},{"file": 32,"line": 5,"col": 0},{"file": 32,"line": 1,"col": 0},{"file": 32,"line": 4,"col": 0},{"file": 32,"line": 3,"col": 0},{"file": 32,"line": 2,"col": 0},{"file": 40,"line": 42,"col": 8,"docs": " Represents one unit of progress. Each node can have children nodes, or\n one can use integers with `update`.\n"},{"file": 51,"line": 41,"col": 8,"docs": " Provides a method to incrementally yield longer each time its called.\n"},{"file": 51,"line": 22,"col": 8,"fields": [6644]},{"file": 51,"line": 18,"col": 8,"fields": []},{"file": 51,"line": 9,"col": 8},{"file": 33,"line": 23,"col": 4,"docs": " Caller must free the returned memory.\n","fields": [6645]},{"file": 33,"line": 37,"col": 4,"docs": " Caller must free result when done.\n TODO make this go through libc when we have it\n","fields": [6646]},{"file": 33,"line": 13,"col": 4},{"file": 33,"line": 14,"col": 4},{"file": 33,"line": 347,"col": 4},{"file": 33,"line": 171,"col": 4},{"file": 33,"line": 454,"col": 4,"fields": [6647,6648]},{"file": 33,"line": 515,"col": 4,"docs": " TODO this reads /etc/passwd. But sometimes the user/id mapping is in something else\n like NIS, AD, etc. See `man nss` or look at an strace for `id myuser`.\n","fields": [6649]},{"file": 33,"line": 15,"col": 4},{"file": 33,"line": 389,"col": 4,"docs": " Caller must call argsFree on result.\n","fields": [6650]},{"file": 33,"line": 500,"col": 4},{"file": 33,"line": 18,"col": 4,"docs": " The result is a slice of `out_buffer`, from index `0`.\n","fields": [6651]},{"file": 33,"line": 198,"col": 4},{"file": 33,"line": 120,"col": 4},{"file": 33,"line": 506,"col": 4,"docs": " POSIX function which gets a uid from username.\n","fields": [6652]},{"file": 33,"line": 12,"col": 4},{"file": 33,"line": 384,"col": 4,"fields": []},{"file": 33,"line": 0,"col": 0},{"file": 33,"line": 4,"col": 0},{"file": 33,"line": 7,"col": 0},{"file": 33,"line": 491,"col": 0,"fields": [6653,6654]},{"file": 33,"line": 1,"col": 0},{"file": 33,"line": 2,"col": 0},{"file": 33,"line": 5,"col": 0},{"file": 33,"line": 10,"col": 0},{"file": 33,"line": 3,"col": 0},{"file": 33,"line": 8,"col": 0},{"file": 33,"line": 9,"col": 0},{"file": 33,"line": 6,"col": 0},{"file": 34,"line": 648,"col": 4,"docs": " compiler -O level: name,,NO_SECT,0,0\n"},{"file": 34,"line": 470,"col": 4,"docs": " the object file has no undefined references\n"},{"file": 34,"line": 357,"col": 4,"docs": " local of info to split segments\n"},{"file": 34,"line": 372,"col": 4,"docs": " compressed dyld information only\n"},{"file": 34,"line": 539,"col": 4,"docs": " Contains a section of type S_THREAD_LOCAL_VARIABLES\n"},{"file": 34,"line": 293,"col": 4,"docs": " fixed VM file inclusion (internal use)\n"},{"file": 34,"line": 591,"col": 4,"docs": " global symbol: name,,NO_SECT,type,0\n"},{"file": 34,"line": 570,"col": 4,"docs": " section with only 4 byte literals\n"},{"file": 34,"line": 323,"col": 4,"docs": " sub umbrella\n"},{"file": 34,"line": 384,"col": 4,"docs": " compressed table of function start addresses\n"},{"file": 34,"line": 281,"col": 4,"docs": " unix thread (includes a stack)\n"},{"file": 34,"line": 332,"col": 4,"docs": " two-level namespace lookup hints\n"},{"file": 34,"line": 411,"col": 4,"docs": " build for AppleTV min OS version\n"},{"file": 34,"line": 582,"col": 4,"docs": " private external symbol bit\n"},{"file": 34,"line": 558,"col": 4,"docs": "  24 section attributes\n"},{"file": 34,"line": 660,"col": 4,"docs": " left bracket: 0,,NO_SECT,nesting level,address\n"},{"file": 34,"line": 75,"col": 4,"docs": " The segment load command indicates that a part of this file is to be\n mapped into the task's address space.  The size of this segment in memory,\n vmsize, maybe equal to or larger than the amount to map from this file,\n filesize.  The file is mapped starting at fileoff to the beginning of\n the segment in memory, vmaddr.  The rest of the memory of the segment,\n if any, is allocated zero fill on demand.  The segment's maximum virtual\n memory protection and initial virtual memory protection are specified\n by the maxprot and initprot fields.  If the segment has sections then the\n section structures directly follow the segment command and their size is\n reflected in cmdsize.\n"},{"file": 34,"line": 0,"col": 4},{"file": 34,"line": 657,"col": 4,"docs": " alternate entry: name,,n_sect,linenumber,address\n"},{"file": 34,"line": 314,"col": 4,"docs": " modules prebound for a dynamically\n"},{"file": 34,"line": 527,"col": 4,"docs": " When this bit is set, the binary declares it is safe for use in processes when issetugid() is true\n"},{"file": 34,"line": 476,"col": 4,"docs": " the object file is input for the dynamic linker and can't be staticly link edited again\n"},{"file": 34,"line": 612,"col": 4,"docs": " emitted with gcc2_compiled and in gcc source\n"},{"file": 34,"line": 573,"col": 4,"docs": " section with only 8 byte literals\n"},{"file": 34,"line": 447,"col": 4,"docs": " preloaded executable file\n"},{"file": 34,"line": 678,"col": 4,"docs": " second stab entry with length information\n"},{"file": 34,"line": 450,"col": 4,"docs": " dynamically bound shared library\n"},{"file": 34,"line": 606,"col": 4,"docs": " begin nsect sym: 0,,n_sect,0,address\n"},{"file": 34,"line": 567,"col": 4,"docs": " section with only literal C string\n"},{"file": 34,"line": 205,"col": 4},{"file": 34,"line": 326,"col": 4,"docs": " sub client\n"},{"file": 34,"line": 456,"col": 4,"docs": " dynamically bound bundle file\n"},{"file": 34,"line": 675,"col": 4,"docs": " end common (local name): 0,,n_sect,0,address\n"},{"file": 34,"line": 345,"col": 4,"docs": " 64-bit image routines\n"},{"file": 34,"line": 366,"col": 4,"docs": " encrypted segment information\n"},{"file": 34,"line": 515,"col": 4,"docs": " the final linked image contains external weak symbols\n"},{"file": 34,"line": 494,"col": 4,"docs": " the executable is forcing all images to use flat name space bindings\n"},{"file": 34,"line": 509,"col": 4,"docs": " safe to divide up the sections into sub-sections via symbols for dead code stripping\n"},{"file": 34,"line": 453,"col": 4,"docs": " dynamic link editor\n"},{"file": 34,"line": 536,"col": 4,"docs": " Only for use on dylibs.  When linking against a dylib that has this bit set, the static linker will automatically not create a LC_LOAD_DYLIB load command to the dylib if no symbols are being referenced from the dylib.\n"},{"file": 34,"line": 299,"col": 4,"docs": " dynamic link-edit symbol table info\n"},{"file": 34,"line": 29,"col": 4,"docs": " The symtab_command contains the offsets and sizes of the link-edit 4.3BSD\n \"stab\" style symbol table information as described in the header files\n <nlist.h> and <stab.h>.\n"},{"file": 34,"line": 296,"col": 4,"docs": " prepage command (internal use)\n"},{"file": 34,"line": 530,"col": 4,"docs": " When this bit is set on a dylib, the static linker does not need to examine dependent dylibs to see if any are re-exported\n"},{"file": 34,"line": 278,"col": 4,"docs": " thread\n"},{"file": 34,"line": 588,"col": 4,"docs": " external symbol bit, set for external symbols\n"},{"file": 34,"line": 618,"col": 4,"docs": " src line: 0,,n_sect,linenumber,address\n"},{"file": 34,"line": 405,"col": 4,"docs": " linker options in MH_OBJECT files\n"},{"file": 34,"line": 423,"col": 4,"docs": " the mach magic number\n"},{"file": 34,"line": 597,"col": 4,"docs": " procedure: name,,n_sect,linenumber,address\n"},{"file": 34,"line": 542,"col": 4,"docs": " When this bit is set, the OS will run the main executable with a non-executable heap even on platforms (e.g. i386) that don't require it. Only used in MH_EXECUTE filetypes.\n"},{"file": 34,"line": 690,"col": 4},{"file": 34,"line": 473,"col": 4,"docs": " the object file is the output of an incremental link against a base file and can't be link edited again\n"},{"file": 34,"line": 414,"col": 4,"docs": " build for Watch min OS version\n"},{"file": 34,"line": 545,"col": 4,"docs": " The code was linked for use in an application extension.\n"},{"file": 34,"line": 615,"col": 4,"docs": " register sym: name,,NO_SECT,type,register\n"},{"file": 34,"line": 393,"col": 4,"docs": " table of non-instructions in __text\n"},{"file": 34,"line": 441,"col": 4,"docs": " fixed VM shared library file\n"},{"file": 34,"line": 521,"col": 4,"docs": " When this bit is set, all stacks in the task will be given stack execution privilege.  Only used in MH_EXECUTE filetypes.\n"},{"file": 34,"line": 633,"col": 4,"docs": " local sym: name,,NO_SECT,type,offset\n"},{"file": 34,"line": 360,"col": 4,"docs": " load and re-export dylib\n"},{"file": 34,"line": 600,"col": 4,"docs": " static symbol: name,,n_sect,type,address\n"},{"file": 34,"line": 533,"col": 4,"docs": " When this bit is set, the OS will load the main executable at a random address.  Only used in MH_EXECUTE filetypes.\n"},{"file": 34,"line": 692,"col": 4},{"file": 34,"line": 369,"col": 4,"docs": " compressed dyld information\n"},{"file": 34,"line": 402,"col": 4,"docs": " 64-bit encrypted segment information\n"},{"file": 34,"line": 438,"col": 4,"docs": " demand paged executable file\n"},{"file": 34,"line": 426,"col": 4,"docs": " NXSwapInt(MH_MAGIC)\n"},{"file": 34,"line": 342,"col": 4,"docs": " 64-bit segment of this file to be mapped\n"},{"file": 34,"line": 518,"col": 4,"docs": " the final linked image uses weak symbols\n"},{"file": 34,"line": 284,"col": 4,"docs": " load a specified fixed VM shared library\n"},{"file": 34,"line": 479,"col": 4,"docs": " the object file's undefined references are bound by the dynamic linker when loaded.\n"},{"file": 34,"line": 497,"col": 4,"docs": " this umbrella guarantees no multiple defintions of symbols in its sub-images so the two-level namespace hints can always be used.\n"},{"file": 34,"line": 381,"col": 4,"docs": " build for iPhoneOS min OS version\n"},{"file": 34,"line": 112,"col": 4,"docs": " The 64-bit segment load command indicates that a part of this file is to be\n mapped into a 64-bit task's address space.  If the 64-bit segment has\n sections then section_64 structures directly follow the 64-bit segment\n command and their size is reflected in cmdsize.\n"},{"file": 34,"line": 10,"col": 4},{"file": 34,"line": 420,"col": 4,"docs": " build for platform min OS version\n"},{"file": 34,"line": 663,"col": 4,"docs": " deleted include file: name,,NO_SECT,0,sum\n"},{"file": 34,"line": 491,"col": 4,"docs": " the image is using two-level name space bindings\n"},{"file": 34,"line": 251,"col": 4},{"file": 34,"line": 503,"col": 4,"docs": " the binary is not prebound but can have its prebinding redone. only used when MH_PREBOUND is not set.\n"},{"file": 34,"line": 548,"col": 4,"docs": " The external symbols listed in the nlist symbol table do not include all the symbols listed in the dyld info.\n"},{"file": 34,"line": 688,"col": 4,"docs": " If a segment contains any sections marked with S_ATTR_DEBUG then all\n sections in that segment must have this attribute.  No section other than\n a section marked with this attribute may reference the contents of this\n section.  A section with this attribute may contain no symbols and must have\n a section type S_REGULAR.  The static linker will not copy section contents\n from sections with this attribute into its output file.  These sections\n generally contain DWARF debugging info.\n a debug section\n"},{"file": 34,"line": 329,"col": 4,"docs": " sub library\n"},{"file": 34,"line": 348,"col": 4,"docs": " the uuid\n"},{"file": 34,"line": 459,"col": 4,"docs": " shared library stub for static linking only, no section contents\n"},{"file": 34,"line": 272,"col": 4,"docs": " link-edit stab symbol table info\n"},{"file": 34,"line": 691,"col": 4},{"file": 34,"line": 666,"col": 4,"docs": " right bracket: 0,,NO_SECT,nesting level,address\n"},{"file": 34,"line": 564,"col": 4,"docs": " zero fill on demand section\n"},{"file": 34,"line": 396,"col": 4,"docs": " source version used to build binary\n"},{"file": 34,"line": 311,"col": 4,"docs": " dynamic linker identification\n"},{"file": 34,"line": 378,"col": 4,"docs": " build for MacOSX min OS version\n"},{"file": 34,"line": 243,"col": 4},{"file": 34,"line": 417,"col": 4,"docs": " arbitrary data included within a Mach-O file\n"},{"file": 34,"line": 594,"col": 4,"docs": " procedure name (f77 kludge): name,,NO_SECT,0,0\n"},{"file": 34,"line": 555,"col": 4,"docs": " The flags field of a section structure is separated into two parts a section\n type and section attributes.  The section types are mutually exclusive (it\n can only have one type) but the section attributes are not (it may have more\n than one attribute).\n 256 section types\n"},{"file": 34,"line": 561,"col": 4,"docs": " regular section\n"},{"file": 34,"line": 432,"col": 4,"docs": " NXSwapInt(MH_MAGIC_64)\n"},{"file": 34,"line": 375,"col": 4,"docs": " load upward dylib\n"},{"file": 34,"line": 506,"col": 4,"docs": " indicates that this binary binds to all two-level namespace modules of its dependent libraries. only used when MH_PREBINDABLE and MH_TWOLEVEL are both set.\n"},{"file": 34,"line": 287,"col": 4,"docs": " fixed VM shared library identification\n"},{"file": 34,"line": 485,"col": 4,"docs": " the file has its read-only and read-write segments split\n"},{"file": 34,"line": 488,"col": 4,"docs": " the shared library init routine is to be run lazily via catching memory faults to its writeable segments (obsolete)\n"},{"file": 34,"line": 636,"col": 4,"docs": " include file beginning: name,,NO_SECT,0,sum\n"},{"file": 34,"line": 524,"col": 4,"docs": " When this bit is set, the binary declares it is safe for use in processes with uid zero\n"},{"file": 34,"line": 693,"col": 4},{"file": 34,"line": 387,"col": 4,"docs": " string for dyld to treat like environment variable\n"},{"file": 34,"line": 290,"col": 4,"docs": " object identification info (obsolete)\n"},{"file": 34,"line": 609,"col": 4,"docs": " AST file path: name,,NO_SECT,0,0\n"},{"file": 34,"line": 354,"col": 4,"docs": " local of code signature\n"},{"file": 34,"line": 320,"col": 4,"docs": " sub framework\n"},{"file": 34,"line": 627,"col": 4,"docs": " source file name: name,,n_sect,0,address\n"},{"file": 34,"line": 21,"col": 4},{"file": 34,"line": 429,"col": 4,"docs": " the 64-bit mach magic number\n"},{"file": 34,"line": 305,"col": 4,"docs": " dynamically linked shared lib ident\n"},{"file": 34,"line": 351,"col": 4,"docs": " runpath additions\n"},{"file": 34,"line": 444,"col": 4,"docs": " core file\n"},{"file": 34,"line": 482,"col": 4,"docs": " the file has its dynamic undefined references prebound.\n"},{"file": 34,"line": 500,"col": 4,"docs": " do not have dyld notify the prebinding agent about this executable\n"},{"file": 34,"line": 170,"col": 4,"docs": " A segment is made up of zero or more sections.  Non-MH_OBJECT files have\n all of their segments with the proper sections in each, and padded to the\n specified segment alignment when produced by the link editor.  The first\n segment of a MH_EXECUTE and MH_FVMLIB format file contains the mach_header\n and load commands of the object file before its first section.  The zero\n fill sections are always last in their segment (in all formats).  This\n allows the zeroed segment padding to be mapped into memory where zero fill\n sections might be. The gigabyte zero fill sections, those with the section\n type S_GB_ZEROFILL, can only be in a segment with sections of this type.\n These segments are then placed after all other segments.\n\n The MH_OBJECT format has all of its sections in one segment for\n compactness.  There is no padding to a specified segment boundary and the\n mach_header and load commands are not part of the segment.\n\n Sections with the same section name, sectname, going into the same segment,\n segname, are combined by the link editor.  The resulting section is aligned\n to the maximum alignment of the combined sections and is the new section's\n alignment.  The combined sections are aligned to their original alignment in\n the combined section.  Any padded bytes to get the specified alignment are\n zeroed.\n\n The format of the relocation entries referenced by the reloff and nreloc\n fields of the section structure for mach object files is described in the\n header file <reloc.h>.\n"},{"file": 34,"line": 639,"col": 4,"docs": " #included file name: name,,n_sect,0,address\n"},{"file": 34,"line": 672,"col": 4,"docs": " end common: name,,n_sect,0,0\n"},{"file": 34,"line": 603,"col": 4,"docs": " .lcomm symbol: name,,n_sect,type,address\n"},{"file": 34,"line": 275,"col": 4,"docs": " link-edit gdb symbol table info (obsolete)\n"},{"file": 34,"line": 651,"col": 4,"docs": " parameter: name,,NO_SECT,type,offset\n"},{"file": 34,"line": 645,"col": 4,"docs": " compiler version: name,,NO_SECT,0,0\n"},{"file": 34,"line": 669,"col": 4,"docs": " begin common: name,,NO_SECT,0,0\n"},{"file": 34,"line": 363,"col": 4,"docs": " delay load of dylib until first use\n"},{"file": 34,"line": 654,"col": 4,"docs": " include file end: name,,NO_SECT,0,0\n"},{"file": 34,"line": 462,"col": 4,"docs": " companion file with only debug sections\n"},{"file": 34,"line": 579,"col": 4,"docs": " if any of these bits set, a symbolic debugging entry\n"},{"file": 34,"line": 266,"col": 4,"docs": " After MacOS X 10.1 when a new load command is added that is required to be\n understood by the dynamic linker for the image to execute properly the\n LC_REQ_DYLD bit will be or'ed into the load command constant.  If the dynamic\n linker sees such a load command it it does not understand will issue a\n \"unknown load command required for execution\" error and refuse to use the\n image.  Other load commands without this bit that are not understood will\n simply be ignored.\n"},{"file": 34,"line": 269,"col": 4,"docs": " segment of this file to be mapped\n"},{"file": 34,"line": 335,"col": 4,"docs": " prebind checksum\n"},{"file": 34,"line": 390,"col": 4,"docs": " replacement for LC_UNIXTHREAD\n"},{"file": 34,"line": 621,"col": 4,"docs": " end nsect sym: 0,,n_sect,0,address\n"},{"file": 34,"line": 408,"col": 4,"docs": " optimization hints in MH_OBJECT files\n"},{"file": 34,"line": 585,"col": 4,"docs": " mask for the type bits\n"},{"file": 34,"line": 399,"col": 4,"docs": " Code signing DRs copied from linked dylibs\n"},{"file": 34,"line": 317,"col": 4,"docs": " image routines\n"},{"file": 34,"line": 576,"col": 4,"docs": " section with only pointers to\n"},{"file": 34,"line": 630,"col": 4,"docs": " object file name: name,,0,0,st_mtime\n"},{"file": 34,"line": 435,"col": 4,"docs": " relocatable object file\n"},{"file": 34,"line": 308,"col": 4,"docs": " load a dynamic linker\n"},{"file": 34,"line": 302,"col": 4,"docs": " load a dynamically linked shared library\n"},{"file": 34,"line": 642,"col": 4,"docs": " compiler parameters: name,,NO_SECT,0,0\n"},{"file": 34,"line": 465,"col": 4,"docs": " x86_64 kexts\n"},{"file": 34,"line": 624,"col": 4,"docs": " structure elt: name,,NO_SECT,type,struct_offset\n"},{"file": 34,"line": 512,"col": 4,"docs": " the binary has been canonicalized via the unprebind operation\n"},{"file": 34,"line": 339,"col": 4,"docs": " load a dynamically linked shared library that is allowed to be missing\n (all symbols are weak imported).\n"},{"file": 34,"line": 51,"col": 0,"docs": " The linkedit_data_command contains the offsets and sizes of a blob\n of data in the __LINKEDIT segment.\n"},{"file": 35,"line": 11,"col": 4},{"file": 35,"line": 1,"col": 0},{"file": 35,"line": 7,"col": 0},{"file": 35,"line": 9,"col": 0},{"file": 35,"line": 5,"col": 0},{"file": 35,"line": 3,"col": 0},{"file": 35,"line": 0,"col": 0},{"file": 35,"line": 2,"col": 0},{"file": 35,"line": 8,"col": 0},{"file": 35,"line": 6,"col": 0},{"file": 35,"line": 4,"col": 0},{"file": 36,"line": 1,"col": 0},{"file": 36,"line": 764,"col": 0,"fields": [6655]},{"file": 36,"line": 0,"col": 0},{"file": 36,"line": 767,"col": 0},{"file": 36,"line": 2,"col": 0},{"file": 37,"line": 12,"col": 4,"docs": " Lock may be held only once. If the same thread\n tries to acquire the same mutex twice, it deadlocks.\n This type supports static initialization and is based off of Golang 1.13 runtime.lock_futex:\n https://github.com/golang/go/blob/master/src/runtime/lock_futex.go\n When an application is built in single threaded release mode, all the functions are\n no-ops. In single threaded debug mode, there is deadlock detection.\n"},{"file": 37,"line": 1,"col": 0},{"file": 37,"line": 0,"col": 0},{"file": 37,"line": 3,"col": 0},{"file": 37,"line": 4,"col": 0},{"file": 37,"line": 155,"col": 0,"fields": [6656]},{"file": 37,"line": 2,"col": 0},{"file": 37,"line": 117,"col": 0},{"file": 38,"line": 9,"col": 4},{"file": 38,"line": 1,"col": 0},{"file": 38,"line": 2,"col": 0},{"file": 38,"line": 107,"col": 0},{"file": 38,"line": 7,"col": 0},{"file": 38,"line": 15,"col": 0},{"file": 38,"line": 0,"col": 0},{"file": 38,"line": 55,"col": 0},{"file": 38,"line": 5,"col": 0},{"file": 38,"line": 30,"col": 0},{"file": 38,"line": 3,"col": 0},{"file": 38,"line": 4,"col": 0},{"file": 38,"line": 6,"col": 0},{"file": 39,"line": 130,"col": 4,"docs": " Fast non-cryptographic 64bit hash function.\n See https://github.com/wangyi-fudan/wyhash\n"},{"file": 39,"line": 3,"col": 0},{"file": 39,"line": 175,"col": 0},{"file": 39,"line": 0,"col": 0},{"file": 39,"line": 37,"col": 0},{"file": 39,"line": 1,"col": 0},{"file": 24,"line": 637,"col": 8},{"file": 24,"line": 636,"col": 8},{"file": 24,"line": 704,"col": 4,"fields": [6657]},{"file": 24,"line": 651,"col": 4,"fields": [6658,6659]},{"file": 24,"line": 692,"col": 4,"fields": [6660,6661]},{"file": 24,"line": 698,"col": 4,"fields": [6662,6663]},{"file": 24,"line": 639,"col": 4,"fields": [6664,6665,6666]},{"file": 24,"line": 716,"col": 4,"fields": [6667,6668]},{"file": 24,"line": 708,"col": 4,"fields": [6669]},{"file": 32,"line": 166,"col": 8,"docs": " Resets the timer value to 0/now.\n","fields": [6670]},{"file": 32,"line": 171,"col": 8,"docs": " Returns the current value of the timer in nanoseconds, then resets it\n","fields": [6671]},{"file": 32,"line": 111,"col": 4},{"file": 32,"line": 116,"col": 4,"docs": "At some point we may change our minds on RAW, but for now we're\n  sticking with posix standard MONOTONIC. For more information, see:\n  https://github.com/ziglang/zig/pull/933\n"},{"file": 40,"line": 9,"col": 4,"docs": " This API is non-allocating and non-fallible. The tradeoff is that users of\n this API must provide the storage for each `Progress.Node`.\n Initialize the struct directly, overriding these fields as desired:\n * `refresh_rate_ms`\n * `initial_delay_ms`\n"},{"file": 40,"line": 0,"col": 0},{"file": 40,"line": 2,"col": 0},{"file": 40,"line": 1,"col": 0},{"file": 6,"line": 517,"col": 8,"fields": [6672]},{"file": 6,"line": 547,"col": 8,"docs": " Defer this after creating.\n","fields": [6673]},{"file": 6,"line": 571,"col": 8,"fields": [6674,6675]},{"file": 6,"line": 607,"col": 8,"fields": [6676]},{"file": 6,"line": 590,"col": 8,"docs": " Undo a `setHandle`.\n","fields": [6677]},{"file": 6,"line": 530,"col": 4,"fields": [6678]},{"file": 6,"line": 512,"col": 4},{"file": 6,"line": 502,"col": 4},{"file": 41,"line": 671,"col": 8,"docs": " If the build is multi-threaded and there is an event loop, then it calls `yield`. Otherwise,\n does nothing.\n","fields": []},{"file": 41,"line": 684,"col": 8,"fields": [6679]},{"file": 41,"line": 93,"col": 8},{"file": 41,"line": 615,"col": 8,"docs": " Bring your own linked list node. This means it can't fail.\n","fields": [6680,6681]},{"file": 41,"line": 110,"col": 8,"docs": " After initialization, call run().\n TODO copy elision / named return values so that the threads referencing *Loop\n have the correct pointer value.\n https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765\n","fields": [6682]},{"file": 41,"line": 680,"col": 8,"docs": " call finishOneEvent when done\n","fields": [6683]},{"file": 41,"line": 162,"col": 8,"fields": [6684]},{"file": 41,"line": 439,"col": 8,"fields": [6685,6686,6687,6688,6689]},{"file": 41,"line": 648,"col": 8,"docs": " This is equivalent to function call, except it calls `startCpuBoundOperation` first.\n","fields": [6690,6691],"varArgs": true},{"file": 41,"line": 658,"col": 8,"docs": " Yielding lets the event loop run, starting any unstarted async operations.\n Note that async operations automatically start when a function yields for any other reason,\n for example, when async I/O is performed. This function is intended to be used only when\n CPU bound tasks would be waiting in the event loop but never get started because no async I/O\n is performed.\n","fields": [6692]},{"file": 41,"line": 508,"col": 8,"fields": [6693,6694]},{"file": 41,"line": 448,"col": 8,"fields": [6695,6696]},{"file": 41,"line": 29,"col": 8},{"file": 41,"line": 627,"col": 8,"fields": [6697]},{"file": 41,"line": 549,"col": 8,"fields": [6698,6699,6700]},{"file": 41,"line": 120,"col": 8,"docs": " After initialization, call run().\n This is the same as `initThreadPool` using `Thread.cpuCount` to determine the thread\n pool size.\n TODO copy elision / named return values so that the threads referencing *Loop\n have the correct pointer value.\n https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765\n","fields": [6701]},{"file": 41,"line": 533,"col": 8,"docs": " resume_node must live longer than the anyframe that it holds a reference to.\n","fields": [6702,6703,6704,6705,6706]},{"file": 41,"line": 516,"col": 8,"fields": [6707,6708,6709,6710]},{"file": 41,"line": 621,"col": 8,"fields": [6711,6712]},{"file": 41,"line": 453,"col": 8,"fields": [6713,6714,6715]},{"file": 41,"line": 512,"col": 8,"fields": [6716,6717]},{"file": 41,"line": 27,"col": 8},{"file": 41,"line": 98,"col": 8,"docs": " TODO copy elision / named return values so that the threads referencing *Loop\n have the correct pointer value.\n https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765\n","fields": [6718]},{"file": 41,"line": 504,"col": 8,"fields": [6719,6720]},{"file": 41,"line": 129,"col": 8,"docs": " Thread count is the total thread count. The thread pool size will be\n max(thread_count - 1, 0)\n","fields": [6721,6722]},{"file": 41,"line": 427,"col": 8,"docs": " resume_node must live longer than the anyframe that it holds a reference to.\n flags must contain EPOLLET\n","fields": [6723,6724,6725,6726]},{"file": 41,"line": 812,"col": 4,"fields": [6727,6728]},{"file": 41,"line": 173,"col": 4,"fields": [6729,6730]},{"file": 41,"line": 88,"col": 4},{"file": 41,"line": 89,"col": 4},{"file": 41,"line": 167,"col": 4},{"file": 41,"line": 406,"col": 4,"fields": [6731]},{"file": 41,"line": 842,"col": 4,"fields": [6732]},{"file": 41,"line": 901,"col": 4},{"file": 41,"line": 834,"col": 4,"fields": [6733,6734]},{"file": 41,"line": 719,"col": 4,"fields": [6735]},{"file": 41,"line": 911,"col": 4},{"file": 41,"line": 922,"col": 4},{"file": 41,"line": 564,"col": 4,"fields": [6736]},{"file": 41,"line": 171,"col": 4},{"file": 6,"line": 66,"col": 16},{"file": 6,"line": 76,"col": 16},{"file": 6,"line": 47,"col": 16},{"file": 6,"line": 38,"col": 16},{"file": 6,"line": 56,"col": 16},{"file": 3,"line": 5,"col": 4,"fields": []},{"file": 3,"line": 2,"col": 0},{"file": 3,"line": 1,"col": 0},{"file": 3,"line": 0,"col": 0},{"file": 3,"line": 3,"col": 0},{"file": 11,"line": 303,"col": 16,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 41,"line": 14,"col": 4},{"file": 41,"line": 1,"col": 0},{"file": 41,"line": 2,"col": 0},{"file": 41,"line": 6,"col": 0},{"file": 41,"line": 965,"col": 0,"fields": [6737,6738]},{"file": 41,"line": 10,"col": 0},{"file": 41,"line": 11,"col": 0},{"file": 41,"line": 12,"col": 0},{"file": 41,"line": 0,"col": 0},{"file": 41,"line": 961,"col": 0,"fields": []},{"file": 41,"line": 9,"col": 0},{"file": 41,"line": 7,"col": 0},{"file": 41,"line": 3,"col": 0},{"file": 41,"line": 4,"col": 0},{"file": 41,"line": 5,"col": 0},{"file": 41,"line": 8,"col": 0},{"file": 42,"line": 58,"col": 4,"docs": "\n","fields": [6739]},{"file": 42,"line": 155,"col": 4,"fields": [6740]},{"file": 42,"line": 338,"col": 4,"docs": "\n","fields": [6741]},{"file": 42,"line": 22,"col": 4,"fields": [6742]},{"file": 42,"line": 300,"col": 4,"docs": "\n","fields": [6743]},{"file": 42,"line": 197,"col": 4,"docs": "\n","fields": [6744]},{"file": 42,"line": 15,"col": 4},{"file": 42,"line": 244,"col": 4,"docs": "\n","fields": [6745]},{"file": 42,"line": 212,"col": 4,"docs": "\n","fields": [6746]},{"file": 42,"line": 277,"col": 4,"docs": "\n","fields": [6747]},{"file": 42,"line": 134,"col": 4,"docs": "\n","fields": [6748]},{"file": 42,"line": 176,"col": 4,"docs": "\n","fields": [6749]},{"file": 42,"line": 21,"col": 4,"docs": "\n"},{"file": 42,"line": 82,"col": 4,"docs": "\n","fields": [6750]},{"file": 42,"line": 1,"col": 0},{"file": 42,"line": 0,"col": 0},{"file": 42,"line": 3,"col": 0},{"file": 42,"line": 7,"col": 0},{"file": 42,"line": 4,"col": 0},{"file": 42,"line": 11,"col": 0,"fields": [6751]},{"file": 42,"line": 5,"col": 0},{"file": 42,"line": 2,"col": 0},{"file": 43,"line": 8,"col": 4},{"file": 43,"line": 0,"col": 0},{"file": 43,"line": 1,"col": 0},{"file": 43,"line": 5,"col": 0},{"file": 43,"line": 2,"col": 0},{"file": 43,"line": 4,"col": 0},{"file": 43,"line": 6,"col": 0},{"file": 43,"line": 3,"col": 0},{"file": 44,"line": 3,"col": 0},{"file": 45,"line": 1,"col": 0},{"file": 45,"line": 0,"col": 0},{"file": 52,"line": 736,"col": 4},{"file": 52,"line": 461,"col": 4},{"file": 52,"line": 644,"col": 4},{"file": 52,"line": 773,"col": 4},{"file": 46,"line": 130,"col": 4},{"file": 52,"line": 397,"col": 4},{"file": 52,"line": 235,"col": 4},{"file": 52,"line": 290,"col": 4},{"file": 52,"line": 608,"col": 4},{"file": 52,"line": 635,"col": 4},{"file": 52,"line": 751,"col": 4},{"file": 46,"line": 792,"col": 4,"docs": " A file time is a 64-bit value that represents the number of 100-nanosecond\n intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated\n Universal Time (UTC).\n This function returns the number of nanoseconds since the canonical epoch,\n which is the POSIX one (Jan 01, 1970 AD).\n","fields": [6752]},{"file": 52,"line": 841,"col": 4},{"file": 52,"line": 336,"col": 4},{"file": 46,"line": 186,"col": 4,"fields": [6753,6754,6755,6756]},{"file": 46,"line": 108,"col": 4},{"file": 52,"line": 713,"col": 4},{"file": 52,"line": 568,"col": 4},{"file": 52,"line": 468,"col": 4},{"file": 52,"line": 311,"col": 4},{"file": 52,"line": 241,"col": 4},{"file": 46,"line": 156,"col": 4,"fields": [6757,6758]},{"file": 52,"line": 578,"col": 4},{"file": 52,"line": 37,"col": 4},{"file": 52,"line": 737,"col": 4},{"file": 52,"line": 53,"col": 4},{"file": 52,"line": 22,"col": 4},{"file": 52,"line": 125,"col": 4},{"file": 52,"line": 304,"col": 4},{"file": 52,"line": 589,"col": 4},{"file": 52,"line": 109,"col": 4},{"file": 52,"line": 771,"col": 4},{"file": 52,"line": 62,"col": 4},{"file": 46,"line": 288,"col": 4,"docs": " This function is for blocking file descriptors only. For non-blocking, see\n `WriteFileAsync`.\n","fields": [6759,6760]},{"file": 52,"line": 628,"col": 4},{"file": 52,"line": 268,"col": 4,"docs": " Return the normalized drive name. This is the default.\n"},{"file": 46,"line": 733,"col": 4,"fields": [6761]},{"file": 52,"line": 28,"col": 4},{"file": 46,"line": 645,"col": 4},{"file": 52,"line": 9,"col": 4},{"file": 52,"line": 316,"col": 4},{"file": 52,"line": 562,"col": 4},{"file": 52,"line": 283,"col": 4,"docs": " Return the path with the volume device path.\n"},{"file": 52,"line": 756,"col": 4},{"file": 52,"line": 350,"col": 4},{"file": 52,"line": 49,"col": 4},{"file": 52,"line": 328,"col": 4},{"file": 52,"line": 714,"col": 4},{"file": 52,"line": 453,"col": 4},{"file": 52,"line": 358,"col": 4},{"file": 46,"line": 251,"col": 4,"fields": [6762]},{"file": 52,"line": 432,"col": 4},{"file": 46,"line": 621,"col": 4,"fields": []},{"file": 52,"line": 245,"col": 4},{"file": 46,"line": 605,"col": 4,"fields": [6763,6764,6765]},{"file": 52,"line": 41,"col": 4},{"file": 52,"line": 440,"col": 4},{"file": 52,"line": 67,"col": 4},{"file": 46,"line": 585,"col": 4},{"file": 52,"line": 326,"col": 4},{"file": 52,"line": 421,"col": 4},{"file": 52,"line": 569,"col": 4},{"file": 46,"line": 259,"col": 4},{"file": 52,"line": 564,"col": 4},{"file": 52,"line": 349,"col": 4},{"file": 52,"line": 249,"col": 4},{"file": 52,"line": 239,"col": 4},{"file": 46,"line": 100,"col": 4,"fields": [6766,6767,6768]},{"file": 46,"line": 549,"col": 4},{"file": 52,"line": 594,"col": 4},{"file": 52,"line": 804,"col": 4},{"file": 46,"line": 459,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_BEGIN`.\n","fields": [6769,6770]},{"file": 52,"line": 312,"col": 4},{"file": 52,"line": 294,"col": 4},{"file": 46,"line": 136,"col": 4,"fields": [6771,6772]},{"file": 52,"line": 325,"col": 4},{"file": 52,"line": 703,"col": 4},{"file": 52,"line": 590,"col": 4},{"file": 52,"line": 505,"col": 4},{"file": 52,"line": 223,"col": 4},{"file": 52,"line": 21,"col": 4},{"file": 52,"line": 38,"col": 4},{"file": 52,"line": 610,"col": 4},{"file": 46,"line": 517,"col": 4,"fields": [6773,6774,6775,6776]},{"file": 52,"line": 450,"col": 4},{"file": 46,"line": 383,"col": 4},{"file": 52,"line": 10,"col": 4},{"file": 52,"line": 335,"col": 4},{"file": 52,"line": 732,"col": 4},{"file": 52,"line": 409,"col": 4},{"file": 52,"line": 575,"col": 4},{"file": 52,"line": 323,"col": 4},{"file": 52,"line": 229,"col": 4},{"file": 52,"line": 652,"col": 4},{"file": 52,"line": 574,"col": 4},{"file": 52,"line": 481,"col": 4},{"file": 52,"line": 769,"col": 4},{"file": 52,"line": 244,"col": 4},{"file": 52,"line": 394,"col": 4},{"file": 46,"line": 88,"col": 4},{"file": 52,"line": 69,"col": 4},{"file": 52,"line": 117,"col": 4},{"file": 46,"line": 385,"col": 4,"fields": [6777,6778,6779]},{"file": 52,"line": 240,"col": 4},{"file": 52,"line": 742,"col": 4},{"file": 52,"line": 570,"col": 4},{"file": 52,"line": 236,"col": 4},{"file": 52,"line": 354,"col": 4},{"file": 52,"line": 52,"col": 4},{"file": 52,"line": 733,"col": 4},{"file": 52,"line": 776,"col": 4},{"file": 46,"line": 597,"col": 4,"fields": [6780,6781,6782,6783]},{"file": 52,"line": 466,"col": 4},{"file": 52,"line": 581,"col": 4},{"file": 52,"line": 35,"col": 4},{"file": 52,"line": 561,"col": 4},{"file": 46,"line": 344,"col": 4,"fields": [6784,6785,6786]},{"file": 52,"line": 603,"col": 4},{"file": 46,"line": 391,"col": 4,"fields": [6787,6788,6789]},{"file": 46,"line": 510,"col": 4},{"file": 52,"line": 399,"col": 4},{"file": 46,"line": 332,"col": 4},{"file": 52,"line": 291,"col": 4},{"file": 52,"line": 360,"col": 4},{"file": 52,"line": 734,"col": 4},{"file": 52,"line": 322,"col": 4},{"file": 52,"line": 66,"col": 4},{"file": 52,"line": 221,"col": 4},{"file": 52,"line": 740,"col": 4},{"file": 52,"line": 455,"col": 4},{"file": 52,"line": 313,"col": 4},{"file": 52,"line": 247,"col": 4},{"file": 52,"line": 462,"col": 4},{"file": 52,"line": 767,"col": 4},{"file": 52,"line": 866,"col": 4},{"file": 52,"line": 7,"col": 4},{"file": 52,"line": 679,"col": 4},{"file": 52,"line": 60,"col": 4},{"file": 52,"line": 54,"col": 4},{"file": 52,"line": 353,"col": 4},{"file": 52,"line": 300,"col": 4},{"file": 46,"line": 15,"col": 4},{"file": 46,"line": 261,"col": 4,"fields": [6790,6791]},{"file": 52,"line": 293,"col": 4},{"file": 46,"line": 174,"col": 4,"docs": " Returns `true` if there was another file, `false` otherwise.\n","fields": [6792,6793]},{"file": 52,"line": 567,"col": 4},{"file": 52,"line": 357,"col": 4},{"file": 52,"line": 407,"col": 4},{"file": 52,"line": 584,"col": 4},{"file": 52,"line": 674,"col": 4},{"file": 52,"line": 671,"col": 4},{"file": 52,"line": 113,"col": 4},{"file": 46,"line": 802,"col": 4,"fields": [6794]},{"file": 52,"line": 457,"col": 4},{"file": 52,"line": 344,"col": 4},{"file": 52,"line": 331,"col": 4},{"file": 46,"line": 426,"col": 4,"fields": [6795]},{"file": 52,"line": 463,"col": 4},{"file": 52,"line": 657,"col": 4},{"file": 46,"line": 90,"col": 4,"fields": [6796,6797,6798]},{"file": 52,"line": 438,"col": 4},{"file": 52,"line": 449,"col": 4},{"file": 52,"line": 46,"col": 4},{"file": 52,"line": 456,"col": 4},{"file": 46,"line": 824,"col": 4,"fields": [6799,6800]},{"file": 52,"line": 8,"col": 4},{"file": 52,"line": 305,"col": 4},{"file": 52,"line": 758,"col": 4},{"file": 52,"line": 42,"col": 4},{"file": 52,"line": 729,"col": 4},{"file": 52,"line": 338,"col": 4},{"file": 46,"line": 356,"col": 4},{"file": 52,"line": 33,"col": 4},{"file": 46,"line": 216,"col": 4},{"file": 52,"line": 400,"col": 4},{"file": 52,"line": 303,"col": 4},{"file": 52,"line": 93,"col": 4},{"file": 52,"line": 227,"col": 4},{"file": 52,"line": 655,"col": 4},{"file": 46,"line": 310,"col": 4,"docs": " The result is a slice of `buffer`, indexed from 0.\n","fields": [6801]},{"file": 52,"line": 460,"col": 4},{"file": 46,"line": 279,"col": 4},{"file": 52,"line": 355,"col": 4},{"file": 52,"line": 768,"col": 4},{"file": 52,"line": 29,"col": 4},{"file": 46,"line": 16,"col": 4},{"file": 46,"line": 431,"col": 4,"fields": [6802]},{"file": 52,"line": 619,"col": 4},{"file": 52,"line": 658,"col": 4},{"file": 52,"line": 774,"col": 4},{"file": 52,"line": 653,"col": 4},{"file": 52,"line": 32,"col": 4},{"file": 52,"line": 343,"col": 4},{"file": 46,"line": 560,"col": 4,"fields": [6803]},{"file": 52,"line": 738,"col": 4},{"file": 52,"line": 572,"col": 4},{"file": 52,"line": 643,"col": 4},{"file": 52,"line": 234,"col": 4},{"file": 52,"line": 731,"col": 4},{"file": 52,"line": 452,"col": 4},{"file": 46,"line": 797,"col": 4,"fields": [6804]},{"file": 52,"line": 315,"col": 4},{"file": 52,"line": 422,"col": 4},{"file": 46,"line": 725,"col": 4,"fields": [6805,6806,6807,6808]},{"file": 52,"line": 30,"col": 4},{"file": 52,"line": 870,"col": 4},{"file": 46,"line": 17,"col": 4},{"file": 52,"line": 715,"col": 4},{"file": 52,"line": 630,"col": 4},{"file": 52,"line": 419,"col": 4},{"file": 52,"line": 73,"col": 4},{"file": 52,"line": 406,"col": 4},{"file": 52,"line": 105,"col": 4},{"file": 52,"line": 576,"col": 4},{"file": 46,"line": 820,"col": 4,"fields": [6809]},{"file": 52,"line": 810,"col": 4},{"file": 52,"line": 324,"col": 4},{"file": 52,"line": 59,"col": 4},{"file": 46,"line": 703,"col": 4,"fields": [6810]},{"file": 46,"line": 625,"col": 4,"fields": [6811]},{"file": 52,"line": 396,"col": 4},{"file": 52,"line": 61,"col": 4},{"file": 52,"line": 45,"col": 4},{"file": 52,"line": 333,"col": 4},{"file": 52,"line": 233,"col": 4},{"file": 52,"line": 728,"col": 4},{"file": 46,"line": 707,"col": 4,"fields": []},{"file": 46,"line": 575,"col": 4,"fields": [6812,6813,6814]},{"file": 52,"line": 34,"col": 4},{"file": 52,"line": 334,"col": 4},{"file": 46,"line": 405,"col": 4,"fields": [6815,6816]},{"file": 52,"line": 451,"col": 4},{"file": 52,"line": 712,"col": 4},{"file": 46,"line": 420,"col": 4},{"file": 52,"line": 448,"col": 4},{"file": 52,"line": 16,"col": 4,"docs": " The standard output device. Initially, this is the active console screen buffer, CONOUT$.\n"},{"file": 52,"line": 416,"col": 4},{"file": 52,"line": 346,"col": 4},{"file": 52,"line": 44,"col": 4},{"file": 52,"line": 356,"col": 4},{"file": 52,"line": 43,"col": 4},{"file": 52,"line": 436,"col": 4},{"file": 52,"line": 330,"col": 4},{"file": 52,"line": 417,"col": 4},{"file": 52,"line": 454,"col": 4},{"file": 52,"line": 435,"col": 4},{"file": 52,"line": 850,"col": 4},{"file": 52,"line": 580,"col": 4},{"file": 52,"line": 71,"col": 4},{"file": 52,"line": 591,"col": 4},{"file": 52,"line": 246,"col": 4},{"file": 52,"line": 437,"col": 4},{"file": 52,"line": 412,"col": 4},{"file": 52,"line": 711,"col": 4},{"file": 52,"line": 648,"col": 4},{"file": 52,"line": 566,"col": 4},{"file": 52,"line": 709,"col": 4},{"file": 46,"line": 609,"col": 4},{"file": 52,"line": 231,"col": 4},{"file": 46,"line": 595,"col": 4},{"file": 52,"line": 659,"col": 4},{"file": 52,"line": 624,"col": 4},{"file": 52,"line": 645,"col": 4},{"file": 52,"line": 427,"col": 4},{"file": 52,"line": 577,"col": 4},{"file": 46,"line": 587,"col": 4,"fields": [6817,6818]},{"file": 52,"line": 25,"col": 4},{"file": 52,"line": 314,"col": 4},{"file": 52,"line": 340,"col": 4},{"file": 46,"line": 399,"col": 4},{"file": 52,"line": 772,"col": 4},{"file": 46,"line": 474,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_CURRENT`.\n","fields": [6819,6820]},{"file": 52,"line": 398,"col": 4},{"file": 46,"line": 304,"col": 4},{"file": 52,"line": 611,"col": 4},{"file": 52,"line": 327,"col": 4},{"file": 52,"line": 875,"col": 4},{"file": 52,"line": 85,"col": 4},{"file": 46,"line": 716,"col": 4,"fields": []},{"file": 52,"line": 55,"col": 4},{"file": 52,"line": 230,"col": 4},{"file": 52,"line": 585,"col": 4},{"file": 46,"line": 203,"col": 4,"fields": [6821,6822,6823,6824]},{"file": 52,"line": 58,"col": 4},{"file": 52,"line": 277,"col": 4,"docs": " Return the path with a volume GUID path instead of the drive name.\n"},{"file": 52,"line": 296,"col": 4},{"file": 52,"line": 629,"col": 4},{"file": 46,"line": 201,"col": 4},{"file": 52,"line": 582,"col": 4},{"file": 52,"line": 739,"col": 4},{"file": 46,"line": 629,"col": 4},{"file": 52,"line": 306,"col": 4},{"file": 52,"line": 587,"col": 4},{"file": 52,"line": 23,"col": 4},{"file": 52,"line": 486,"col": 4},{"file": 52,"line": 130,"col": 4},{"file": 46,"line": 21,"col": 4},{"file": 52,"line": 226,"col": 4},{"file": 46,"line": 113,"col": 4,"docs": " Call RtlGenRandom() instead of CryptGetRandom() on Windows\n https://github.com/rust-lang-nursery/rand/issues/111\n https://bugzilla.mozilla.org/show_bug.cgi?id=504270\n","fields": [6825]},{"file": 52,"line": 586,"col": 4},{"file": 52,"line": 26,"col": 4},{"file": 46,"line": 555,"col": 4,"fields": [6826]},{"file": 52,"line": 121,"col": 4},{"file": 52,"line": 405,"col": 4},{"file": 52,"line": 661,"col": 4},{"file": 46,"line": 692,"col": 4,"fields": [6827]},{"file": 52,"line": 558,"col": 4},{"file": 52,"line": 40,"col": 4},{"file": 52,"line": 337,"col": 4},{"file": 46,"line": 148,"col": 4},{"file": 46,"line": 98,"col": 4},{"file": 52,"line": 332,"col": 4},{"file": 46,"line": 687,"col": 4},{"file": 52,"line": 691,"col": 4},{"file": 52,"line": 428,"col": 4},{"file": 52,"line": 302,"col": 4},{"file": 52,"line": 592,"col": 4},{"file": 52,"line": 439,"col": 4},{"file": 52,"line": 401,"col": 4},{"file": 46,"line": 768,"col": 4,"fields": []},{"file": 52,"line": 232,"col": 4},{"file": 52,"line": 280,"col": 4,"docs": " Return the path with no drive information.\n"},{"file": 52,"line": 446,"col": 4},{"file": 46,"line": 737,"col": 4},{"file": 46,"line": 857,"col": 4,"docs": " Call this when you made a windows DLL call or something that does SetLastError\n and you get an unexpected error.\n","fields": [6828]},{"file": 52,"line": 403,"col": 4},{"file": 52,"line": 701,"col": 4},{"file": 52,"line": 242,"col": 4},{"file": 52,"line": 573,"col": 4},{"file": 52,"line": 579,"col": 4},{"file": 46,"line": 255,"col": 4,"fields": [6829]},{"file": 52,"line": 465,"col": 4},{"file": 52,"line": 36,"col": 4},{"file": 52,"line": 135,"col": 4},{"file": 52,"line": 626,"col": 4},{"file": 52,"line": 563,"col": 4},{"file": 46,"line": 410,"col": 4,"fields": [6830,6831]},{"file": 52,"line": 347,"col": 4},{"file": 52,"line": 646,"col": 4},{"file": 52,"line": 271,"col": 4,"docs": " Return the opened file name (not normalized).\n"},{"file": 52,"line": 414,"col": 4},{"file": 46,"line": 816,"col": 4,"fields": [6832]},{"file": 52,"line": 238,"col": 4},{"file": 52,"line": 565,"col": 4},{"file": 52,"line": 274,"col": 4,"docs": " Return the path with the drive letter. This is the default.\n"},{"file": 52,"line": 402,"col": 4},{"file": 52,"line": 50,"col": 4},{"file": 52,"line": 362,"col": 4},{"file": 52,"line": 413,"col": 4},{"file": 52,"line": 420,"col": 4},{"file": 46,"line": 496,"col": 4,"docs": " The SetFilePointerEx function with parameters to get the current offset.\n","fields": [6833]},{"file": 52,"line": 31,"col": 4},{"file": 52,"line": 366,"col": 4},{"file": 52,"line": 404,"col": 4},{"file": 46,"line": 611,"col": 4,"fields": [6834,6835]},{"file": 52,"line": 868,"col": 4},{"file": 52,"line": 702,"col": 4},{"file": 52,"line": 64,"col": 4},{"file": 46,"line": 23,"col": 4},{"file": 52,"line": 431,"col": 4},{"file": 52,"line": 310,"col": 4},{"file": 52,"line": 588,"col": 4},{"file": 46,"line": 752,"col": 4},{"file": 52,"line": 48,"col": 4},{"file": 46,"line": 171,"col": 4},{"file": 46,"line": 334,"col": 4,"fields": [6836,6837,6838]},{"file": 52,"line": 285,"col": 4},{"file": 52,"line": 363,"col": 4},{"file": 52,"line": 361,"col": 4},{"file": 46,"line": 808,"col": 4,"docs": " Converts a number of nanoseconds since the POSIX epoch to a Windows FILETIME.\n","fields": [6839]},{"file": 52,"line": 441,"col": 4},{"file": 52,"line": 622,"col": 4},{"file": 46,"line": 729,"col": 4,"fields": [6840,6841,6842]},{"file": 52,"line": 642,"col": 4},{"file": 52,"line": 321,"col": 4},{"file": 52,"line": 237,"col": 4},{"file": 52,"line": 228,"col": 4},{"file": 46,"line": 364,"col": 4,"fields": [6843]},{"file": 52,"line": 508,"col": 4},{"file": 52,"line": 329,"col": 4},{"file": 52,"line": 672,"col": 4},{"file": 52,"line": 57,"col": 4},{"file": 52,"line": 650,"col": 4},{"file": 52,"line": 320,"col": 4},{"file": 46,"line": 223,"col": 4,"fields": [6844,6845,6846,6847,6848]},{"file": 52,"line": 770,"col": 4},{"file": 52,"line": 423,"col": 4},{"file": 52,"line": 395,"col": 4},{"file": 52,"line": 299,"col": 4},{"file": 46,"line": 446,"col": 4,"fields": [6849]},{"file": 52,"line": 848,"col": 4},{"file": 46,"line": 872,"col": 4,"docs": " Call this when you made a windows NtDll call\n and you get an unexpected status.\n","fields": [6850]},{"file": 52,"line": 307,"col": 4},{"file": 52,"line": 19,"col": 4,"docs": " The standard error device. Initially, this is the active console screen buffer, CONOUT$.\n"},{"file": 46,"line": 369,"col": 4,"fields": [6851]},{"file": 52,"line": 424,"col": 4},{"file": 52,"line": 670,"col": 4},{"file": 52,"line": 351,"col": 4},{"file": 52,"line": 730,"col": 4},{"file": 52,"line": 298,"col": 4},{"file": 52,"line": 262,"col": 4},{"file": 52,"line": 243,"col": 4},{"file": 52,"line": 56,"col": 4},{"file": 52,"line": 705,"col": 4},{"file": 52,"line": 295,"col": 4},{"file": 52,"line": 39,"col": 4},{"file": 46,"line": 184,"col": 4},{"file": 52,"line": 442,"col": 4},{"file": 52,"line": 633,"col": 4},{"file": 52,"line": 24,"col": 4},{"file": 52,"line": 348,"col": 4},{"file": 52,"line": 373,"col": 4},{"file": 52,"line": 430,"col": 4},{"file": 46,"line": 456,"col": 4},{"file": 46,"line": 634,"col": 4,"fields": [6852,6853,6854]},{"file": 52,"line": 27,"col": 4},{"file": 52,"line": 352,"col": 4},{"file": 52,"line": 507,"col": 4},{"file": 52,"line": 214,"col": 4},{"file": 52,"line": 426,"col": 4},{"file": 52,"line": 51,"col": 4},{"file": 52,"line": 627,"col": 4},{"file": 52,"line": 593,"col": 4},{"file": 52,"line": 341,"col": 4},{"file": 52,"line": 726,"col": 4,"docs": " > The maximum path of 32,767 characters is approximate, because the \"\\\\?\\\"\n > prefix may be expanded to a longer string by the system at run time, and\n > this expansion applies to the total length.\n from https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#maximum-path-length-limitation\n"},{"file": 46,"line": 754,"col": 4,"fields": [6855,6856,6857,6858]},{"file": 52,"line": 700,"col": 4},{"file": 46,"line": 537,"col": 4},{"file": 52,"line": 342,"col": 4},{"file": 46,"line": 60,"col": 4,"fields": [6859,6860,6861,6862,6863,6864,6865]},{"file": 52,"line": 359,"col": 4},{"file": 52,"line": 13,"col": 4,"docs": " The standard input device. Initially, this is the console input buffer, CONIN$.\n"},{"file": 46,"line": 539,"col": 4,"fields": [6866]},{"file": 46,"line": 739,"col": 4,"fields": [6867]},{"file": 46,"line": 13,"col": 4},{"file": 52,"line": 654,"col": 4},{"file": 52,"line": 620,"col": 4},{"file": 52,"line": 47,"col": 4},{"file": 52,"line": 560,"col": 4},{"file": 52,"line": 669,"col": 4},{"file": 52,"line": 656,"col": 4},{"file": 46,"line": 619,"col": 4},{"file": 52,"line": 101,"col": 4},{"file": 52,"line": 596,"col": 4},{"file": 46,"line": 441,"col": 4},{"file": 46,"line": 485,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_END`.\n","fields": [6868,6869]},{"file": 52,"line": 445,"col": 4},{"file": 52,"line": 411,"col": 4},{"file": 52,"line": 364,"col": 4},{"file": 52,"line": 782,"col": 4},{"file": 52,"line": 319,"col": 4},{"file": 46,"line": 14,"col": 4},{"file": 52,"line": 447,"col": 4},{"file": 46,"line": 47,"col": 4,"fields": [6870,6871,6872,6873,6874,6875,6876]},{"file": 46,"line": 652,"col": 4,"fields": [6877,6878,6879,6880,6881,6882,6883,6884,6885,6886]},{"file": 46,"line": 9,"col": 0},{"file": 46,"line": 851,"col": 0,"fields": [6887,6888]},{"file": 46,"line": 10,"col": 0},{"file": 46,"line": 7,"col": 0},{"file": 46,"line": 11,"col": 0},{"file": 46,"line": 6,"col": 0},{"file": 46,"line": 573,"col": 0},{"file": 46,"line": 8,"col": 0},{"file": 47,"line": 3,"col": 4,"fields": [6889,6890]},{"file": 47,"line": 56,"col": 4,"fields": [6891,6892]},{"file": 47,"line": 132,"col": 0,"fields": [6893,6894]},{"file": 47,"line": 161,"col": 0,"fields": [6895,6896,6897]},{"file": 47,"line": 122,"col": 0,"fields": [6898,6899]},{"file": 47,"line": 141,"col": 0,"fields": [6900,6901]},{"file": 47,"line": 0,"col": 0},{"file": 47,"line": 1,"col": 0},{"file": 47,"line": 150,"col": 0,"fields": [6902,6903,6904]},{"file": 47,"line": 127,"col": 0,"fields": [6905,6906]},{"file": 24,"line": 484,"col": 8,"fields": [6907,6908]},{"file": 24,"line": 470,"col": 8,"fields": [6909,6910,6911]},{"file": 24,"line": 478,"col": 8,"fields": [6912,6913]},{"file": 24,"line": 495,"col": 4,"fields": [6914,6915,6916]},{"file": 25,"line": 184,"col": 8,"fields": [6917]},{"file": 25,"line": 215,"col": 8,"fields": [6918,6919]},{"file": 25,"line": 43,"col": 8,"fields": [6920,6921]},{"file": 25,"line": 122,"col": 8,"fields": [6922,6923]},{"file": 25,"line": 55,"col": 8,"fields": [6924]},{"file": 25,"line": 94,"col": 4,"fields": [6925,6926]},{"file": 25,"line": 236,"col": 4},{"file": 48,"line": 7,"col": 4,"docs": " Describes how pointer types should be hashed.\n"},{"file": 48,"line": 55,"col": 4,"docs": " Helper function to hash a set of contiguous objects, from an array or slice.\n","fields": [6927,6928,6929]},{"file": 48,"line": 23,"col": 4,"docs": " Helper function to hash a pointer and mutate the strategy if needed.\n","fields": [6930,6931,6932]},{"file": 48,"line": 1,"col": 0},{"file": 48,"line": 200,"col": 0,"fields": [6933]},{"file": 48,"line": 184,"col": 0},{"file": 48,"line": 186,"col": 0,"fields": [6934]},{"file": 48,"line": 0,"col": 0},{"file": 48,"line": 207,"col": 0,"fields": [6935]},{"file": 48,"line": 193,"col": 0,"fields": [6936]},{"file": 48,"line": 4,"col": 0},{"file": 48,"line": 2,"col": 0},{"file": 48,"line": 183,"col": 0},{"file": 48,"line": 3,"col": 0},{"file": 49,"line": 1,"col": 0},{"file": 49,"line": 123,"col": 0},{"file": 49,"line": 26,"col": 0},{"file": 49,"line": 0,"col": 0},{"file": 49,"line": 2,"col": 0},{"file": 49,"line": 124,"col": 0},{"file": 49,"line": 3,"col": 0},{"file": 50,"line": 138,"col": 4,"fields": [6937]},{"file": 50,"line": 19,"col": 4},{"file": 50,"line": 176,"col": 4,"fields": [6938]},{"file": 50,"line": 716,"col": 4,"docs": " If the path is a file in the current directory (no directory component)\n then returns null\n","fields": [6939]},{"file": 50,"line": 964,"col": 4,"docs": " Returns the relative path from `from` to `to`. If `from` and `to` each\n resolve to the same path (after calling `resolve` on each), a zero-length\n string is returned.\n On Windows this canonicalizes the drive to a capital letter and paths to `\\\\`.\n","fields": [6940,6941,6942]},{"file": 50,"line": 570,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another.\n It resolves \".\" and \"..\".\n The result does not have a trailing path separator.\n If all paths are relative it uses the current working directory as a starting point.\n Note: all usage of this function should be audited due to the existence of symlinks.\n Without performing actual syscalls, resolving `..` could be incorrect.\n","fields": [6943,6944]},{"file": 50,"line": 877,"col": 4,"fields": [6945]},{"file": 50,"line": 724,"col": 4,"fields": [6946]},{"file": 50,"line": 157,"col": 4,"fields": [6947]},{"file": 50,"line": 758,"col": 4,"fields": [6948]},{"file": 50,"line": 229,"col": 4,"fields": [6949]},{"file": 50,"line": 972,"col": 4,"fields": [6950,6951,6952]},{"file": 50,"line": 130,"col": 4,"fields": [6953]},{"file": 50,"line": 20,"col": 4},{"file": 50,"line": 78,"col": 4,"docs": " Naively combines a series of paths with the native path seperator.\n Allocates memory for the result, which must be freed by the caller.\n","fields": [6954,6955]},{"file": 50,"line": 15,"col": 4},{"file": 50,"line": 308,"col": 4,"fields": [6956]},{"file": 50,"line": 389,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another.\n It resolves \".\" and \"..\".\n The result does not have a trailing path separator.\n If all paths are relative it uses the current working directory as a starting point.\n Each drive has its own current working directory.\n Path separators are canonicalized to '\\\\' and drives are canonicalized to capital letters.\n Note: all usage of this function should be audited due to the existence of symlinks.\n Without performing actual syscalls, resolving `..` could be incorrect.\n","fields": [6957,6958]},{"file": 50,"line": 217,"col": 4},{"file": 50,"line": 316,"col": 4,"fields": [6959]},{"file": 50,"line": 17,"col": 4},{"file": 50,"line": 23,"col": 4,"fields": [6960]},{"file": 50,"line": 1045,"col": 4,"fields": [6961,6962,6963]},{"file": 50,"line": 373,"col": 4,"docs": " On Windows, this calls `resolveWindows` and on POSIX it calls `resolvePosix`.\n","fields": [6964,6965]},{"file": 50,"line": 13,"col": 4},{"file": 50,"line": 14,"col": 4},{"file": 50,"line": 74,"col": 4},{"file": 50,"line": 21,"col": 4},{"file": 50,"line": 0,"col": 0},{"file": 50,"line": 361,"col": 0,"fields": [6966,6967]},{"file": 50,"line": 8,"col": 0},{"file": 50,"line": 213,"col": 0,"fields": [6968,6969]},{"file": 50,"line": 2,"col": 0},{"file": 50,"line": 4,"col": 0},{"file": 50,"line": 710,"col": 0,"fields": [6970]},{"file": 50,"line": 956,"col": 0,"fields": [6971,6972]},{"file": 50,"line": 7,"col": 0},{"file": 50,"line": 840,"col": 0,"fields": [6973,6974]},{"file": 50,"line": 6,"col": 0},{"file": 50,"line": 209,"col": 0,"fields": [6975,6976]},{"file": 50,"line": 948,"col": 0,"fields": [6977,6978]},{"file": 50,"line": 95,"col": 0,"fields": [6979,6980]},{"file": 50,"line": 832,"col": 0,"fields": [6981,6982]},{"file": 50,"line": 320,"col": 0,"fields": [6983,6984]},{"file": 50,"line": 1139,"col": 0,"fields": [6985,6986,6987]},{"file": 50,"line": 331,"col": 0,"fields": [6988,6989,6990]},{"file": 50,"line": 354,"col": 0,"fields": [6991]},{"file": 50,"line": 88,"col": 0,"fields": [6992,6993]},{"file": 50,"line": 1,"col": 0},{"file": 50,"line": 706,"col": 0,"fields": [6994]},{"file": 50,"line": 10,"col": 0},{"file": 50,"line": 1134,"col": 0,"fields": [6995,6996,6997]},{"file": 50,"line": 9,"col": 0},{"file": 50,"line": 11,"col": 0},{"file": 50,"line": 952,"col": 0,"fields": [6998,6999]},{"file": 50,"line": 3,"col": 0},{"file": 50,"line": 5,"col": 0},{"file": 51,"line": 6,"col": 4},{"file": 51,"line": 1,"col": 0},{"file": 51,"line": 0,"col": 0},{"file": 51,"line": 3,"col": 0},{"file": 51,"line": 4,"col": 0},{"file": 51,"line": 2,"col": 0},{"file": 11,"line": 316,"col": 20,"docs": " This data structure is used by the Zig language code generation and\n therefore must be kept in sync with the compiler implementation.\n"},{"file": 52,"line": 4,"col": 0},{"file": 52,"line": 3,"col": 0},{"file": 52,"line": 5,"col": 0},{"file": 52,"line": 2,"col": 0},{"file": 17,"line": 430,"col": 4},{"file": 17,"line": 431,"col": 4},{"file": 17,"line": 432,"col": 4},{"file": 17,"line": 433,"col": 4},{"file": 17,"line": 434,"col": 4},{"file": 17,"line": 435,"col": 4},{"file": 17,"line": 436,"col": 4},{"file": 17,"line": 437,"col": 4},{"file": 17,"line": 439,"col": 4,"docs": " This error occurs when no global event loop is configured,\n and reading from the file descriptor would block.\n"},{"file": 17,"line": 2766,"col": 4,"docs": " The Operating System returned an undocumented error code.\n This error is in theory not possible, but it would be better\n to handle this error than to invoke undefined behavior.\n"},{"file": 17,"line": 271,"col": 4},{"file": 17,"line": 272,"col": 4},{"file": 17,"line": 273,"col": 4},{"file": 17,"line": 274,"col": 4},{"file": 17,"line": 275,"col": 4},{"file": 17,"line": 276,"col": 4},{"file": 17,"line": 278,"col": 4,"docs": " This error occurs when no global event loop is configured,\n and reading from the file descriptor would block.\n"},{"file": 17,"line": 2405,"col": 28},{"file": 15,"line": 16,"col": 28},{"file": 0,"line": 154,"col": 32},{"file": 31,"line": 42,"col": 68},{"file": 46,"line": 442,"col": 4},{"file": 46,"line": 443,"col": 4},{"file": 46,"line": 24,"col": 4},{"file": 46,"line": 25,"col": 4},{"file": 46,"line": 27,"col": 4,"docs": " When any of the path components can not be found or the file component can not\n be found. Some operating systems distinguish between path components not found and\n file components not found, but they are collapsed into FileNotFound to gain\n consistency across operating systems.\n"},{"file": 46,"line": 33,"col": 4},{"file": 46,"line": 34,"col": 4},{"file": 46,"line": 35,"col": 4},{"file": 46,"line": 37,"col": 4,"docs": " On Windows, file paths must be valid Unicode.\n"},{"file": 46,"line": 40,"col": 4,"docs": " On Windows, file paths cannot contain these characters:\n '/', '*', '?', '\"', '<', '>', '|'\n"},{"file": 46,"line": 44,"col": 4},{"file": 17,"line": 614,"col": 4},{"file": 17,"line": 615,"col": 4},{"file": 17,"line": 616,"col": 4},{"file": 17,"line": 617,"col": 4},{"file": 17,"line": 623,"col": 4,"docs": " Insufficient kernel memory was available, or\n the named file is a FIFO and per-user hard limit on\n memory allocation for pipes has been reached.\n"},{"file": 17,"line": 628,"col": 4,"docs": " The file is too large to be opened. This error is unreachable\n for 64-bit targets, as well as when opening directories.\n"},{"file": 17,"line": 632,"col": 4,"docs": " The path refers to directory but the `O_DIRECTORY` flag was not provided.\n"},{"file": 17,"line": 635,"col": 4,"docs": " A new path cannot be created because the device has no room for the new file.\n This error is only reachable when the `O_CREAT` flag is provided.\n"},{"file": 17,"line": 639,"col": 4,"docs": " A component used as a directory in the path was not, in fact, a directory, or\n `O_DIRECTORY` was specified and the path was not a directory.\n"},{"file": 17,"line": 645,"col": 4},{"file": 17,"line": 2008,"col": 29},{"file": 16,"line": 314,"col": 48},{"file": 17,"line": 2196,"col": 4,"docs": " The underlying filesystem of the specified file does not support memory mapping.\n"},{"file": 17,"line": 2199,"col": 4,"docs": " A file descriptor refers to a non-regular file. Or a file mapping was requested,\n but the file descriptor is not open for reading. Or `MAP_SHARED` was requested\n and `PROT_WRITE` is set, but the file descriptor is not open in `O_RDWR` mode.\n Or `PROT_WRITE` is set, but the file is append-only.\n"},{"file": 17,"line": 2205,"col": 4,"docs": " The `prot` argument asks for `PROT_EXEC` but the mapped area belongs to a file on\n a filesystem that was mounted no-exec.\n"},{"file": 17,"line": 2208,"col": 4},{"file": 17,"line": 2209,"col": 4},{"file": 18,"line": 1111,"col": 20},{"file": 18,"line": 1201,"col": 44},{"file": 18,"line": 1718,"col": 60},{"file": 13,"line": 59,"col": 48},{"file": 16,"line": 718,"col": 45},{"file": 33,"line": 121,"col": 4},{"file": 33,"line": 122,"col": 4},{"file": 33,"line": 124,"col": 4,"docs": " See https://github.com/ziglang/zig/issues/1774\n"},{"file": 0,"line": 212,"col": 28},{"file": 17,"line": 613,"col": 4},{"file": 17,"line": 618,"col": 4},{"file": 17,"line": 620,"col": 4,"docs": " The path exceeded `MAX_PATH_BYTES` bytes.\n"},{"file": 17,"line": 643,"col": 4,"docs": " The path already exists and the `O_CREAT` and `O_EXCL` flags were provided.\n"},{"file": 17,"line": 3175,"col": 4,"docs": " The system is not configured to allow yielding\n"},{"file": 32,"line": 111,"col": 24},{"file": 22,"line": 1109,"col": 4,"docs": " As much as possible was written to the buffer, but it was too small to fit all the printed bytes.\n"},{"file": 11,"line": 358,"col": 21,"name": "msg"},{"file": 11,"line": 358,"col": 38,"name": "error_return_trace"},{"file": 18,"line": 222,"col": 18,"name": "trace"},{"file": 18,"line": 222,"col": 53,"name": "first_trace_addr"},{"file": 18,"line": 222,"col": 79,"name": "format","comptime": true},{"file": 18,"line": 222,"col": 108,"name": "args","varArgs": true},{"file": 31,"line": 429,"col": 16,"name": "buffer"},{"file": 18,"line": 209,"col": 14,"name": "ok"},{"file": 0,"line": 235,"col": 20,"name": "backing_allocator"},{"file": 0,"line": 377,"col": 25,"name": "self"},{"file": 0,"line": 377,"col": 38,"name": "frame_size"},{"file": 14,"line": 25,"col": 19,"name": "expected"},{"file": 14,"line": 25,"col": 34,"name": "actual"},{"file": 0,"line": 356,"col": 26,"name": "self"},{"file": 0,"line": 356,"col": 39,"name": "memsize"},{"file": 0,"line": 457,"col": 25,"name": "self"},{"file": 15,"line": 79,"col": 18,"name": "self"},{"file": 15,"line": 79,"col": 36,"name": "T","comptime": true},{"file": 14,"line": 147,"col": 14,"name": "ok"},{"file": 15,"line": 103,"col": 17,"name": "self"},{"file": 15,"line": 103,"col": 35,"name": "T","comptime": true},{"file": 15,"line": 103,"col": 53,"name": "n"},{"file": 15,"line": 230,"col": 16,"name": "self"},{"file": 15,"line": 230,"col": 34,"name": "memory"},{"file": 0,"line": 448,"col": 22,"name": "self"},{"file": 0,"line": 448,"col": 35,"name": "index"},{"file": 15,"line": 87,"col": 19,"name": "self"},{"file": 15,"line": 87,"col": 37,"name": "ptr"},{"file": 15,"line": 148,"col": 19,"name": "self"},{"file": 15,"line": 148,"col": 37,"name": "old_mem"},{"file": 15,"line": 148,"col": 51,"name": "new_n"},{"file": 0,"line": 145,"col": 34,"name": "payload"},{"file": 0,"line": 152,"col": 28,"name": "self"},{"file": 0,"line": 126,"col": 29,"name": "memsize"},{"file": 0,"line": 161,"col": 31,"name": "self"},{"file": 0,"line": 664,"col": 17,"name": "allocator"},{"file": 15,"line": 190,"col": 18,"name": "self"},{"file": 15,"line": 190,"col": 36,"name": "old_mem"},{"file": 15,"line": 190,"col": 50,"name": "new_n"},{"file": 0,"line": 692,"col": 24,"name": "allocator"},{"file": 0,"line": 692,"col": 47,"name": "alignment","comptime": true},{"file": 15,"line": 108,"col": 8,"name": "self"},{"file": 15,"line": 109,"col": 8,"name": "T","comptime": true},{"file": 15,"line": 111,"col": 8,"docs": " null means naturally aligned\n","name": "alignment","comptime": true},{"file": 15,"line": 112,"col": 8,"name": "n"},{"file": 31,"line": 169,"col": 15,"name": "allocator"},{"file": 31,"line": 169,"col": 38,"name": "old_mem_unaligned"},{"file": 31,"line": 169,"col": 63,"name": "old_align"},{"file": 31,"line": 169,"col": 79,"name": "new_size"},{"file": 31,"line": 169,"col": 96,"name": "new_align"},{"file": 31,"line": 129,"col": 14,"name": "allocator"},{"file": 31,"line": 129,"col": 37,"name": "old_mem_unaligned"},{"file": 31,"line": 129,"col": 62,"name": "old_align"},{"file": 31,"line": 129,"col": 78,"name": "new_size"},{"file": 31,"line": 129,"col": 95,"name": "new_align"},{"file": 31,"line": 42,"col": 13,"name": "allocator"},{"file": 31,"line": 42,"col": 36,"name": "n"},{"file": 31,"line": 42,"col": 46,"name": "alignment"},{"file": 16,"line": 255,"col": 11,"name": "x"},{"file": 16,"line": 255,"col": 19,"name": "y"},{"file": 17,"line": 2254,"col": 14,"name": "memory"},{"file": 35,"line": 338,"col": 21,"name": "file"},{"file": 8,"line": 37,"col": 21,"name": "self"},{"file": 8,"line": 37,"col": 34,"name": "format","comptime": true},{"file": 8,"line": 37,"col": 63,"name": "args","varArgs": true},{"file": 18,"line": 183,"col": 22,"name": "stack_trace"},{"file": 18,"line": 91,"col": 29,"name": "start_addr"},{"file": 31,"line": 455,"col": 15,"name": "allocator"},{"file": 31,"line": 455,"col": 38,"name": "old_mem"},{"file": 31,"line": 455,"col": 53,"name": "old_align"},{"file": 31,"line": 455,"col": 69,"name": "new_size"},{"file": 31,"line": 455,"col": 86,"name": "new_align"},{"file": 15,"line": 1507,"col": 20,"name": "addr"},{"file": 15,"line": 1507,"col": 33,"name": "alignment"},{"file": 31,"line": 440,"col": 13,"name": "allocator"},{"file": 31,"line": 440,"col": 36,"name": "n"},{"file": 31,"line": 440,"col": 46,"name": "alignment"},{"file": 31,"line": 477,"col": 14,"name": "allocator"},{"file": 31,"line": 477,"col": 37,"name": "old_mem"},{"file": 31,"line": 477,"col": 52,"name": "old_align"},{"file": 31,"line": 477,"col": 68,"name": "new_size"},{"file": 31,"line": 477,"col": 85,"name": "new_align"},{"file": 0,"line": 391,"col": 19,"name": "allocator"},{"file": 0,"line": 391,"col": 42,"name": "old_mem"},{"file": 0,"line": 391,"col": 57,"name": "old_align"},{"file": 0,"line": 391,"col": 73,"name": "new_size"},{"file": 0,"line": 391,"col": 90,"name": "new_align"},{"file": 0,"line": 433,"col": 18,"name": "allocator"},{"file": 0,"line": 433,"col": 41,"name": "old_mem"},{"file": 0,"line": 433,"col": 56,"name": "old_align"},{"file": 0,"line": 433,"col": 72,"name": "new_size"},{"file": 0,"line": 433,"col": 89,"name": "new_align"},{"file": 0,"line": 92,"col": 26,"name": "self","comptime": true},{"file": 0,"line": 92,"col": 53,"name": "ok"},{"file": 0,"line": 344,"col": 25,"name": "T","comptime": true},{"file": 0,"line": 344,"col": 43,"name": "x"},{"file": 18,"line": 213,"col": 13,"name": "format","comptime": true},{"file": 18,"line": 213,"col": 42,"name": "args","varArgs": true},{"file": 16,"line": 306,"col": 11,"name": "x"},{"file": 16,"line": 306,"col": 19,"name": "y"},{"file": 0,"line": 337,"col": 32,"name": "T","comptime": true},{"file": 0,"line": 337,"col": 50,"name": "value"},{"file": 0,"line": 350,"col": 30,"name": "size"},{"file": 15,"line": 160,"col": 8,"name": "self"},{"file": 15,"line": 161,"col": 8,"name": "old_mem"},{"file": 15,"line": 162,"col": 8,"name": "new_alignment","comptime": true},{"file": 15,"line": 163,"col": 8,"name": "new_n"},{"file": 16,"line": 751,"col": 20,"name": "v"},{"file": 15,"line": 202,"col": 8,"name": "self"},{"file": 15,"line": 203,"col": 8,"name": "old_mem"},{"file": 15,"line": 204,"col": 8,"name": "new_alignment","comptime": true},{"file": 15,"line": 205,"col": 8,"name": "new_n"},{"file": 16,"line": 314,"col": 11,"name": "T","comptime": true},{"file": 16,"line": 314,"col": 29,"name": "a"},{"file": 16,"line": 314,"col": 35,"name": "b"},{"file": 17,"line": 2217,"col": 4,"name": "ptr"},{"file": 17,"line": 2218,"col": 4,"name": "length"},{"file": 17,"line": 2219,"col": 4,"name": "prot"},{"file": 17,"line": 2220,"col": 4,"name": "flags"},{"file": 17,"line": 2221,"col": 4,"name": "fd"},{"file": 17,"line": 2222,"col": 4,"name": "offset"},{"file": 28,"line": 23,"col": 16,"name": "rc"},{"file": 35,"line": 139,"col": 22,"name": "handle"},{"file": 35,"line": 379,"col": 19,"name": "out_stream"},{"file": 35,"line": 379,"col": 40,"name": "bytes"},{"file": 22,"line": 91,"col": 4,"name": "context"},{"file": 22,"line": 92,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 93,"col": 4,"name": "output"},{"file": 22,"line": 94,"col": 4,"name": "fmt","comptime": true},{"file": 22,"line": 95,"col": 4,"name": "args","varArgs": true},{"file": 10,"line": 522,"col": 16,"name": "key"},{"file": 10,"line": 530,"col": 15,"name": "a"},{"file": 10,"line": 530,"col": 21,"name": "b"},{"file": 18,"line": 836,"col": 25,"name": "allocator"},{"file": 9,"line": 458,"col": 20,"name": "self"},{"file": 9,"line": 426,"col": 17,"name": "self"},{"file": 18,"line": 1096,"col": 26,"name": "allocator"},{"file": 18,"line": 1215,"col": 23,"name": "lhs"},{"file": 18,"line": 1215,"col": 41,"name": "rhs"},{"file": 27,"line": 111,"col": 12,"name": "T","comptime": true},{"file": 27,"line": 111,"col": 30,"name": "items"},{"file": 27,"line": 111,"col": 42,"name": "lessThan"},{"file": 10,"line": 94,"col": 20,"name": "allocator"},{"file": 18,"line": 257,"col": 4,"name": "stack_trace"},{"file": 18,"line": 258,"col": 4,"name": "out_stream"},{"file": 18,"line": 259,"col": 4,"name": "allocator"},{"file": 18,"line": 260,"col": 4,"name": "debug_info"},{"file": 18,"line": 261,"col": 4,"name": "tty_color"},{"file": 18,"line": 348,"col": 28,"name": "debug_info"},{"file": 18,"line": 348,"col": 52,"name": "out_stream"},{"file": 18,"line": 348,"col": 69,"name": "address"},{"file": 18,"line": 348,"col": 85,"name": "tty_color"},{"file": 18,"line": 692,"col": 29,"name": "di"},{"file": 18,"line": 692,"col": 45,"name": "out_stream"},{"file": 18,"line": 692,"col": 62,"name": "address"},{"file": 18,"line": 692,"col": 78,"name": "tty_color"},{"file": 18,"line": 674,"col": 22,"name": "symbols"},{"file": 18,"line": 674,"col": 52,"name": "address"},{"file": 15,"line": 364,"col": 20,"name": "T","comptime": true},{"file": 15,"line": 364,"col": 38,"name": "ptr"},{"file": 50,"line": 848,"col": 16,"name": "path"},{"file": 18,"line": 1705,"col": 26,"name": "di"},{"file": 18,"line": 1705,"col": 42,"name": "symbol"},{"file": 18,"line": 1705,"col": 63,"name": "target_address"},{"file": 10,"line": 127,"col": 24,"name": "self"},{"file": 10,"line": 127,"col": 37,"name": "key"},{"file": 10,"line": 216,"col": 19,"name": "hm"},{"file": 10,"line": 216,"col": 36,"name": "key"},{"file": 10,"line": 308,"col": 38,"name": "hm"},{"file": 10,"line": 289,"col": 24,"name": "self"},{"file": 10,"line": 173,"col": 31,"name": "self"},{"file": 10,"line": 173,"col": 44,"name": "new_capacity"},{"file": 10,"line": 299,"col": 24,"name": "hm"},{"file": 10,"line": 299,"col": 35,"name": "capacity"},{"file": 10,"line": 321,"col": 23,"name": "self"},{"file": 10,"line": 321,"col": 36,"name": "orig_key"},{"file": 21,"line": 83,"col": 28,"name": "allocator"},{"file": 21,"line": 83,"col": 55,"name": "path"},{"file": 21,"line": 83,"col": 73,"name": "A","comptime": true},{"file": 35,"line": 28,"col": 20,"name": "path"},{"file": 35,"line": 215,"col": 21,"name": "self"},{"file": 35,"line": 164,"col": 17,"name": "self"},{"file": 16,"line": 718,"col": 12,"name": "T","comptime": true},{"file": 16,"line": 718,"col": 30,"name": "x"},{"file": 35,"line": 331,"col": 20,"name": "file"},{"file": 13,"line": 57,"col": 25,"name": "self"},{"file": 13,"line": 57,"col": 38,"name": "buf"},{"file": 13,"line": 45,"col": 24,"name": "self"},{"file": 13,"line": 45,"col": 37,"name": "buffer"},{"file": 10,"line": 232,"col": 22,"name": "hm"},{"file": 10,"line": 232,"col": 33,"name": "key"},{"file": 15,"line": 349,"col": 11,"name": "T","comptime": true},{"file": 15,"line": 349,"col": 29,"name": "a"},{"file": 15,"line": 349,"col": 43,"name": "b"},{"file": 18,"line": 2303,"col": 24,"name": "ptr"},{"file": 18,"line": 2303,"col": 43,"name": "is_64"},{"file": 15,"line": 564,"col": 26,"name": "T","comptime": true},{"file": 15,"line": 564,"col": 44,"name": "bytes"},{"file": 18,"line": 2285,"col": 14,"name": "ptr"},{"file": 18,"line": 2285,"col": 33,"name": "T","comptime": true},{"file": 18,"line": 2285,"col": 51,"name": "endian"},{"file": 18,"line": 2293,"col": 15,"name": "ptr"},{"file": 18,"line": 2299,"col": 21,"name": "ptr"},{"file": 7,"line": 35,"col": 20,"name": "allocator"},{"file": 18,"line": 1269,"col": 25,"name": "self"},{"file": 7,"line": 130,"col": 22,"name": "self"},{"file": 7,"line": 130,"col": 35,"name": "item"},{"file": 7,"line": 209,"col": 22,"name": "self"},{"file": 7,"line": 198,"col": 30,"name": "self"},{"file": 7,"line": 198,"col": 43,"name": "new_capacity"},{"file": 7,"line": 85,"col": 24,"name": "self"},{"file": 7,"line": 215,"col": 36,"name": "self"},{"file": 18,"line": 2320,"col": 17,"name": "ptr"},{"file": 18,"line": 1438,"col": 16,"name": "is_stmt"},{"file": 18,"line": 1438,"col": 31,"name": "include_dirs"},{"file": 18,"line": 1438,"col": 65,"name": "file_entries"},{"file": 18,"line": 1438,"col": 102,"name": "target_address"},{"file": 7,"line": 56,"col": 28,"name": "self"},{"file": 47,"line": 28,"col": 22,"name": "T","comptime": true},{"file": 47,"line": 28,"col": 40,"name": "ptr"},{"file": 18,"line": 1460,"col": 26,"name": "self"},{"file": 50,"line": 84,"col": 17,"name": "allocator"},{"file": 50,"line": 84,"col": 40,"name": "paths"},{"file": 50,"line": 33,"col": 11,"name": "allocator"},{"file": 50,"line": 33,"col": 34,"name": "separator"},{"file": 50,"line": 33,"col": 49,"name": "paths"},{"file": 15,"line": 249,"col": 12,"name": "T","comptime": true},{"file": 15,"line": 249,"col": 30,"name": "dest"},{"file": 15,"line": 249,"col": 41,"name": "source"},{"file": 47,"line": 88,"col": 22,"name": "T","comptime": true},{"file": 47,"line": 88,"col": 40,"name": "ptr"},{"file": 18,"line": 780,"col": 4,"name": "out_stream"},{"file": 18,"line": 781,"col": 4,"name": "line_info"},{"file": 18,"line": 782,"col": 4,"name": "address"},{"file": 18,"line": 783,"col": 4,"name": "symbol_name"},{"file": 18,"line": 784,"col": 4,"name": "compile_unit_name"},{"file": 18,"line": 785,"col": 4,"name": "tty_color"},{"file": 18,"line": 786,"col": 4,"name": "printLineFromFile","comptime": true},{"file": 18,"line": 1173,"col": 26,"name": "out_stream"},{"file": 18,"line": 1173,"col": 43,"name": "line_info"},{"file": 35,"line": 313,"col": 16,"name": "self"},{"file": 35,"line": 313,"col": 28,"name": "buffer"},{"file": 8,"line": 41,"col": 25,"name": "self"},{"file": 8,"line": 41,"col": 38,"name": "byte"},{"file": 8,"line": 25,"col": 21,"name": "self"},{"file": 8,"line": 25,"col": 34,"name": "bytes"},{"file": 18,"line": 1411,"col": 14,"name": "self"},{"file": 18,"line": 316,"col": 30,"name": "out_stream"},{"file": 18,"line": 316,"col": 47,"name": "debug_info"},{"file": 18,"line": 316,"col": 71,"name": "tty_color"},{"file": 18,"line": 316,"col": 88,"name": "start_addr"},{"file": 18,"line": 280,"col": 16,"name": "first_addr"},{"file": 18,"line": 296,"col": 12,"name": "self"},{"file": 15,"line": 1528,"col": 21,"name": "addr"},{"file": 15,"line": 1528,"col": 34,"name": "alignment"},{"file": 0,"line": 169,"col": 31,"name": "self"},{"file": 0,"line": 174,"col": 32,"name": "self"},{"file": 0,"line": 174,"col": 46,"name": "start"},{"file": 0,"line": 174,"col": 60,"name": "end"},{"file": 0,"line": 246,"col": 24,"name": "self"},{"file": 0,"line": 246,"col": 37,"name": "memsize"},{"file": 0,"line": 239,"col": 21,"name": "self"},{"file": 0,"line": 239,"col": 34,"name": "memsize"},{"file": 0,"line": 130,"col": 24,"name": "raw_bytes"},{"file": 0,"line": 165,"col": 33,"name": "self"},{"file": 0,"line": 291,"col": 20,"name": "self"},{"file": 0,"line": 291,"col": 33,"name": "node"},{"file": 0,"line": 291,"col": 47,"name": "target_size"},{"file": 0,"line": 311,"col": 16,"name": "self"},{"file": 0,"line": 311,"col": 29,"name": "target"},{"file": 0,"line": 97,"col": 26,"name": "self","comptime": true},{"file": 0,"line": 97,"col": 53,"name": "ok"},{"file": 17,"line": 2774,"col": 23,"name": "err"},{"file": 35,"line": 319,"col": 17,"name": "self"},{"file": 35,"line": 319,"col": 29,"name": "bytes"},{"file": 22,"line": 319,"col": 4,"name": "value"},{"file": 22,"line": 320,"col": 4,"name": "fmt","comptime": true},{"file": 22,"line": 321,"col": 4,"name": "options"},{"file": 22,"line": 322,"col": 4,"name": "context"},{"file": 22,"line": 323,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 324,"col": 4,"name": "output"},{"file": 22,"line": 325,"col": 4,"name": "max_depth"},{"file": 10,"line": 536,"col": 21,"name": "K","comptime": true},{"file": 31,"line": 346,"col": 16,"name": "child_allocator"},{"file": 18,"line": 1211,"col": 15,"name": "self"},{"file": 15,"line": 1221,"col": 12,"name": "T","comptime": true},{"file": 15,"line": 1221,"col": 30,"name": "a"},{"file": 15,"line": 1221,"col": 37,"name": "b"},{"file": 27,"line": 47,"col": 12,"name": "size2"},{"file": 27,"line": 47,"col": 26,"name": "min_level"},{"file": 27,"line": 82,"col": 16,"name": "self"},{"file": 27,"line": 66,"col": 17,"name": "self"},{"file": 27,"line": 33,"col": 14,"name": "self"},{"file": 27,"line": 963,"col": 8,"name": "T","comptime": true},{"file": 27,"line": 963,"col": 26,"name": "items"},{"file": 27,"line": 963,"col": 38,"name": "lessThan"},{"file": 27,"line": 963,"col": 74,"name": "order"},{"file": 27,"line": 963,"col": 89,"name": "x"},{"file": 27,"line": 963,"col": 99,"name": "y"},{"file": 27,"line": 97,"col": 14,"name": "self"},{"file": 27,"line": 61,"col": 13,"name": "self"},{"file": 27,"line": 905,"col": 13,"name": "T","comptime": true},{"file": 27,"line": 905,"col": 31,"name": "from"},{"file": 27,"line": 905,"col": 42,"name": "A"},{"file": 27,"line": 905,"col": 52,"name": "B"},{"file": 27,"line": 905,"col": 62,"name": "lessThan"},{"file": 27,"line": 905,"col": 88,"name": "into"},{"file": 27,"line": 26,"col": 12,"name": "start"},{"file": 27,"line": 26,"col": 26,"name": "end"},{"file": 27,"line": 86,"col": 17,"name": "self"},{"file": 15,"line": 1257,"col": 14,"name": "T","comptime": true},{"file": 15,"line": 1257,"col": 32,"name": "items"},{"file": 15,"line": 1257,"col": 44,"name": "amount"},{"file": 27,"line": 935,"col": 17,"name": "T","comptime": true},{"file": 27,"line": 935,"col": 35,"name": "items"},{"file": 27,"line": 935,"col": 47,"name": "A"},{"file": 27,"line": 935,"col": 57,"name": "B"},{"file": 27,"line": 935,"col": 67,"name": "lessThan"},{"file": 27,"line": 935,"col": 93,"name": "cache"},{"file": 53,"line": 14,"col": 12,"name": "x"},{"file": 27,"line": 841,"col": 19,"name": "T","comptime": true},{"file": 27,"line": 841,"col": 37,"name": "items"},{"file": 27,"line": 841,"col": 49,"name": "value"},{"file": 27,"line": 841,"col": 59,"name": "range"},{"file": 27,"line": 841,"col": 73,"name": "lessThan"},{"file": 27,"line": 841,"col": 99,"name": "unique"},{"file": 27,"line": 827,"col": 21,"name": "T","comptime": true},{"file": 27,"line": 827,"col": 39,"name": "items"},{"file": 27,"line": 827,"col": 51,"name": "value"},{"file": 27,"line": 827,"col": 61,"name": "range"},{"file": 27,"line": 827,"col": 75,"name": "lessThan"},{"file": 27,"line": 827,"col": 101,"name": "unique"},{"file": 27,"line": 804,"col": 13,"name": "T","comptime": true},{"file": 27,"line": 804,"col": 31,"name": "items"},{"file": 27,"line": 804,"col": 43,"name": "start1"},{"file": 27,"line": 804,"col": 58,"name": "start2"},{"file": 27,"line": 804,"col": 73,"name": "block_size"},{"file": 27,"line": 869,"col": 15,"name": "T","comptime": true},{"file": 27,"line": 869,"col": 33,"name": "items"},{"file": 27,"line": 869,"col": 45,"name": "value"},{"file": 27,"line": 869,"col": 55,"name": "range"},{"file": 27,"line": 869,"col": 69,"name": "lessThan"},{"file": 27,"line": 777,"col": 17,"name": "T","comptime": true},{"file": 27,"line": 777,"col": 35,"name": "items"},{"file": 27,"line": 777,"col": 47,"name": "A"},{"file": 27,"line": 777,"col": 57,"name": "B"},{"file": 27,"line": 777,"col": 67,"name": "lessThan"},{"file": 27,"line": 777,"col": 93,"name": "buffer"},{"file": 27,"line": 735,"col": 16,"name": "T","comptime": true},{"file": 27,"line": 735,"col": 34,"name": "items"},{"file": 27,"line": 735,"col": 46,"name": "A_arg"},{"file": 27,"line": 735,"col": 60,"name": "B_arg"},{"file": 27,"line": 735,"col": 74,"name": "lessThan"},{"file": 27,"line": 8,"col": 21,"name": "T","comptime": true},{"file": 27,"line": 8,"col": 39,"name": "items"},{"file": 27,"line": 8,"col": 51,"name": "lessThan"},{"file": 27,"line": 813,"col": 20,"name": "T","comptime": true},{"file": 27,"line": 813,"col": 38,"name": "items"},{"file": 27,"line": 813,"col": 50,"name": "value"},{"file": 27,"line": 813,"col": 60,"name": "range"},{"file": 27,"line": 813,"col": 74,"name": "lessThan"},{"file": 27,"line": 813,"col": 100,"name": "unique"},{"file": 27,"line": 855,"col": 20,"name": "T","comptime": true},{"file": 27,"line": 855,"col": 38,"name": "items"},{"file": 27,"line": 855,"col": 50,"name": "value"},{"file": 27,"line": 855,"col": 60,"name": "range"},{"file": 27,"line": 855,"col": 74,"name": "lessThan"},{"file": 27,"line": 855,"col": 100,"name": "unique"},{"file": 33,"line": 130,"col": 22,"name": "allocator"},{"file": 33,"line": 130,"col": 49,"name": "key"},{"file": 35,"line": 170,"col": 17,"name": "self"},{"file": 15,"line": 358,"col": 11,"name": "T","comptime": true},{"file": 15,"line": 358,"col": 29,"name": "ptr"},{"file": 50,"line": 856,"col": 21,"name": "path"},{"file": 10,"line": 388,"col": 23,"name": "hm"},{"file": 10,"line": 388,"col": 33,"name": "key"},{"file": 10,"line": 403,"col": 22,"name": "hm"},{"file": 10,"line": 403,"col": 32,"name": "key"},{"file": 10,"line": 407,"col": 26,"name": "hm"},{"file": 10,"line": 407,"col": 36,"name": "i"},{"file": 17,"line": 2750,"col": 19,"name": "file_path"},{"file": 35,"line": 38,"col": 21,"name": "path"},{"file": 35,"line": 247,"col": 16,"name": "self"},{"file": 17,"line": 88,"col": 13,"name": "fd"},{"file": 35,"line": 365,"col": 18,"name": "in_stream"},{"file": 35,"line": 365,"col": 38,"name": "buffer"},{"file": 13,"line": 31,"col": 20,"name": "self"},{"file": 13,"line": 31,"col": 33,"name": "buffer"},{"file": 15,"line": 537,"col": 21,"name": "T","comptime": true},{"file": 15,"line": 537,"col": 39,"name": "bytes"},{"file": 15,"line": 603,"col": 20,"name": "T","comptime": true},{"file": 15,"line": 603,"col": 38,"name": "bytes"},{"file": 15,"line": 603,"col": 57,"name": "endian"},{"file": 7,"line": 79,"col": 21,"name": "self"},{"file": 17,"line": 287,"col": 12,"name": "fd"},{"file": 17,"line": 287,"col": 22,"name": "buf"},{"file": 0,"line": 190,"col": 24,"name": "self"},{"file": 0,"line": 215,"col": 31,"name": "self"},{"file": 0,"line": 215,"col": 48,"name": "ref"},{"file": 0,"line": 371,"col": 26,"name": "self"},{"file": 0,"line": 371,"col": 39,"name": "frame_size"},{"file": 0,"line": 198,"col": 27,"name": "self"},{"file": 0,"line": 198,"col": 44,"name": "node"},{"file": 0,"line": 138,"col": 31,"name": "addr"},{"file": 0,"line": 203,"col": 26,"name": "self"},{"file": 0,"line": 203,"col": 43,"name": "target"},{"file": 18,"line": 48,"col": 12,"name": "fmt","comptime": true},{"file": 18,"line": 48,"col": 38,"name": "args","varArgs": true},{"file": 17,"line": 449,"col": 13,"name": "fd"},{"file": 17,"line": 449,"col": 23,"name": "bytes"},{"file": 22,"line": 552,"col": 4,"name": "bytes"},{"file": 22,"line": 553,"col": 4,"name": "fmt","comptime": true},{"file": 22,"line": 554,"col": 4,"name": "options"},{"file": 22,"line": 555,"col": 4,"name": "context"},{"file": 22,"line": 556,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 557,"col": 4,"name": "output"},{"file": 10,"line": 538,"col": 16,"name": "key"},{"file": 31,"line": 408,"col": 15,"name": "allocator"},{"file": 31,"line": 408,"col": 38,"name": "old_mem"},{"file": 31,"line": 408,"col": 53,"name": "old_align"},{"file": 31,"line": 408,"col": 69,"name": "new_size"},{"file": 31,"line": 408,"col": 86,"name": "new_align"},{"file": 31,"line": 388,"col": 13,"name": "allocator"},{"file": 31,"line": 388,"col": 36,"name": "n"},{"file": 31,"line": 388,"col": 46,"name": "alignment"},{"file": 31,"line": 368,"col": 18,"name": "self"},{"file": 31,"line": 368,"col": 41,"name": "prev_len"},{"file": 31,"line": 368,"col": 58,"name": "minimum_size"},{"file": 4,"line": 77,"col": 23,"name": "list"},{"file": 4,"line": 77,"col": 36,"name": "new_node"},{"file": 31,"line": 419,"col": 14,"name": "allocator"},{"file": 31,"line": 419,"col": 37,"name": "old_mem"},{"file": 31,"line": 419,"col": 52,"name": "old_align"},{"file": 31,"line": 419,"col": 68,"name": "new_size"},{"file": 31,"line": 419,"col": 85,"name": "new_align"},{"file": 16,"line": 756,"col": 23,"name": "T","comptime": true},{"file": 16,"line": 756,"col": 41,"name": "value"},{"file": 15,"line": 1228,"col": 15,"name": "T","comptime": true},{"file": 15,"line": 1228,"col": 33,"name": "items"},{"file": 53,"line": 105,"col": 12,"name": "T","comptime": true},{"file": 53,"line": 105,"col": 30,"name": "value"},{"file": 27,"line": 887,"col": 14,"name": "T","comptime": true},{"file": 27,"line": 887,"col": 32,"name": "items"},{"file": 27,"line": 887,"col": 44,"name": "value"},{"file": 27,"line": 887,"col": 54,"name": "range"},{"file": 27,"line": 887,"col": 68,"name": "lessThan"},{"file": 17,"line": 880,"col": 14,"name": "key"},{"file": 15,"line": 381,"col": 12,"name": "allocator"},{"file": 15,"line": 381,"col": 35,"name": "T","comptime": true},{"file": 15,"line": 381,"col": 53,"name": "m"},{"file": 17,"line": 1512,"col": 14,"name": "handle"},{"file": 17,"line": 658,"col": 13,"name": "file_path"},{"file": 17,"line": 658,"col": 37,"name": "flags"},{"file": 17,"line": 658,"col": 49,"name": "perm"},{"file": 17,"line": 2010,"col": 13,"name": "fd"},{"file": 36,"line": 85,"col": 17,"name": "self"},{"file": 36,"line": 92,"col": 17,"name": "self"},{"file": 36,"line": 99,"col": 17,"name": "self"},{"file": 15,"line": 592,"col": 15,"name": "T","comptime": true},{"file": 15,"line": 592,"col": 33,"name": "bytes"},{"file": 15,"line": 592,"col": 78,"name": "endian"},{"file": 37,"line": 81,"col": 23,"name": "self"},{"file": 37,"line": 71,"col": 27,"name": "self"},{"file": 39,"line": 136,"col": 16,"name": "seed"},{"file": 48,"line": 166,"col": 16,"name": "hasher"},{"file": 48,"line": 166,"col": 29,"name": "key"},{"file": 39,"line": 162,"col": 17,"name": "self"},{"file": 22,"line": 471,"col": 4,"name": "value"},{"file": 22,"line": 472,"col": 4,"name": "fmt","comptime": true},{"file": 22,"line": 473,"col": 4,"name": "options"},{"file": 22,"line": 474,"col": 4,"name": "context"},{"file": 22,"line": 475,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 476,"col": 4,"name": "output"},{"file": 15,"line": 545,"col": 22,"name": "T","comptime": true},{"file": 15,"line": 545,"col": 40,"name": "bytes"},{"file": 51,"line": 29,"col": 17,"name": "iterations"},{"file": 32,"line": 10,"col": 13,"name": "nanoseconds"},{"file": 38,"line": 134,"col": 16,"name": "self"},{"file": 38,"line": 134,"col": 36,"name": "ptr"},{"file": 38,"line": 134,"col": 53,"name": "expected"},{"file": 38,"line": 128,"col": 18,"name": "self"},{"file": 38,"line": 128,"col": 38,"name": "ptr"},{"file": 39,"line": 41,"col": 16,"name": "seed"},{"file": 48,"line": 75,"col": 12,"name": "hasher"},{"file": 48,"line": 75,"col": 25,"name": "key"},{"file": 48,"line": 75,"col": 35,"name": "strat","comptime": true},{"file": 39,"line": 73,"col": 17,"name": "self"},{"file": 39,"line": 73,"col": 41,"name": "b"},{"file": 22,"line": 493,"col": 4,"name": "value"},{"file": 22,"line": 494,"col": 4,"name": "fmt","comptime": true},{"file": 22,"line": 495,"col": 4,"name": "options"},{"file": 22,"line": 496,"col": 4,"name": "context"},{"file": 22,"line": 497,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 498,"col": 4,"name": "output"},{"file": 17,"line": 2623,"col": 17,"name": "seconds"},{"file": 17,"line": 2623,"col": 31,"name": "nanoseconds"},{"file": 39,"line": 144,"col": 18,"name": "self"},{"file": 39,"line": 144,"col": 33,"name": "b"},{"file": 15,"line": 1349,"col": 15,"name": "ptr"},{"file": 39,"line": 26,"col": 8,"name": "a"},{"file": 39,"line": 26,"col": 16,"name": "b"},{"file": 39,"line": 26,"col": 24,"name": "seed"},{"file": 39,"line": 11,"col": 14,"name": "bytes","comptime": true},{"file": 39,"line": 11,"col": 34,"name": "data"},{"file": 39,"line": 16,"col": 23,"name": "data"},{"file": 39,"line": 30,"col": 8,"name": "a"},{"file": 39,"line": 30,"col": 16,"name": "b"},{"file": 39,"line": 30,"col": 24,"name": "seed"},{"file": 39,"line": 20,"col": 7,"name": "a"},{"file": 39,"line": 20,"col": 15,"name": "b"},{"file": 22,"line": 884,"col": 4,"name": "value"},{"file": 22,"line": 885,"col": 4,"name": "base"},{"file": 22,"line": 886,"col": 4,"name": "uppercase"},{"file": 22,"line": 887,"col": 4,"name": "options"},{"file": 22,"line": 888,"col": 4,"name": "context"},{"file": 22,"line": 889,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 890,"col": 4,"name": "output"},{"file": 39,"line": 62,"col": 18,"name": "self"},{"file": 39,"line": 62,"col": 42,"name": "b"},{"file": 16,"line": 944,"col": 15,"name": "T","comptime": true},{"file": 16,"line": 944,"col": 33,"name": "a"},{"file": 16,"line": 944,"col": 39,"name": "b"},{"file": 22,"line": 937,"col": 4,"name": "value"},{"file": 22,"line": 938,"col": 4,"name": "base"},{"file": 22,"line": 939,"col": 4,"name": "uppercase"},{"file": 22,"line": 940,"col": 4,"name": "options"},{"file": 22,"line": 941,"col": 4,"name": "context"},{"file": 22,"line": 942,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 943,"col": 4,"name": "output"},{"file": 39,"line": 48,"col": 13,"name": "self"},{"file": 39,"line": 48,"col": 37,"name": "b"},{"file": 22,"line": 1087,"col": 15,"name": "digit"},{"file": 22,"line": 1087,"col": 26,"name": "uppercase"},{"file": 15,"line": 275,"col": 11,"name": "T","comptime": true},{"file": 15,"line": 275,"col": 29,"name": "dest"},{"file": 15,"line": 275,"col": 40,"name": "value"},{"file": 22,"line": 906,"col": 4,"name": "value"},{"file": 22,"line": 907,"col": 4,"name": "base"},{"file": 22,"line": 908,"col": 4,"name": "uppercase"},{"file": 22,"line": 909,"col": 4,"name": "options"},{"file": 22,"line": 910,"col": 4,"name": "context"},{"file": 22,"line": 911,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 912,"col": 4,"name": "output"},{"file": 24,"line": 662,"col": 12,"name": "self"},{"file": 24,"line": 662,"col": 30,"name": "buffer"},{"file": 35,"line": 205,"col": 18,"name": "self"},{"file": 35,"line": 205,"col": 30,"name": "offset"},{"file": 17,"line": 2408,"col": 17,"name": "fd"},{"file": 17,"line": 2408,"col": 27,"name": "offset"},{"file": 54,"line": 179,"col": 15,"name": "c_argc"},{"file": 54,"line": 179,"col": 28,"name": "c_argv"},{"file": 54,"line": 179,"col": 46,"name": "c_envp"},{"file": 54,"line": 170,"col": 20,"name": "argc"},{"file": 54,"line": 170,"col": 33,"name": "argv"},{"file": 54,"line": 170,"col": 49,"name": "envp"},{"file": 40,"line": 99,"col": 17,"name": "self"},{"file": 40,"line": 99,"col": 34,"name": "name"},{"file": 40,"line": 99,"col": 52,"name": "estimated_total_items"},{"file": 35,"line": 175,"col": 35,"name": "self"},{"file": 40,"line": 57,"col": 21,"name": "self"},{"file": 40,"line": 57,"col": 34,"name": "name"},{"file": 40,"line": 57,"col": 52,"name": "estimated_total_items"},{"file": 40,"line": 90,"col": 24,"name": "self"},{"file": 40,"line": 128,"col": 19,"name": "self"},{"file": 40,"line": 74,"col": 19,"name": "self"},{"file": 40,"line": 179,"col": 15,"name": "self"},{"file": 40,"line": 179,"col": 32,"name": "format","comptime": true},{"file": 40,"line": 179,"col": 61,"name": "args","varArgs": true},{"file": 17,"line": 899,"col": 15,"name": "key"},{"file": 22,"line": 1112,"col": 16,"name": "buf"},{"file": 22,"line": 1112,"col": 27,"name": "fmt","comptime": true},{"file": 22,"line": 1112,"col": 53,"name": "args","varArgs": true},{"file": 40,"line": 189,"col": 16,"name": "self"},{"file": 40,"line": 189,"col": 33,"name": "end"},{"file": 40,"line": 189,"col": 46,"name": "format","comptime": true},{"file": 40,"line": 189,"col": 75,"name": "args","varArgs": true},{"file": 32,"line": 154,"col": 16,"name": "self"},{"file": 40,"line": 120,"col": 24,"name": "self"},{"file": 40,"line": 68,"col": 27,"name": "self"},{"file": 22,"line": 1099,"col": 17,"name": "context"},{"file": 22,"line": 1099,"col": 44,"name": "bytes"},{"file": 4,"line": 192,"col": 17,"name": "T","comptime": true},{"file": 5,"line": 9,"col": 13,"name": "T","comptime": true},{"file": 16,"line": 884,"col": 14,"name": "T","comptime": true},{"file": 4,"line": 14,"col": 24,"name": "T","comptime": true},{"file": 7,"line": 11,"col": 17,"name": "T","comptime": true},{"file": 55,"line": 20,"col": 12,"name": "x"},{"file": 8,"line": 13,"col": 17,"name": "WriteError","comptime": true},{"file": 42,"line": 261,"col": 15,"name": "T","comptime": true},{"file": 16,"line": 236,"col": 11,"name": "A","comptime": true},{"file": 16,"line": 236,"col": 29,"name": "B","comptime": true},{"file": 10,"line": 32,"col": 15,"name": "K","comptime": true},{"file": 10,"line": 32,"col": 33,"name": "V","comptime": true},{"file": 10,"line": 32,"col": 51,"name": "hash","comptime": true},{"file": 10,"line": 32,"col": 83,"name": "eql","comptime": true},{"file": 7,"line": 15,"col": 24,"name": "T","comptime": true},{"file": 7,"line": 15,"col": 42,"name": "alignment","comptime": true},{"file": 16,"line": 891,"col": 14,"name": "T","comptime": true},{"file": 42,"line": 118,"col": 21,"name": "T","comptime": true},{"file": 29,"line": 88,"col": 17,"name": "T","comptime": true},{"file": 16,"line": 430,"col": 15,"name": "T","comptime": true},{"file": 42,"line": 228,"col": 23,"name": "T","comptime": true},{"file": 0,"line": 77,"col": 23,"name": "self","comptime": true},{"file": 42,"line": 116,"col": 10,"name": "id","comptime": true},{"file": 10,"line": 528,"col": 23,"name": "K","comptime": true},{"file": 12,"line": 8,"col": 13,"name": "T","comptime": true},{"file": 0,"line": 104,"col": 16,"name": "conf","comptime": true},{"file": 29,"line": 102,"col": 13,"name": "T","comptime": true},{"file": 16,"line": 842,"col": 16,"name": "T","comptime": true},{"file": 16,"line": 842,"col": 34,"name": "x"},{"file": 13,"line": 14,"col": 16,"name": "ReadError","comptime": true},{"file": 42,"line": 322,"col": 18,"name": "T","comptime": true},{"file": 15,"line": 1330,"col": 21,"name": "P","comptime": true},{"file": 10,"line": 520,"col": 24,"name": "K","comptime": true},{"file": 0,"line": 84,"col": 23,"name": "self","comptime": true},{"file": 4,"line": 211,"col": 8,"name": "first"},{"file": 4,"line": 212,"col": 8,"name": "last"},{"file": 4,"line": 213,"col": 8,"name": "len"},{"file": 5,"line": 11,"col": 8,"name": "head"},{"file": 5,"line": 12,"col": 8,"name": "tail"},{"file": 5,"line": 13,"col": 8,"name": "mutex"},{"file": 6,"line": 15,"col": 4,"name": "msg"},{"file": 6,"line": 16,"col": 4,"name": "finish"},{"file": 4,"line": 52,"col": 8,"name": "first"},{"file": 7,"line": 27,"col": 8,"docs": " Use toSlice instead of slicing this directly, because if you don't\n specify the end position of the slice, this will potentially give\n you uninitialized memory.\n","name": "items"},{"file": 7,"line": 28,"col": 8,"name": "len"},{"file": 7,"line": 29,"col": 8,"name": "allocator"},{"file": 8,"line": 23,"col": 8,"name": "writeFn"},{"file": 9,"line": 12,"col": 8,"name": "freestanding"},{"file": 9,"line": 13,"col": 8,"name": "ananas"},{"file": 9,"line": 14,"col": 8,"name": "cloudabi"},{"file": 9,"line": 15,"col": 8,"name": "dragonfly"},{"file": 9,"line": 16,"col": 8,"name": "freebsd"},{"file": 9,"line": 17,"col": 8,"name": "fuchsia"},{"file": 9,"line": 18,"col": 8,"name": "ios"},{"file": 9,"line": 19,"col": 8,"name": "kfreebsd"},{"file": 9,"line": 20,"col": 8,"name": "linux"},{"file": 9,"line": 21,"col": 8,"name": "lv2"},{"file": 9,"line": 22,"col": 8,"name": "macosx"},{"file": 9,"line": 23,"col": 8,"name": "netbsd"},{"file": 9,"line": 24,"col": 8,"name": "openbsd"},{"file": 9,"line": 25,"col": 8,"name": "solaris"},{"file": 9,"line": 26,"col": 8,"name": "windows"},{"file": 9,"line": 27,"col": 8,"name": "haiku"},{"file": 9,"line": 28,"col": 8,"name": "minix"},{"file": 9,"line": 29,"col": 8,"name": "rtems"},{"file": 9,"line": 30,"col": 8,"name": "nacl"},{"file": 9,"line": 31,"col": 8,"name": "cnk"},{"file": 9,"line": 32,"col": 8,"name": "aix"},{"file": 9,"line": 33,"col": 8,"name": "cuda"},{"file": 9,"line": 34,"col": 8,"name": "nvcl"},{"file": 9,"line": 35,"col": 8,"name": "amdhsa"},{"file": 9,"line": 36,"col": 8,"name": "ps4"},{"file": 9,"line": 37,"col": 8,"name": "elfiamcu"},{"file": 9,"line": 38,"col": 8,"name": "tvos"},{"file": 9,"line": 39,"col": 8,"name": "watchos"},{"file": 9,"line": 40,"col": 8,"name": "mesa3d"},{"file": 9,"line": 41,"col": 8,"name": "contiki"},{"file": 9,"line": 42,"col": 8,"name": "amdpal"},{"file": 9,"line": 43,"col": 8,"name": "hermit"},{"file": 9,"line": 44,"col": 8,"name": "hurd"},{"file": 9,"line": 45,"col": 8,"name": "wasi"},{"file": 9,"line": 46,"col": 8,"name": "emscripten"},{"file": 9,"line": 47,"col": 8,"name": "zen"},{"file": 9,"line": 48,"col": 8,"name": "uefi"},{"file": 9,"line": 8,"col": 4,"name": "Native"},{"file": 9,"line": 9,"col": 4,"name": "Cross"},{"file": 10,"line": 34,"col": 8,"name": "entries"},{"file": 10,"line": 35,"col": 8,"name": "size"},{"file": 10,"line": 36,"col": 8,"name": "max_distance_from_start_index"},{"file": 10,"line": 37,"col": 8,"name": "allocator"},{"file": 10,"line": 40,"col": 8,"docs": " This is used to detect bugs where a hashtable is edited while an iterator is running.\n","name": "modification_count"},{"file": 18,"line": 1221,"col": 4,"name": "bytes"},{"file": 18,"line": 1222,"col": 4,"name": "sect_debug_info"},{"file": 18,"line": 1223,"col": 4,"name": "sect_debug_line"},{"file": 25,"line": 257,"col": 4,"name": "header"},{"file": 18,"line": 1399,"col": 4,"name": "file_name"},{"file": 18,"line": 1400,"col": 4,"name": "dir_index"},{"file": 18,"line": 1401,"col": 4,"name": "mtime"},{"file": 18,"line": 1402,"col": 4,"name": "len_bytes"},{"file": 0,"line": 69,"col": 8,"docs": " Enable all validations, including library internals\n","name": "Dev"},{"file": 0,"line": 72,"col": 8,"docs": " Only validate external boundaries — e.g. `realloc` or `free`\n","name": "External"},{"file": 0,"line": 75,"col": 8,"docs": " Turn off all validations — pretend this library is `--release-small`\n","name": "Unsafe"},{"file": 11,"line": 97,"col": 4,"name": "Type"},{"file": 11,"line": 98,"col": 4,"name": "Void"},{"file": 11,"line": 99,"col": 4,"name": "Bool"},{"file": 11,"line": 100,"col": 4,"name": "NoReturn"},{"file": 11,"line": 101,"col": 4,"name": "Int"},{"file": 11,"line": 102,"col": 4,"name": "Float"},{"file": 11,"line": 103,"col": 4,"name": "Pointer"},{"file": 11,"line": 104,"col": 4,"name": "Array"},{"file": 11,"line": 105,"col": 4,"name": "Struct"},{"file": 11,"line": 106,"col": 4,"name": "ComptimeFloat"},{"file": 11,"line": 107,"col": 4,"name": "ComptimeInt"},{"file": 11,"line": 108,"col": 4,"name": "Undefined"},{"file": 11,"line": 109,"col": 4,"name": "Null"},{"file": 11,"line": 110,"col": 4,"name": "Optional"},{"file": 11,"line": 111,"col": 4,"name": "ErrorUnion"},{"file": 11,"line": 112,"col": 4,"name": "ErrorSet"},{"file": 11,"line": 113,"col": 4,"name": "Enum"},{"file": 11,"line": 114,"col": 4,"name": "Union"},{"file": 11,"line": 115,"col": 4,"name": "Fn"},{"file": 11,"line": 116,"col": 4,"name": "BoundFn"},{"file": 11,"line": 117,"col": 4,"name": "ArgTuple"},{"file": 11,"line": 118,"col": 4,"name": "Opaque"},{"file": 11,"line": 119,"col": 4,"name": "Frame"},{"file": 11,"line": 120,"col": 4,"name": "AnyFrame"},{"file": 11,"line": 121,"col": 4,"name": "Vector"},{"file": 11,"line": 122,"col": 4,"name": "EnumLiteral"},{"file": 12,"line": 10,"col": 8,"name": "root"},{"file": 12,"line": 11,"col": 8,"name": "lock"},{"file": 41,"line": 67,"col": 12,"name": "base"},{"file": 41,"line": 68,"col": 12,"name": "kevent"},{"file": 0,"line": 227,"col": 8,"name": "backing_allocator"},{"file": 0,"line": 229,"col": 8,"name": "free_lists"},{"file": 0,"line": 230,"col": 8,"name": "allocator"},{"file": 0,"line": 16,"col": 4,"docs": " ZeeAlloc will request a multiple of `page_size` from the backing allocator.\n **Must** be a power of two.\n","name": "page_size"},{"file": 0,"line": 17,"col": 4,"name": "validation"},{"file": 0,"line": 19,"col": 4,"name": "jumbo_match_strategy"},{"file": 0,"line": 20,"col": 4,"name": "buddy_strategy"},{"file": 0,"line": 21,"col": 4,"name": "shrink_strategy"},{"file": 13,"line": 26,"col": 8,"docs": " Returns the number of bytes read. It may be less than buffer.len.\n If the number of bytes read is 0, it means end of stream.\n End of stream is not an error condition.\n","name": "readFn"},{"file": 31,"line": 425,"col": 4,"name": "allocator"},{"file": 31,"line": 426,"col": 4,"name": "end_index"},{"file": 31,"line": 427,"col": 4,"name": "buffer"},{"file": 35,"line": 373,"col": 8,"name": "file"},{"file": 35,"line": 374,"col": 8,"name": "stream"},{"file": 35,"line": 13,"col": 4,"docs": " The OS-specific file descriptor or file handle.\n","name": "handle"},{"file": 11,"line": 45,"col": 4,"name": "index"},{"file": 11,"line": 46,"col": 4,"name": "instruction_addresses"},{"file": 0,"line": 184,"col": 12,"name": "first"},{"file": 18,"line": 1206,"col": 4,"name": "nlist"},{"file": 18,"line": 1207,"col": 4,"name": "ofile"},{"file": 18,"line": 1208,"col": 4,"name": "reloc"},{"file": 10,"line": 315,"col": 12,"name": "new_entry"},{"file": 10,"line": 316,"col": 12,"name": "old_kv"},{"file": 35,"line": 359,"col": 8,"name": "file"},{"file": 35,"line": 360,"col": 8,"name": "stream"},{"file": 11,"line": 336,"col": 4,"name": "Big"},{"file": 11,"line": 337,"col": 4,"name": "Little"},{"file": 18,"line": 1258,"col": 8,"name": "symbols"},{"file": 18,"line": 1259,"col": 8,"name": "strings"},{"file": 18,"line": 1260,"col": 8,"name": "ofiles"},{"file": 18,"line": 1418,"col": 4,"name": "address"},{"file": 18,"line": 1419,"col": 4,"name": "file"},{"file": 18,"line": 1420,"col": 4,"name": "line"},{"file": 18,"line": 1421,"col": 4,"name": "column"},{"file": 18,"line": 1422,"col": 4,"name": "is_stmt"},{"file": 18,"line": 1423,"col": 4,"name": "basic_block"},{"file": 18,"line": 1424,"col": 4,"name": "end_sequence"},{"file": 18,"line": 1426,"col": 4,"name": "target_address"},{"file": 18,"line": 1427,"col": 4,"name": "include_dirs"},{"file": 18,"line": 1428,"col": 4,"name": "file_entries"},{"file": 18,"line": 1430,"col": 4,"name": "prev_address"},{"file": 18,"line": 1431,"col": 4,"name": "prev_file"},{"file": 18,"line": 1432,"col": 4,"name": "prev_line"},{"file": 18,"line": 1433,"col": 4,"name": "prev_column"},{"file": 18,"line": 1434,"col": 4,"name": "prev_is_stmt"},{"file": 18,"line": 1435,"col": 4,"name": "prev_basic_block"},{"file": 18,"line": 1436,"col": 4,"name": "prev_end_sequence"},{"file": 18,"line": 1406,"col": 4,"name": "line"},{"file": 18,"line": 1407,"col": 4,"name": "column"},{"file": 18,"line": 1408,"col": 4,"name": "file_name"},{"file": 18,"line": 1409,"col": 4,"name": "allocator"},{"file": 18,"line": 277,"col": 4,"name": "first_addr"},{"file": 18,"line": 278,"col": 4,"name": "fp"},{"file": 22,"line": 19,"col": 4,"name": "precision"},{"file": 22,"line": 20,"col": 4,"name": "width"},{"file": 22,"line": 21,"col": 4,"name": "alignment"},{"file": 22,"line": 22,"col": 4,"name": "fill"},{"file": 31,"line": 338,"col": 4,"name": "allocator"},{"file": 31,"line": 340,"col": 4,"name": "child_allocator"},{"file": 31,"line": 341,"col": 4,"name": "buffer_list"},{"file": 31,"line": 342,"col": 4,"name": "end_index"},{"file": 27,"line": 39,"col": 4,"name": "size"},{"file": 27,"line": 40,"col": 4,"name": "power_of_two"},{"file": 27,"line": 41,"col": 4,"name": "numerator"},{"file": 27,"line": 42,"col": 4,"name": "decimal"},{"file": 27,"line": 43,"col": 4,"name": "denominator"},{"file": 27,"line": 44,"col": 4,"name": "decimal_step"},{"file": 27,"line": 45,"col": 4,"name": "numerator_step"},{"file": 27,"line": 23,"col": 4,"name": "start"},{"file": 27,"line": 24,"col": 4,"name": "end"},{"file": 36,"line": 108,"col": 4,"name": "tv_sec"},{"file": 36,"line": 109,"col": 4,"name": "tv_nsec"},{"file": 36,"line": 62,"col": 4,"name": "dev"},{"file": 36,"line": 63,"col": 4,"name": "mode"},{"file": 36,"line": 64,"col": 4,"name": "nlink"},{"file": 36,"line": 65,"col": 4,"name": "ino"},{"file": 36,"line": 66,"col": 4,"name": "uid"},{"file": 36,"line": 67,"col": 4,"name": "gid"},{"file": 36,"line": 68,"col": 4,"name": "rdev"},{"file": 36,"line": 69,"col": 4,"name": "atimesec"},{"file": 36,"line": 70,"col": 4,"name": "atimensec"},{"file": 36,"line": 71,"col": 4,"name": "mtimesec"},{"file": 36,"line": 72,"col": 4,"name": "mtimensec"},{"file": 36,"line": 73,"col": 4,"name": "ctimesec"},{"file": 36,"line": 74,"col": 4,"name": "ctimensec"},{"file": 36,"line": 75,"col": 4,"name": "birthtimesec"},{"file": 36,"line": 76,"col": 4,"name": "birthtimensec"},{"file": 36,"line": 77,"col": 4,"name": "size"},{"file": 36,"line": 78,"col": 4,"name": "blocks"},{"file": 36,"line": 79,"col": 4,"name": "blksize"},{"file": 36,"line": 80,"col": 4,"name": "flags"},{"file": 36,"line": 81,"col": 4,"name": "gen"},{"file": 36,"line": 82,"col": 4,"name": "lspare"},{"file": 36,"line": 83,"col": 4,"name": "qspare"},{"file": 37,"line": 41,"col": 8,"name": "state"},{"file": 37,"line": 42,"col": 8,"name": "parker"},{"file": 38,"line": 108,"col": 4,"name": "cond"},{"file": 38,"line": 109,"col": 4,"name": "mutex"},{"file": 37,"line": 69,"col": 12,"name": "mutex"},{"file": 39,"line": 131,"col": 4,"name": "state"},{"file": 39,"line": 133,"col": 4,"name": "buf"},{"file": 39,"line": 134,"col": 4,"name": "buf_len"},{"file": 39,"line": 38,"col": 4,"name": "seed"},{"file": 39,"line": 39,"col": 4,"name": "msg_len"},{"file": 40,"line": 43,"col": 8,"name": "context"},{"file": 40,"line": 44,"col": 8,"name": "parent"},{"file": 40,"line": 45,"col": 8,"name": "completed_items"},{"file": 40,"line": 46,"col": 8,"name": "name"},{"file": 40,"line": 47,"col": 8,"name": "recently_updated_child"},{"file": 40,"line": 50,"col": 8,"docs": " This field may be updated freely.\n","name": "estimated_total_items"},{"file": 4,"line": 198,"col": 12,"name": "prev"},{"file": 4,"line": 199,"col": 12,"name": "next"},{"file": 4,"line": 200,"col": 12,"name": "data"},{"file": 6,"line": 19,"col": 8,"name": "TickNode"},{"file": 6,"line": 20,"col": 8,"name": "DeallocCloseOperation"},{"file": 6,"line": 21,"col": 8,"name": "NoAction"},{"file": 6,"line": 25,"col": 8,"name": "WriteV"},{"file": 6,"line": 26,"col": 8,"name": "PWriteV"},{"file": 6,"line": 27,"col": 8,"name": "PReadV"},{"file": 6,"line": 28,"col": 8,"name": "Open"},{"file": 6,"line": 29,"col": 8,"name": "Close"},{"file": 6,"line": 30,"col": 8,"name": "WriteFile"},{"file": 6,"line": 31,"col": 8,"name": "End"},{"file": 4,"line": 20,"col": 12,"name": "next"},{"file": 4,"line": 21,"col": 12,"name": "data"},{"file": 9,"line": 150,"col": 8,"name": "none"},{"file": 9,"line": 151,"col": 8,"name": "gnu"},{"file": 9,"line": 152,"col": 8,"name": "gnuabin32"},{"file": 9,"line": 153,"col": 8,"name": "gnuabi64"},{"file": 9,"line": 154,"col": 8,"name": "gnueabi"},{"file": 9,"line": 155,"col": 8,"name": "gnueabihf"},{"file": 9,"line": 156,"col": 8,"name": "gnux32"},{"file": 9,"line": 157,"col": 8,"name": "code16"},{"file": 9,"line": 158,"col": 8,"name": "eabi"},{"file": 9,"line": 159,"col": 8,"name": "eabihf"},{"file": 9,"line": 160,"col": 8,"name": "elfv1"},{"file": 9,"line": 161,"col": 8,"name": "elfv2"},{"file": 9,"line": 162,"col": 8,"name": "android"},{"file": 9,"line": 163,"col": 8,"name": "musl"},{"file": 9,"line": 164,"col": 8,"name": "musleabi"},{"file": 9,"line": 165,"col": 8,"name": "musleabihf"},{"file": 9,"line": 166,"col": 8,"name": "msvc"},{"file": 9,"line": 167,"col": 8,"name": "itanium"},{"file": 9,"line": 168,"col": 8,"name": "cygnus"},{"file": 9,"line": 169,"col": 8,"name": "coreclr"},{"file": 9,"line": 170,"col": 8,"name": "simulator"},{"file": 9,"line": 171,"col": 8,"name": "macabi"},{"file": 9,"line": 194,"col": 8,"name": "arch"},{"file": 9,"line": 195,"col": 8,"name": "os"},{"file": 9,"line": 196,"col": 8,"name": "abi"},{"file": 9,"line": 52,"col": 8,"name": "arm"},{"file": 9,"line": 53,"col": 8,"name": "armeb"},{"file": 9,"line": 54,"col": 8,"name": "aarch64"},{"file": 9,"line": 55,"col": 8,"name": "aarch64_be"},{"file": 9,"line": 56,"col": 8,"name": "aarch64_32"},{"file": 9,"line": 57,"col": 8,"name": "arc"},{"file": 9,"line": 58,"col": 8,"name": "avr"},{"file": 9,"line": 59,"col": 8,"name": "bpfel"},{"file": 9,"line": 60,"col": 8,"name": "bpfeb"},{"file": 9,"line": 61,"col": 8,"name": "hexagon"},{"file": 9,"line": 62,"col": 8,"name": "mips"},{"file": 9,"line": 63,"col": 8,"name": "mipsel"},{"file": 9,"line": 64,"col": 8,"name": "mips64"},{"file": 9,"line": 65,"col": 8,"name": "mips64el"},{"file": 9,"line": 66,"col": 8,"name": "msp430"},{"file": 9,"line": 67,"col": 8,"name": "powerpc"},{"file": 9,"line": 68,"col": 8,"name": "powerpc64"},{"file": 9,"line": 69,"col": 8,"name": "powerpc64le"},{"file": 9,"line": 70,"col": 8,"name": "r600"},{"file": 9,"line": 71,"col": 8,"name": "amdgcn"},{"file": 9,"line": 72,"col": 8,"name": "riscv32"},{"file": 9,"line": 73,"col": 8,"name": "riscv64"},{"file": 9,"line": 74,"col": 8,"name": "sparc"},{"file": 9,"line": 75,"col": 8,"name": "sparcv9"},{"file": 9,"line": 76,"col": 8,"name": "sparcel"},{"file": 9,"line": 77,"col": 8,"name": "s390x"},{"file": 9,"line": 78,"col": 8,"name": "tce"},{"file": 9,"line": 79,"col": 8,"name": "tcele"},{"file": 9,"line": 80,"col": 8,"name": "thumb"},{"file": 9,"line": 81,"col": 8,"name": "thumbeb"},{"file": 9,"line": 82,"col": 8,"name": "i386"},{"file": 9,"line": 83,"col": 8,"name": "x86_64"},{"file": 9,"line": 84,"col": 8,"name": "xcore"},{"file": 9,"line": 85,"col": 8,"name": "nvptx"},{"file": 9,"line": 86,"col": 8,"name": "nvptx64"},{"file": 9,"line": 87,"col": 8,"name": "le32"},{"file": 9,"line": 88,"col": 8,"name": "le64"},{"file": 9,"line": 89,"col": 8,"name": "amdil"},{"file": 9,"line": 90,"col": 8,"name": "amdil64"},{"file": 9,"line": 91,"col": 8,"name": "hsail"},{"file": 9,"line": 92,"col": 8,"name": "hsail64"},{"file": 9,"line": 93,"col": 8,"name": "spir"},{"file": 9,"line": 94,"col": 8,"name": "spir64"},{"file": 9,"line": 95,"col": 8,"name": "kalimba"},{"file": 9,"line": 96,"col": 8,"name": "shave"},{"file": 9,"line": 97,"col": 8,"name": "lanai"},{"file": 9,"line": 98,"col": 8,"name": "wasm32"},{"file": 9,"line": 99,"col": 8,"name": "wasm64"},{"file": 9,"line": 100,"col": 8,"name": "renderscript32"},{"file": 9,"line": 101,"col": 8,"name": "renderscript64"},{"file": 10,"line": 45,"col": 12,"name": "key"},{"file": 10,"line": 46,"col": 12,"name": "value"},{"file": 10,"line": 56,"col": 12,"name": "kv"},{"file": 10,"line": 57,"col": 12,"name": "found_existing"},{"file": 10,"line": 50,"col": 12,"name": "used"},{"file": 10,"line": 51,"col": 12,"name": "distance_from_start_index"},{"file": 10,"line": 52,"col": 12,"name": "kv"},{"file": 34,"line": 252,"col": 4,"name": "n_strx"},{"file": 34,"line": 253,"col": 4,"name": "n_type"},{"file": 34,"line": 254,"col": 4,"name": "n_sect"},{"file": 34,"line": 255,"col": 4,"name": "n_desc"},{"file": 34,"line": 256,"col": 4,"name": "n_value"},{"file": 25,"line": 266,"col": 4,"name": "name"},{"file": 25,"line": 267,"col": 4,"name": "misc"},{"file": 25,"line": 268,"col": 4,"name": "virtual_address"},{"file": 25,"line": 269,"col": 4,"name": "size_of_raw_data"},{"file": 25,"line": 270,"col": 4,"name": "pointer_to_raw_data"},{"file": 25,"line": 271,"col": 4,"name": "pointer_to_relocations"},{"file": 25,"line": 272,"col": 4,"name": "pointer_to_line_numbers"},{"file": 25,"line": 273,"col": 4,"name": "number_of_relocations"},{"file": 25,"line": 274,"col": 4,"name": "number_of_line_numbers"},{"file": 25,"line": 275,"col": 4,"name": "characteristics"},{"file": 11,"line": 183,"col": 8,"name": "layout"},{"file": 11,"line": 184,"col": 8,"name": "fields"},{"file": 11,"line": 185,"col": 8,"name": "decls"},{"file": 11,"line": 160,"col": 8,"name": "len"},{"file": 11,"line": 161,"col": 8,"name": "child"},{"file": 11,"line": 197,"col": 8,"name": "error_set"},{"file": 11,"line": 198,"col": 8,"name": "payload"},{"file": 11,"line": 140,"col": 8,"name": "size"},{"file": 11,"line": 141,"col": 8,"name": "is_const"},{"file": 11,"line": 142,"col": 8,"name": "is_volatile"},{"file": 11,"line": 143,"col": 8,"name": "alignment"},{"file": 11,"line": 144,"col": 8,"name": "child"},{"file": 11,"line": 145,"col": 8,"name": "is_allowzero"},{"file": 11,"line": 215,"col": 8,"name": "name"},{"file": 11,"line": 216,"col": 8,"name": "value"},{"file": 11,"line": 167,"col": 8,"name": "Auto"},{"file": 11,"line": 168,"col": 8,"name": "Extern"},{"file": 11,"line": 169,"col": 8,"name": "Packed"},{"file": 11,"line": 290,"col": 8,"name": "name"},{"file": 11,"line": 291,"col": 8,"name": "is_pub"},{"file": 11,"line": 292,"col": 8,"name": "data"},{"file": 11,"line": 239,"col": 8,"name": "layout"},{"file": 11,"line": 240,"col": 8,"name": "tag_type"},{"file": 11,"line": 241,"col": 8,"name": "fields"},{"file": 11,"line": 242,"col": 8,"name": "decls"},{"file": 11,"line": 191,"col": 8,"name": "child"},{"file": 11,"line": 222,"col": 8,"name": "layout"},{"file": 11,"line": 223,"col": 8,"name": "tag_type"},{"file": 11,"line": 224,"col": 8,"name": "fields"},{"file": 11,"line": 225,"col": 8,"name": "decls"},{"file": 11,"line": 248,"col": 8,"name": "Unspecified"},{"file": 11,"line": 249,"col": 8,"name": "C"},{"file": 11,"line": 250,"col": 8,"name": "Cold"},{"file": 11,"line": 251,"col": 8,"name": "Naked"},{"file": 11,"line": 252,"col": 8,"name": "Stdcall"},{"file": 11,"line": 253,"col": 8,"name": "Async"},{"file": 11,"line": 283,"col": 8,"name": "len"},{"file": 11,"line": 284,"col": 8,"name": "child"},{"file": 11,"line": 134,"col": 8,"name": "bits"},{"file": 11,"line": 231,"col": 8,"name": "name"},{"file": 11,"line": 232,"col": 8,"name": "enum_field"},{"file": 11,"line": 233,"col": 8,"name": "field_type"},{"file": 11,"line": 175,"col": 8,"name": "name"},{"file": 11,"line": 176,"col": 8,"name": "offset"},{"file": 11,"line": 177,"col": 8,"name": "field_type"},{"file": 11,"line": 277,"col": 8,"name": "child"},{"file": 11,"line": 204,"col": 8,"name": "name"},{"file": 11,"line": 205,"col": 8,"name": "value"},{"file": 11,"line": 267,"col": 8,"name": "calling_convention"},{"file": 11,"line": 268,"col": 8,"name": "is_generic"},{"file": 11,"line": 269,"col": 8,"name": "is_var_args"},{"file": 11,"line": 270,"col": 8,"name": "return_type"},{"file": 11,"line": 271,"col": 8,"name": "args"},{"file": 11,"line": 259,"col": 8,"name": "is_generic"},{"file": 11,"line": 260,"col": 8,"name": "is_noalias"},{"file": 11,"line": 261,"col": 8,"name": "arg_type"},{"file": 11,"line": 127,"col": 8,"name": "is_signed"},{"file": 11,"line": 128,"col": 8,"name": "bits"},{"file": 12,"line": 18,"col": 12,"name": "next"},{"file": 12,"line": 19,"col": 12,"name": "data"},{"file": 41,"line": 30,"col": 8,"name": "id"},{"file": 41,"line": 31,"col": 8,"name": "handle"},{"file": 41,"line": 32,"col": 8,"name": "overlapped"},{"file": 36,"line": 137,"col": 4,"name": "ident"},{"file": 36,"line": 138,"col": 4,"name": "filter"},{"file": 36,"line": 139,"col": 4,"name": "flags"},{"file": 36,"line": 140,"col": 4,"name": "fflags"},{"file": 36,"line": 141,"col": 4,"name": "data"},{"file": 36,"line": 142,"col": 4,"name": "udata"},{"file": 0,"line": 121,"col": 12,"name": "next"},{"file": 0,"line": 122,"col": 12,"name": "frame_size"},{"file": 0,"line": 124,"col": 12,"name": "payload"},{"file": 15,"line": 39,"col": 4,"docs": " Realloc is used to modify the size or alignment of an existing allocation,\n as well as to provide the allocator with an opportunity to move an allocation\n to a better location.\n When the size/alignment is greater than the previous allocation, this function\n returns `error.OutOfMemory` when the requested new allocation could not be granted.\n When the size/alignment is less than or equal to the previous allocation,\n this function returns `error.OutOfMemory` when the allocator decides the client\n would be better off keeping the extra alignment/size. Clients will call\n `shrinkFn` when they require the allocator to track a new alignment/size,\n and so this function should only return success when the allocator considers\n the reallocation desirable from the allocator's perspective.\n As an example, `std.ArrayList` tracks a \"capacity\", and therefore can handle\n reallocation failure, even when `new_n` <= `old_mem.len`. A `FixedBufferAllocator`\n would always return `error.OutOfMemory` for `reallocFn` when the size/alignment\n is less than or equal to the old allocation, because it cannot reclaim the memory,\n and thus the `std.ArrayList` would be better off retaining its capacity.\n When `reallocFn` returns,\n `return_value[0..min(old_mem.len, new_byte_count)]` must be the same\n as `old_mem` was when `reallocFn` is called. The bytes of\n `return_value[old_mem.len..]` have undefined values.\n The returned slice must have its pointer aligned at least to `new_alignment` bytes.\n","name": "reallocFn"},{"file": 15,"line": 62,"col": 4,"docs": " This function deallocates memory. It must succeed.\n","name": "shrinkFn"},{"file": 0,"line": 26,"col": 8,"docs": " Use the frame that wastes the least space\n Scans the entire jumbo freelist, which is slower but keeps memory pretty tidy\n","name": "Closest"},{"file": 0,"line": 31,"col": 8,"docs": " Use only exact matches\n -75 bytes vs `.Closest`\n Similar performance to Closest if allocation sizes are consistent throughout lifetime\n","name": "Exact"},{"file": 0,"line": 36,"col": 8,"docs": " Use the first frame that fits\n -75 bytes vs `.Closest`\n Initially faster to allocate but causes major fragmentation issues\n","name": "First"},{"file": 0,"line": 54,"col": 8,"docs": " Return a smaller view into the same frame\n Faster because it ignores shrink, but never reclaims space until freed\n","name": "Defer"},{"file": 0,"line": 59,"col": 8,"docs": " Split the frame into smallest usable chunk\n +112 bytes vs `.Defer`\n Better at reclaiming non-jumbo memory, but never reclaims jumbo until freed\n","name": "Chunkify"},{"file": 0,"line": 64,"col": 8,"docs": " Find and swap a replacement frame\n +295 bytes vs `.Defer`\n Reclaims all memory, but generally slower\n","name": "Swap"},{"file": 0,"line": 43,"col": 8,"docs": " Return the raw free frame immediately\n Generally faster because it does not recombine or resplit frames,\n but it also requires more underlying memory\n","name": "Fast"},{"file": 0,"line": 48,"col": 8,"docs": " Recombine with free buddies to reclaim storage\n +153 bytes vs `.Fast`\n More efficient use of existing memory at the cost of cycles and bytes\n","name": "Coalesce"},{"file": 11,"line": 72,"col": 4,"name": "Xchg"},{"file": 11,"line": 73,"col": 4,"name": "Add"},{"file": 11,"line": 74,"col": 4,"name": "Sub"},{"file": 11,"line": 75,"col": 4,"name": "And"},{"file": 11,"line": 76,"col": 4,"name": "Nand"},{"file": 11,"line": 77,"col": 4,"name": "Or"},{"file": 11,"line": 78,"col": 4,"name": "Xor"},{"file": 11,"line": 79,"col": 4,"name": "Max"},{"file": 11,"line": 80,"col": 4,"name": "Min"},{"file": 11,"line": 86,"col": 4,"name": "Debug"},{"file": 11,"line": 87,"col": 4,"name": "ReleaseSafe"},{"file": 11,"line": 88,"col": 4,"name": "ReleaseFast"},{"file": 11,"line": 89,"col": 4,"name": "ReleaseSmall"},{"file": 11,"line": 61,"col": 4,"name": "Unordered"},{"file": 11,"line": 62,"col": 4,"name": "Monotonic"},{"file": 11,"line": 63,"col": 4,"name": "Acquire"},{"file": 11,"line": 64,"col": 4,"name": "Release"},{"file": 11,"line": 65,"col": 4,"name": "AcqRel"},{"file": 11,"line": 66,"col": 4,"name": "SeqCst"},{"file": 11,"line": 52,"col": 4,"name": "Internal"},{"file": 11,"line": 53,"col": 4,"name": "Strong"},{"file": 11,"line": 54,"col": 4,"name": "Weak"},{"file": 11,"line": 55,"col": 4,"name": "LinkOnce"},{"file": 1,"line": 17,"col": 0,"name": "name"},{"file": 1,"line": 18,"col": 0,"name": "func"},{"file": 43,"line": 9,"col": 4,"name": "data"},{"file": 40,"line": 12,"col": 4,"docs": " `null` if the current node (and its children) should\n not print on update()\n","name": "terminal"},{"file": 40,"line": 14,"col": 4,"name": "root"},{"file": 40,"line": 18,"col": 4,"docs": " Keeps track of how much time has passed since the beginning.\n Used to compare with `initial_delay_ms` and `refresh_rate_ms`.\n","name": "timer"},{"file": 40,"line": 22,"col": 4,"docs": " When the previous refresh was written to the terminal.\n Used to compare with `refresh_rate_ms`.\n","name": "prev_refresh_timestamp"},{"file": 40,"line": 26,"col": 4,"docs": " This buffer represents the maximum number of bytes written to the terminal\n with each refresh.\n","name": "output_buffer"},{"file": 40,"line": 29,"col": 4,"docs": " How many nanoseconds between writing updates to the terminal.\n","name": "refresh_rate_ns"},{"file": 40,"line": 32,"col": 4,"docs": " How many nanoseconds to keep the output hidden\n","name": "initial_delay_ns"},{"file": 40,"line": 34,"col": 4,"name": "done"},{"file": 40,"line": 38,"col": 4,"docs": " Keeps track of how many columns in the terminal have been output, so that\n we can move the cursor back later.\n","name": "columns_written"},{"file": 51,"line": 7,"col": 4,"name": "lock"},{"file": 35,"line": 232,"col": 8,"name": "size"},{"file": 35,"line": 233,"col": 8,"name": "mode"},{"file": 35,"line": 236,"col": 8,"docs": " access time in nanoseconds\n","name": "atime"},{"file": 35,"line": 239,"col": 8,"docs": " last modification time in nanoseconds\n","name": "mtime"},{"file": 35,"line": 242,"col": 8,"docs": " creation time in nanoseconds\n","name": "ctime"},{"file": 49,"line": 120,"col": 4,"name": "__sig"},{"file": 49,"line": 121,"col": 4,"name": "__opaque"},{"file": 49,"line": 116,"col": 4,"name": "__sig"},{"file": 49,"line": 117,"col": 4,"name": "__opaque"},{"file": 24,"line": 628,"col": 4,"name": "in_file"},{"file": 24,"line": 629,"col": 4,"name": "pos"},{"file": 24,"line": 630,"col": 4,"name": "blocks"},{"file": 24,"line": 631,"col": 4,"name": "block_size"},{"file": 24,"line": 634,"col": 4,"docs": " Implementation of InStream trait for Pdb.MsfStream\n","name": "stream"},{"file": 32,"line": 103,"col": 4,"docs": "if we used resolution's value when performing the\n  performance counter calc on windows/darwin, it would\n  be less precise\n","name": "frequency"},{"file": 32,"line": 108,"col": 4,"name": "resolution"},{"file": 32,"line": 109,"col": 4,"name": "start_time"},{"file": 22,"line": 1096,"col": 4,"name": "remaining"},{"file": 6,"line": 499,"col": 4,"name": "loop"},{"file": 6,"line": 500,"col": 4,"name": "os_data"},{"file": 41,"line": 15,"col": 4,"name": "allocator"},{"file": 41,"line": 16,"col": 4,"name": "next_tick_queue"},{"file": 41,"line": 17,"col": 4,"name": "os_data"},{"file": 41,"line": 18,"col": 4,"name": "final_resume_node"},{"file": 41,"line": 19,"col": 4,"name": "pending_event_count"},{"file": 41,"line": 20,"col": 4,"name": "extra_threads"},{"file": 41,"line": 24,"col": 4,"name": "available_eventfd_resume_nodes"},{"file": 41,"line": 25,"col": 4,"name": "eventfd_resume_nodes"},{"file": 6,"line": 80,"col": 12,"name": "fd"},{"file": 6,"line": 61,"col": 12,"docs": " must be null terminated. TODO https://github.com/ziglang/zig/issues/265\n","name": "path"},{"file": 6,"line": 62,"col": 12,"name": "flags"},{"file": 6,"line": 63,"col": 12,"name": "mode"},{"file": 6,"line": 64,"col": 12,"name": "result"},{"file": 6,"line": 71,"col": 12,"docs": " must be null terminated. TODO https://github.com/ziglang/zig/issues/265\n","name": "path"},{"file": 6,"line": 72,"col": 12,"name": "contents"},{"file": 6,"line": 73,"col": 12,"name": "mode"},{"file": 6,"line": 74,"col": 12,"name": "result"},{"file": 6,"line": 42,"col": 12,"name": "fd"},{"file": 6,"line": 43,"col": 12,"name": "iov"},{"file": 6,"line": 44,"col": 12,"name": "offset"},{"file": 6,"line": 45,"col": 12,"name": "result"},{"file": 6,"line": 34,"col": 12,"name": "fd"},{"file": 6,"line": 35,"col": 12,"name": "iov"},{"file": 6,"line": 36,"col": 12,"name": "result"},{"file": 6,"line": 51,"col": 12,"name": "fd"},{"file": 6,"line": 52,"col": 12,"name": "iov"},{"file": 6,"line": 53,"col": 12,"name": "offset"},{"file": 6,"line": 54,"col": 12,"name": "result"},{"file": 9,"line": 104,"col": 12,"name": "v8_5a"},{"file": 9,"line": 105,"col": 12,"name": "v8_4a"},{"file": 9,"line": 106,"col": 12,"name": "v8_3a"},{"file": 9,"line": 107,"col": 12,"name": "v8_2a"},{"file": 9,"line": 108,"col": 12,"name": "v8_1a"},{"file": 9,"line": 109,"col": 12,"name": "v8"},{"file": 9,"line": 110,"col": 12,"name": "v8r"},{"file": 9,"line": 111,"col": 12,"name": "v8m_baseline"},{"file": 9,"line": 112,"col": 12,"name": "v8m_mainline"},{"file": 9,"line": 113,"col": 12,"name": "v8_1m_mainline"},{"file": 9,"line": 114,"col": 12,"name": "v7"},{"file": 9,"line": 115,"col": 12,"name": "v7em"},{"file": 9,"line": 116,"col": 12,"name": "v7m"},{"file": 9,"line": 117,"col": 12,"name": "v7s"},{"file": 9,"line": 118,"col": 12,"name": "v7k"},{"file": 9,"line": 119,"col": 12,"name": "v7ve"},{"file": 9,"line": 120,"col": 12,"name": "v6"},{"file": 9,"line": 121,"col": 12,"name": "v6m"},{"file": 9,"line": 122,"col": 12,"name": "v6k"},{"file": 9,"line": 123,"col": 12,"name": "v6t2"},{"file": 9,"line": 124,"col": 12,"name": "v5"},{"file": 9,"line": 125,"col": 12,"name": "v5te"},{"file": 9,"line": 126,"col": 12,"name": "v4t"},{"file": 9,"line": 140,"col": 12,"name": "v5"},{"file": 9,"line": 141,"col": 12,"name": "v4"},{"file": 9,"line": 142,"col": 12,"name": "v3"},{"file": 9,"line": 129,"col": 12,"name": "v8_5a"},{"file": 9,"line": 130,"col": 12,"name": "v8_4a"},{"file": 9,"line": 131,"col": 12,"name": "v8_3a"},{"file": 9,"line": 132,"col": 12,"name": "v8_2a"},{"file": 9,"line": 133,"col": 12,"name": "v8_1a"},{"file": 9,"line": 134,"col": 12,"name": "v8"},{"file": 9,"line": 135,"col": 12,"name": "v8r"},{"file": 9,"line": 136,"col": 12,"name": "v8m_baseline"},{"file": 9,"line": 137,"col": 12,"name": "v8m_mainline"},{"file": 25,"line": 262,"col": 8,"name": "physical_address"},{"file": 25,"line": 263,"col": 8,"name": "virtual_size"},{"file": 11,"line": 150,"col": 12,"name": "One"},{"file": 11,"line": 151,"col": 12,"name": "Many"},{"file": 11,"line": 152,"col": 12,"name": "Slice"},{"file": 11,"line": 153,"col": 12,"name": "C"},{"file": 11,"line": 297,"col": 12,"name": "Type"},{"file": 11,"line": 298,"col": 12,"name": "Var"},{"file": 11,"line": 299,"col": 12,"name": "Fn"},{"file": 41,"line": 47,"col": 12,"name": "Basic"},{"file": 41,"line": 48,"col": 12,"name": "Stop"},{"file": 41,"line": 49,"col": 12,"name": "EventFd"},{"file": 43,"line": 34,"col": 12,"name": "handle"},{"file": 43,"line": 35,"col": 12,"name": "memory"},{"file": 44,"line": 22,"col": 4,"name": "iov_base"},{"file": 44,"line": 23,"col": 4,"name": "iov_len"},{"file": 36,"line": 49,"col": 4,"name": "numer"},{"file": 36,"line": 50,"col": 4,"name": "denom"},{"file": 44,"line": 17,"col": 4,"name": "iov_base"},{"file": 44,"line": 18,"col": 4,"name": "iov_len"},{"file": 36,"line": 158,"col": 4,"name": "ident"},{"file": 36,"line": 159,"col": 4,"name": "filter"},{"file": 36,"line": 160,"col": 4,"name": "flags"},{"file": 36,"line": 161,"col": 4,"name": "fflags"},{"file": 36,"line": 162,"col": 4,"name": "data"},{"file": 36,"line": 163,"col": 4,"name": "udata"},{"file": 36,"line": 164,"col": 4,"name": "ext"},{"file": 18,"line": 30,"col": 4,"name": "mod_info"},{"file": 18,"line": 31,"col": 4,"name": "module_name"},{"file": 18,"line": 32,"col": 4,"name": "obj_file_name"},{"file": 18,"line": 34,"col": 4,"name": "populated"},{"file": 18,"line": 35,"col": 4,"name": "symbols"},{"file": 18,"line": 36,"col": 4,"name": "subsect_info"},{"file": 18,"line": 37,"col": 4,"name": "checksum_offset"},{"file": 21,"line": 20,"col": 4,"docs": " I/O operates normally, waiting for the operating system syscalls to complete.\n","name": "blocking"},{"file": 21,"line": 23,"col": 4,"docs": " I/O functions are generated async and rely on a global event loop. Event-based I/O.\n","name": "evented"},{"file": 22,"line": 13,"col": 4,"name": "Left"},{"file": 22,"line": 14,"col": 4,"name": "Center"},{"file": 22,"line": 15,"col": 4,"name": "Right"},{"file": 24,"line": 53,"col": 4,"name": "Unused1"},{"file": 24,"line": 54,"col": 4,"name": "SectionContr"},{"file": 24,"line": 55,"col": 4,"name": "Flags"},{"file": 24,"line": 56,"col": 4,"name": "ModuleSymStream"},{"file": 24,"line": 57,"col": 4,"name": "SymByteSize"},{"file": 24,"line": 58,"col": 4,"name": "C11ByteSize"},{"file": 24,"line": 59,"col": 4,"name": "C13ByteSize"},{"file": 24,"line": 60,"col": 4,"name": "SourceFileCount"},{"file": 24,"line": 61,"col": 4,"name": "Padding"},{"file": 24,"line": 62,"col": 4,"name": "Unused2"},{"file": 24,"line": 63,"col": 4,"name": "SourceFileNameIndex"},{"file": 24,"line": 64,"col": 4,"name": "PdbFilePathNameIndex"},{"file": 24,"line": 41,"col": 4,"docs": " COFF Section index, 1-based\n","name": "Section"},{"file": 24,"line": 42,"col": 4,"name": "Padding1"},{"file": 24,"line": 43,"col": 4,"name": "Offset"},{"file": 24,"line": 44,"col": 4,"name": "Size"},{"file": 24,"line": 45,"col": 4,"name": "Characteristics"},{"file": 24,"line": 46,"col": 4,"name": "ModuleIndex"},{"file": 24,"line": 47,"col": 4,"name": "Padding2"},{"file": 24,"line": 48,"col": 4,"name": "DataCrc"},{"file": 24,"line": 49,"col": 4,"name": "RelocCrc"},{"file": 24,"line": 462,"col": 4,"name": "in_file"},{"file": 24,"line": 463,"col": 4,"name": "allocator"},{"file": 24,"line": 464,"col": 4,"name": "coff"},{"file": 24,"line": 465,"col": 4,"name": "string_table"},{"file": 24,"line": 466,"col": 4,"name": "dbi"},{"file": 24,"line": 468,"col": 4,"name": "msf"},{"file": 24,"line": 492,"col": 4,"name": "directory"},{"file": 24,"line": 493,"col": 4,"name": "streams"},{"file": 25,"line": 33,"col": 4,"name": "in_file"},{"file": 25,"line": 34,"col": 4,"name": "allocator"},{"file": 25,"line": 36,"col": 4,"name": "coff_header"},{"file": 25,"line": 37,"col": 4,"name": "pe_header"},{"file": 25,"line": 38,"col": 4,"name": "sections"},{"file": 25,"line": 40,"col": 4,"name": "guid"},{"file": 25,"line": 41,"col": 4,"name": "age"},{"file": 25,"line": 241,"col": 4,"name": "magic"},{"file": 25,"line": 242,"col": 4,"name": "data_directory"},{"file": 25,"line": 226,"col": 4,"name": "machine"},{"file": 25,"line": 227,"col": 4,"name": "number_of_sections"},{"file": 25,"line": 228,"col": 4,"name": "timedate_stamp"},{"file": 25,"line": 229,"col": 4,"name": "pointer_to_symbol_table"},{"file": 25,"line": 230,"col": 4,"name": "number_of_symbols"},{"file": 25,"line": 231,"col": 4,"name": "size_of_optional_header"},{"file": 25,"line": 232,"col": 4,"name": "characteristics"},{"file": 27,"line": 103,"col": 4,"name": "from"},{"file": 27,"line": 104,"col": 4,"name": "to"},{"file": 27,"line": 105,"col": 4,"name": "count"},{"file": 27,"line": 106,"col": 4,"name": "range"},{"file": 34,"line": 11,"col": 4,"name": "magic"},{"file": 34,"line": 12,"col": 4,"name": "cputype"},{"file": 34,"line": 13,"col": 4,"name": "cpusubtype"},{"file": 34,"line": 14,"col": 4,"name": "filetype"},{"file": 34,"line": 15,"col": 4,"name": "ncmds"},{"file": 34,"line": 16,"col": 4,"name": "sizeofcmds"},{"file": 34,"line": 17,"col": 4,"name": "flags"},{"file": 34,"line": 18,"col": 4,"name": "reserved"},{"file": 34,"line": 207,"col": 4,"docs": " name of this section\n","name": "sectname"},{"file": 34,"line": 210,"col": 4,"docs": " segment this section goes in\n","name": "segname"},{"file": 34,"line": 213,"col": 4,"docs": " memory address of this section\n","name": "addr"},{"file": 34,"line": 216,"col": 4,"docs": " size in bytes of this section\n","name": "size"},{"file": 34,"line": 219,"col": 4,"docs": " file offset of this section\n","name": "offset"},{"file": 34,"line": 222,"col": 4,"docs": " section alignment (power of 2)\n","name": "align"},{"file": 34,"line": 225,"col": 4,"docs": " file offset of relocation entries\n","name": "reloff"},{"file": 34,"line": 228,"col": 4,"docs": " number of relocation entries\n","name": "nreloc"},{"file": 34,"line": 231,"col": 4,"docs": " flags (section type and attributes\n","name": "flags"},{"file": 34,"line": 234,"col": 4,"docs": " reserved (for offset or index)\n","name": "reserved1"},{"file": 34,"line": 237,"col": 4,"docs": " reserved (for count or sizeof)\n","name": "reserved2"},{"file": 34,"line": 240,"col": 4,"docs": " reserved\n","name": "reserved3"},{"file": 34,"line": 31,"col": 4,"docs": " LC_SYMTAB\n","name": "cmd"},{"file": 34,"line": 34,"col": 4,"docs": " sizeof(struct symtab_command)\n","name": "cmdsize"},{"file": 34,"line": 37,"col": 4,"docs": " symbol table offset\n","name": "symoff"},{"file": 34,"line": 40,"col": 4,"docs": " number of symbol table entries\n","name": "nsyms"},{"file": 34,"line": 43,"col": 4,"docs": " string table offset\n","name": "stroff"},{"file": 34,"line": 46,"col": 4,"docs": " string table size in bytes\n","name": "strsize"},{"file": 34,"line": 114,"col": 4,"docs": " LC_SEGMENT_64\n","name": "cmd"},{"file": 34,"line": 117,"col": 4,"docs": " includes sizeof section_64 structs\n","name": "cmdsize"},{"file": 34,"line": 120,"col": 4,"docs": " segment name\n","name": "segname"},{"file": 34,"line": 123,"col": 4,"docs": " memory address of this segment\n","name": "vmaddr"},{"file": 34,"line": 126,"col": 4,"docs": " memory size of this segment\n","name": "vmsize"},{"file": 34,"line": 129,"col": 4,"docs": " file offset of this segment\n","name": "fileoff"},{"file": 34,"line": 132,"col": 4,"docs": " amount to map from the file\n","name": "filesize"},{"file": 34,"line": 135,"col": 4,"docs": " maximum VM protection\n","name": "maxprot"},{"file": 34,"line": 138,"col": 4,"docs": " initial VM protection\n","name": "initprot"},{"file": 34,"line": 141,"col": 4,"docs": " number of sections in segment\n","name": "nsects"},{"file": 34,"line": 142,"col": 4,"name": "flags"},{"file": 34,"line": 22,"col": 4,"name": "cmd"},{"file": 34,"line": 23,"col": 4,"name": "cmdsize"},{"file": 6,"line": 513,"col": 8,"name": "have_fd"},{"file": 6,"line": 514,"col": 8,"name": "close_req_node"},{"file": 41,"line": 912,"col": 8,"name": "kqfd"},{"file": 41,"line": 913,"col": 8,"name": "final_kevent"},{"file": 41,"line": 914,"col": 8,"name": "fs_kevent_wake"},{"file": 41,"line": 915,"col": 8,"name": "fs_kevent_wait"},{"file": 41,"line": 916,"col": 8,"name": "fs_thread"},{"file": 41,"line": 917,"col": 8,"name": "fs_kqfd"},{"file": 41,"line": 918,"col": 8,"name": "fs_queue"},{"file": 41,"line": 919,"col": 8,"name": "fs_end_request"},{"file": 11,"line": 304,"col": 16,"name": "fn_type"},{"file": 11,"line": 305,"col": 16,"name": "inline_type"},{"file": 11,"line": 306,"col": 16,"name": "calling_convention"},{"file": 11,"line": 307,"col": 16,"name": "is_var_args"},{"file": 11,"line": 308,"col": 16,"name": "is_extern"},{"file": 11,"line": 309,"col": 16,"name": "is_export"},{"file": 11,"line": 310,"col": 16,"name": "lib_name"},{"file": 11,"line": 311,"col": 16,"name": "return_type"},{"file": 11,"line": 312,"col": 16,"name": "arg_names"},{"file": 25,"line": 237,"col": 8,"name": "virtual_address"},{"file": 25,"line": 238,"col": 8,"name": "size"},{"file": 48,"line": 9,"col": 4,"docs": " Do not follow pointers, only hash their value.\n","name": "Shallow"},{"file": 48,"line": 14,"col": 4,"docs": " Follow pointers, hash the pointee content.\n Only dereferences one level, ie. it is changed into .Shallow when a\n pointer type is encountered.\n","name": "Deep"},{"file": 48,"line": 19,"col": 4,"docs": " Follow pointers, hash the pointee content.\n Dereferences all pointers encountered.\n Assumes no cycle.\n","name": "DeepRecursive"},{"file": 11,"line": 317,"col": 20,"name": "Auto"},{"file": 11,"line": 318,"col": 20,"name": "Always"},{"file": 11,"line": 319,"col": 20,"name": "Never"},{"file": 4,"line": 295,"col": 22,"name": "list"},{"file": 4,"line": 295,"col": 35,"name": "new_node"},{"file": 4,"line": 397,"col": 26,"name": "list"},{"file": 4,"line": 397,"col": 39,"name": "data"},{"file": 4,"line": 397,"col": 48,"name": "allocator"},{"file": 4,"line": 385,"col": 27,"name": "list"},{"file": 4,"line": 385,"col": 40,"name": "node"},{"file": 4,"line": 385,"col": 53,"name": "allocator"},{"file": 4,"line": 309,"col": 23,"name": "list"},{"file": 4,"line": 309,"col": 36,"name": "new_node"},{"file": 4,"line": 353,"col": 19,"name": "list"},{"file": 4,"line": 232,"col": 27,"name": "list"},{"file": 4,"line": 232,"col": 40,"name": "node"},{"file": 4,"line": 232,"col": 53,"name": "new_node"},{"file": 4,"line": 253,"col": 28,"name": "list"},{"file": 4,"line": 253,"col": 41,"name": "node"},{"file": 4,"line": 253,"col": 54,"name": "new_node"},{"file": 4,"line": 274,"col": 30,"name": "list1"},{"file": 4,"line": 274,"col": 44,"name": "list2"},{"file": 4,"line": 328,"col": 22,"name": "list"},{"file": 4,"line": 328,"col": 35,"name": "node"},{"file": 4,"line": 363,"col": 24,"name": "list"},{"file": 4,"line": 376,"col": 28,"name": "list"},{"file": 4,"line": 376,"col": 41,"name": "allocator"},{"file": 5,"line": 105,"col": 20,"name": "self"},{"file": 5,"line": 113,"col": 28,"name": "self"},{"file": 5,"line": 113,"col": 41,"name": "Error","comptime": true},{"file": 5,"line": 113,"col": 63,"name": "stream"},{"file": 5,"line": 26,"col": 19,"name": "self"},{"file": 5,"line": 26,"col": 32,"name": "node"},{"file": 5,"line": 59,"col": 21,"name": "self"},{"file": 5,"line": 59,"col": 34,"name": "node"},{"file": 5,"line": 42,"col": 19,"name": "self"},{"file": 5,"line": 76,"col": 22,"name": "self"},{"file": 5,"line": 76,"col": 35,"name": "node"},{"file": 5,"line": 99,"col": 23,"name": "self"},{"file": 4,"line": 136,"col": 26,"name": "list"},{"file": 4,"line": 136,"col": 39,"name": "data"},{"file": 4,"line": 136,"col": 48,"name": "allocator"},{"file": 4,"line": 124,"col": 27,"name": "list"},{"file": 4,"line": 124,"col": 40,"name": "node"},{"file": 4,"line": 124,"col": 53,"name": "allocator"},{"file": 4,"line": 69,"col": 27,"name": "list"},{"file": 4,"line": 69,"col": 40,"name": "node"},{"file": 4,"line": 69,"col": 53,"name": "new_node"},{"file": 4,"line": 86,"col": 22,"name": "list"},{"file": 4,"line": 86,"col": 35,"name": "node"},{"file": 4,"line": 115,"col": 28,"name": "list"},{"file": 4,"line": 115,"col": 41,"name": "allocator"},{"file": 4,"line": 102,"col": 24,"name": "list"},{"file": 7,"line": 73,"col": 19,"name": "self"},{"file": 7,"line": 73,"col": 32,"name": "i"},{"file": 7,"line": 73,"col": 42,"name": "item"},{"file": 7,"line": 67,"col": 26,"name": "self"},{"file": 7,"line": 67,"col": 38,"name": "i"},{"file": 7,"line": 67,"col": 48,"name": "item"},{"file": 7,"line": 137,"col": 36,"name": "self"},{"file": 7,"line": 137,"col": 49,"name": "item"},{"file": 7,"line": 169,"col": 33,"name": "self"},{"file": 7,"line": 169,"col": 46,"name": "i"},{"file": 7,"line": 61,"col": 18,"name": "self"},{"file": 7,"line": 61,"col": 30,"name": "i"},{"file": 7,"line": 157,"col": 26,"name": "self"},{"file": 7,"line": 157,"col": 39,"name": "i"},{"file": 7,"line": 253,"col": 24,"name": "self"},{"file": 7,"line": 224,"col": 19,"name": "self"},{"file": 7,"line": 176,"col": 27,"name": "self"},{"file": 7,"line": 176,"col": 40,"name": "items"},{"file": 7,"line": 120,"col": 27,"name": "self"},{"file": 7,"line": 120,"col": 40,"name": "n"},{"file": 7,"line": 120,"col": 50,"name": "items"},{"file": 7,"line": 92,"col": 30,"name": "allocator"},{"file": 7,"line": 92,"col": 53,"name": "slice"},{"file": 7,"line": 184,"col": 22,"name": "self"},{"file": 7,"line": 184,"col": 35,"name": "new_len"},{"file": 7,"line": 44,"col": 22,"name": "self"},{"file": 7,"line": 110,"col": 22,"name": "self"},{"file": 7,"line": 110,"col": 35,"name": "n"},{"file": 7,"line": 110,"col": 45,"name": "item"},{"file": 7,"line": 190,"col": 22,"name": "self"},{"file": 7,"line": 190,"col": 35,"name": "new_len"},{"file": 7,"line": 101,"col": 28,"name": "self"},{"file": 7,"line": 144,"col": 29,"name": "self"},{"file": 7,"line": 144,"col": 42,"name": "i"},{"file": 7,"line": 230,"col": 25,"name": "self"},{"file": 7,"line": 50,"col": 23,"name": "self"},{"file": 8,"line": 68,"col": 30,"name": "self"},{"file": 8,"line": 68,"col": 43,"name": "T","comptime": true},{"file": 8,"line": 68,"col": 61,"name": "value"},{"file": 8,"line": 80,"col": 24,"name": "self"},{"file": 8,"line": 80,"col": 37,"name": "T","comptime": true},{"file": 8,"line": 80,"col": 55,"name": "value"},{"file": 8,"line": 80,"col": 65,"name": "endian"},{"file": 8,"line": 55,"col": 30,"name": "self"},{"file": 8,"line": 55,"col": 43,"name": "T","comptime": true},{"file": 8,"line": 55,"col": 61,"name": "value"},{"file": 8,"line": 62,"col": 31,"name": "self"},{"file": 8,"line": 62,"col": 44,"name": "T","comptime": true},{"file": 8,"line": 62,"col": 62,"name": "value"},{"file": 8,"line": 46,"col": 31,"name": "self"},{"file": 8,"line": 46,"col": 44,"name": "byte"},{"file": 8,"line": 46,"col": 54,"name": "n"},{"file": 8,"line": 74,"col": 27,"name": "self"},{"file": 8,"line": 74,"col": 40,"name": "T","comptime": true},{"file": 8,"line": 74,"col": 58,"name": "value"},{"file": 9,"line": 384,"col": 22,"name": "self"},{"file": 9,"line": 515,"col": 30,"name": "self"},{"file": 9,"line": 209,"col": 21,"name": "self"},{"file": 9,"line": 209,"col": 35,"name": "allocator"},{"file": 9,"line": 440,"col": 18,"name": "self"},{"file": 9,"line": 370,"col": 23,"name": "self"},{"file": 9,"line": 433,"col": 19,"name": "self"},{"file": 9,"line": 226,"col": 30,"name": "self"},{"file": 9,"line": 226,"col": 44,"name": "allocator"},{"file": 9,"line": 447,"col": 19,"name": "self"},{"file": 9,"line": 316,"col": 24,"name": "text"},{"file": 9,"line": 396,"col": 27,"name": "self"},{"file": 9,"line": 465,"col": 21,"name": "self"},{"file": 9,"line": 377,"col": 20,"name": "self"},{"file": 9,"line": 493,"col": 21,"name": "self"},{"file": 9,"line": 451,"col": 17,"name": "self"},{"file": 9,"line": 220,"col": 28,"name": "self"},{"file": 9,"line": 220,"col": 42,"name": "allocator"},{"file": 9,"line": 406,"col": 28,"name": "self"},{"file": 9,"line": 511,"col": 26,"name": "self"},{"file": 9,"line": 236,"col": 23,"name": "self"},{"file": 9,"line": 236,"col": 37,"name": "allocator"},{"file": 9,"line": 507,"col": 33,"name": "self"},{"file": 9,"line": 337,"col": 19,"name": "text"},{"file": 9,"line": 416,"col": 21,"name": "self"},{"file": 9,"line": 500,"col": 20,"name": "self"},{"file": 9,"line": 246,"col": 17,"name": "text"},{"file": 9,"line": 472,"col": 19,"name": "self"},{"file": 9,"line": 582,"col": 31,"name": "self"},{"file": 9,"line": 347,"col": 20,"name": "text"},{"file": 9,"line": 479,"col": 18,"name": "self"},{"file": 9,"line": 261,"col": 22,"name": "arch"},{"file": 9,"line": 261,"col": 34,"name": "target_os"},{"file": 9,"line": 486,"col": 18,"name": "self"},{"file": 9,"line": 357,"col": 23,"name": "arch"},{"file": 10,"line": 279,"col": 21,"name": "self"},{"file": 10,"line": 165,"col": 30,"name": "self"},{"file": 10,"line": 165,"col": 43,"name": "expected_count"},{"file": 10,"line": 203,"col": 28,"name": "self"},{"file": 10,"line": 203,"col": 41,"name": "key"},{"file": 10,"line": 203,"col": 49,"name": "value"},{"file": 10,"line": 270,"col": 24,"name": "hm"},{"file": 10,"line": 108,"col": 21,"name": "hm"},{"file": 10,"line": 207,"col": 33,"name": "self"},{"file": 10,"line": 207,"col": 46,"name": "key"},{"file": 10,"line": 207,"col": 54,"name": "value"},{"file": 10,"line": 104,"col": 22,"name": "hm"},{"file": 10,"line": 146,"col": 29,"name": "self"},{"file": 10,"line": 146,"col": 42,"name": "key"},{"file": 10,"line": 146,"col": 50,"name": "value"},{"file": 10,"line": 223,"col": 24,"name": "hm"},{"file": 10,"line": 223,"col": 41,"name": "key"},{"file": 10,"line": 197,"col": 19,"name": "self"},{"file": 10,"line": 197,"col": 32,"name": "key"},{"file": 10,"line": 197,"col": 40,"name": "value"},{"file": 10,"line": 117,"col": 21,"name": "self"},{"file": 10,"line": 227,"col": 24,"name": "hm"},{"file": 10,"line": 227,"col": 41,"name": "key"},{"file": 10,"line": 266,"col": 35,"name": "hm"},{"file": 10,"line": 266,"col": 46,"name": "key"},{"file": 10,"line": 154,"col": 29,"name": "expected_count"},{"file": 12,"line": 49,"col": 19,"name": "self"},{"file": 12,"line": 31,"col": 25,"name": "self"},{"file": 12,"line": 31,"col": 38,"name": "node"},{"file": 12,"line": 36,"col": 20,"name": "self"},{"file": 12,"line": 36,"col": 33,"name": "node"},{"file": 12,"line": 64,"col": 23,"name": "self"},{"file": 0,"line": 465,"col": 21,"name": "self"},{"file": 13,"line": 173,"col": 24,"name": "self"},{"file": 13,"line": 204,"col": 26,"name": "self"},{"file": 13,"line": 204,"col": 39,"name": "T","comptime": true},{"file": 13,"line": 231,"col": 26,"name": "self"},{"file": 13,"line": 231,"col": 39,"name": "T","comptime": true},{"file": 13,"line": 224,"col": 25,"name": "self"},{"file": 13,"line": 224,"col": 38,"name": "num_bytes"},{"file": 13,"line": 89,"col": 28,"name": "self"},{"file": 13,"line": 89,"col": 41,"name": "allocator"},{"file": 13,"line": 89,"col": 68,"name": "max_size"},{"file": 13,"line": 101,"col": 40,"name": "self"},{"file": 13,"line": 101,"col": 53,"name": "buffer"},{"file": 13,"line": 101,"col": 70,"name": "delimiter"},{"file": 13,"line": 101,"col": 85,"name": "max_size"},{"file": 13,"line": 192,"col": 30,"name": "self"},{"file": 13,"line": 192,"col": 43,"name": "T","comptime": true},{"file": 13,"line": 185,"col": 29,"name": "self"},{"file": 13,"line": 185,"col": 42,"name": "T","comptime": true},{"file": 13,"line": 180,"col": 30,"name": "self"},{"file": 13,"line": 216,"col": 26,"name": "self"},{"file": 13,"line": 216,"col": 39,"name": "ReturnType","comptime": true},{"file": 13,"line": 216,"col": 66,"name": "endian"},{"file": 13,"line": 216,"col": 90,"name": "size"},{"file": 13,"line": 162,"col": 39,"name": "self"},{"file": 13,"line": 162,"col": 52,"name": "delimiter"},{"file": 13,"line": 198,"col": 29,"name": "self"},{"file": 13,"line": 198,"col": 42,"name": "T","comptime": true},{"file": 13,"line": 137,"col": 39,"name": "self"},{"file": 13,"line": 137,"col": 52,"name": "buf"},{"file": 13,"line": 137,"col": 63,"name": "delimiter"},{"file": 13,"line": 123,"col": 39,"name": "self"},{"file": 13,"line": 123,"col": 52,"name": "allocator"},{"file": 13,"line": 123,"col": 79,"name": "delimiter"},{"file": 13,"line": 123,"col": 94,"name": "max_size"},{"file": 13,"line": 65,"col": 29,"name": "self"},{"file": 13,"line": 65,"col": 42,"name": "buffer"},{"file": 13,"line": 65,"col": 59,"name": "max_size"},{"file": 13,"line": 210,"col": 23,"name": "self"},{"file": 13,"line": 210,"col": 36,"name": "T","comptime": true},{"file": 13,"line": 210,"col": 54,"name": "endian"},{"file": 0,"line": 749,"col": 30,"name": "allocator"},{"file": 0,"line": 716,"col": 31,"name": "allocator"},{"file": 0,"line": 479,"col": 39},{"file": 0,"line": 479,"col": 44},{"file": 0,"line": 473,"col": 12,"name": "run_assert","comptime": true},{"file": 0,"line": 473,"col": 39,"name": "ok"},{"file": 31,"line": 481,"col": 17,"name": "self"},{"file": 35,"line": 345,"col": 26,"name": "file"},{"file": 35,"line": 224,"col": 16,"name": "self"},{"file": 35,"line": 49,"col": 21,"name": "path_w"},{"file": 35,"line": 107,"col": 30,"name": "path"},{"file": 35,"line": 107,"col": 48,"name": "file_mode"},{"file": 35,"line": 63,"col": 21,"name": "path"},{"file": 35,"line": 200,"col": 23,"name": "self"},{"file": 35,"line": 200,"col": 35,"name": "offset"},{"file": 35,"line": 195,"col": 18,"name": "self"},{"file": 35,"line": 195,"col": 30,"name": "offset"},{"file": 35,"line": 211,"col": 18,"name": "self"},{"file": 35,"line": 323,"col": 24,"name": "self"},{"file": 35,"line": 323,"col": 36,"name": "iovecs"},{"file": 35,"line": 91,"col": 26,"name": "path_w"},{"file": 35,"line": 91,"col": 48,"name": "file_mode"},{"file": 35,"line": 80,"col": 26,"name": "path"},{"file": 35,"line": 80,"col": 45,"name": "file_mode"},{"file": 35,"line": 70,"col": 25,"name": "path"},{"file": 35,"line": 70,"col": 43,"name": "file_mode"},{"file": 35,"line": 126,"col": 31,"name": "path_w"},{"file": 35,"line": 126,"col": 53,"name": "file_mode"},{"file": 35,"line": 148,"col": 18,"name": "path"},{"file": 35,"line": 287,"col": 8,"name": "self"},{"file": 35,"line": 289,"col": 8,"docs": " access timestamp in nanoseconds\n","name": "atime"},{"file": 35,"line": 291,"col": 8,"docs": " last modification timestamp in nanoseconds\n","name": "mtime"},{"file": 35,"line": 158,"col": 19,"name": "path"},{"file": 35,"line": 153,"col": 19,"name": "path"},{"file": 35,"line": 116,"col": 31,"name": "path"},{"file": 35,"line": 116,"col": 50,"name": "file_mode"},{"file": 31,"line": 358,"col": 18,"name": "self"},{"file": 37,"line": 64,"col": 22,"name": "self"},{"file": 38,"line": 120,"col": 18,"name": "self"},{"file": 39,"line": 170,"col": 16,"name": "seed"},{"file": 39,"line": 170,"col": 27,"name": "input"},{"file": 39,"line": 119,"col": 16,"name": "seed"},{"file": 39,"line": 119,"col": 27,"name": "input"},{"file": 4,"line": 202,"col": 24,"name": "data"},{"file": 5,"line": 222,"col": 13,"name": "ctx"},{"file": 5,"line": 240,"col": 13,"name": "ctx"},{"file": 6,"line": 275,"col": 21,"name": "loop"},{"file": 6,"line": 275,"col": 34,"name": "fd"},{"file": 6,"line": 275,"col": 44,"name": "data"},{"file": 6,"line": 275,"col": 64,"name": "offset"},{"file": 6,"line": 468,"col": 4,"name": "loop"},{"file": 6,"line": 469,"col": 4,"name": "path"},{"file": 6,"line": 470,"col": 4,"name": "mode"},{"file": 6,"line": 633,"col": 21,"name": "loop"},{"file": 6,"line": 633,"col": 34,"name": "path"},{"file": 6,"line": 633,"col": 52,"name": "contents"},{"file": 6,"line": 633,"col": 74,"name": "mode"},{"file": 6,"line": 130,"col": 21,"name": "loop"},{"file": 6,"line": 130,"col": 34,"name": "fd"},{"file": 6,"line": 130,"col": 44,"name": "data"},{"file": 6,"line": 130,"col": 62,"name": "offset"},{"file": 6,"line": 244,"col": 14,"name": "loop"},{"file": 6,"line": 244,"col": 27,"name": "fd"},{"file": 6,"line": 244,"col": 37,"name": "data"},{"file": 6,"line": 244,"col": 57,"name": "offset"},{"file": 6,"line": 299,"col": 20,"name": "loop"},{"file": 6,"line": 299,"col": 33,"name": "fd"},{"file": 6,"line": 299,"col": 43,"name": "data"},{"file": 6,"line": 299,"col": 55,"name": "offset"},{"file": 6,"line": 88,"col": 15,"name": "loop"},{"file": 6,"line": 88,"col": 28,"name": "fd"},{"file": 6,"line": 88,"col": 38,"name": "data"},{"file": 6,"line": 88,"col": 64,"name": "offset"},{"file": 6,"line": 171,"col": 4,"name": "loop"},{"file": 6,"line": 172,"col": 4,"name": "fd"},{"file": 6,"line": 173,"col": 4,"name": "iovecs"},{"file": 6,"line": 174,"col": 4,"name": "offset"},{"file": 6,"line": 437,"col": 17,"name": "loop"},{"file": 6,"line": 437,"col": 30,"name": "path"},{"file": 6,"line": 376,"col": 4,"name": "loop"},{"file": 6,"line": 377,"col": 4,"name": "path"},{"file": 6,"line": 378,"col": 4,"name": "flags"},{"file": 6,"line": 379,"col": 4,"name": "mode"},{"file": 6,"line": 339,"col": 4,"name": "loop"},{"file": 6,"line": 340,"col": 4,"name": "fd"},{"file": 6,"line": 341,"col": 4,"name": "iovecs"},{"file": 6,"line": 342,"col": 4,"name": "offset"},{"file": 6,"line": 118,"col": 22,"name": "loop"},{"file": 6,"line": 118,"col": 35,"name": "fd"},{"file": 6,"line": 118,"col": 45,"name": "data"},{"file": 6,"line": 118,"col": 71,"name": "offset"},{"file": 6,"line": 209,"col": 4,"name": "loop"},{"file": 6,"line": 210,"col": 4,"name": "fd"},{"file": 6,"line": 211,"col": 4,"name": "iovecs"},{"file": 6,"line": 442,"col": 21,"name": "loop"},{"file": 6,"line": 442,"col": 34,"name": "path"},{"file": 6,"line": 442,"col": 52,"name": "mode"},{"file": 6,"line": 699,"col": 16,"name": "loop"},{"file": 6,"line": 699,"col": 29,"name": "file_path"},{"file": 6,"line": 699,"col": 52,"name": "max_size"},{"file": 6,"line": 414,"col": 16,"name": "loop"},{"file": 6,"line": 414,"col": 29,"name": "path"},{"file": 6,"line": 628,"col": 17,"name": "loop"},{"file": 6,"line": 628,"col": 30,"name": "path"},{"file": 6,"line": 628,"col": 48,"name": "contents"},{"file": 6,"line": 735,"col": 14,"name": "s"},{"file": 6,"line": 1340,"col": 15,"name": "loop"},{"file": 6,"line": 1336,"col": 23,"name": "loop"},{"file": 6,"line": 1336,"col": 36,"name": "result"},{"file": 6,"line": 646,"col": 20,"name": "loop"},{"file": 6,"line": 646,"col": 33,"name": "path"},{"file": 6,"line": 646,"col": 51,"name": "contents"},{"file": 6,"line": 729,"col": 13,"name": "a"},{"file": 6,"line": 729,"col": 29,"name": "b"},{"file": 6,"line": 661,"col": 23,"name": "loop"},{"file": 6,"line": 661,"col": 36,"name": "path"},{"file": 6,"line": 661,"col": 54,"name": "contents"},{"file": 6,"line": 661,"col": 76,"name": "mode"},{"file": 4,"line": 45,"col": 30,"name": "node"},{"file": 4,"line": 34,"col": 31,"name": "node"},{"file": 4,"line": 34,"col": 44,"name": "new_node"},{"file": 4,"line": 23,"col": 24,"name": "data"},{"file": 10,"line": 546,"col": 20,"name": "K","comptime": true},{"file": 10,"line": 28,"col": 18,"name": "s"},{"file": 10,"line": 554,"col": 26,"name": "K","comptime": true},{"file": 10,"line": 554,"col": 44,"name": "strategy","comptime": true},{"file": 10,"line": 15,"col": 19,"name": "K","comptime": true},{"file": 10,"line": 15,"col": 37,"name": "V","comptime": true},{"file": 10,"line": 24,"col": 17,"name": "a"},{"file": 10,"line": 24,"col": 32,"name": "b"},{"file": 10,"line": 20,"col": 21,"name": "V","comptime": true},{"file": 12,"line": 149,"col": 13,"name": "ctx"},{"file": 12,"line": 166,"col": 13,"name": "ctx"},{"file": 14,"line": 129,"col": 25,"name": "T","comptime": true},{"file": 14,"line": 129,"col": 43,"name": "expected"},{"file": 14,"line": 129,"col": 64,"name": "actual"},{"file": 14,"line": 6,"col": 19,"name": "expected_error"},{"file": 14,"line": 6,"col": 45,"name": "actual_error_union"},{"file": 15,"line": 368,"col": 15,"name": "T","comptime": true},{"file": 15,"line": 368,"col": 33,"name": "ptr"},{"file": 15,"line": 1484,"col": 19,"name": "ptr"},{"file": 15,"line": 1484,"col": 29,"name": "start","comptime": true},{"file": 15,"line": 1484,"col": 52,"name": "length","comptime": true},{"file": 15,"line": 706,"col": 24,"name": "T","comptime": true},{"file": 15,"line": 706,"col": 42,"name": "buffer"},{"file": 15,"line": 706,"col": 56,"name": "value"},{"file": 15,"line": 1389,"col": 15,"name": "value"},{"file": 15,"line": 1464,"col": 20,"name": "T","comptime": true},{"file": 15,"line": 1464,"col": 38,"name": "bytes"},{"file": 15,"line": 658,"col": 23,"name": "T","comptime": true},{"file": 15,"line": 658,"col": 41,"name": "buf"},{"file": 15,"line": 658,"col": 78,"name": "value"},{"file": 15,"line": 851,"col": 16,"name": "buffer"},{"file": 15,"line": 851,"col": 36,"name": "delimiter"},{"file": 15,"line": 1209,"col": 11,"name": "T","comptime": true},{"file": 15,"line": 1209,"col": 29,"name": "slice"},{"file": 15,"line": 892,"col": 18,"name": "T","comptime": true},{"file": 15,"line": 892,"col": 36,"name": "haystack"},{"file": 15,"line": 892,"col": 57,"name": "needle"},{"file": 15,"line": 432,"col": 24,"name": "T","comptime": true},{"file": 15,"line": 432,"col": 42,"name": "slice"},{"file": 15,"line": 432,"col": 60,"name": "start_index"},{"file": 15,"line": 432,"col": 80,"name": "value"},{"file": 15,"line": 465,"col": 15,"name": "T","comptime": true},{"file": 15,"line": 465,"col": 33,"name": "haystack"},{"file": 15,"line": 465,"col": 54,"name": "needle"},{"file": 15,"line": 675,"col": 16,"name": "T","comptime": true},{"file": 15,"line": 675,"col": 34,"name": "buffer"},{"file": 15,"line": 675,"col": 74,"name": "value"},{"file": 15,"line": 675,"col": 84,"name": "endian"},{"file": 15,"line": 423,"col": 25,"name": "T","comptime": true},{"file": 15,"line": 423,"col": 43,"name": "slice"},{"file": 15,"line": 423,"col": 61,"name": "value"},{"file": 15,"line": 689,"col": 27,"name": "T","comptime": true},{"file": 15,"line": 689,"col": 45,"name": "buffer"},{"file": 15,"line": 689,"col": 59,"name": "value"},{"file": 15,"line": 1197,"col": 11,"name": "T","comptime": true},{"file": 15,"line": 1197,"col": 29,"name": "slice"},{"file": 15,"line": 455,"col": 21,"name": "T","comptime": true},{"file": 15,"line": 455,"col": 39,"name": "slice"},{"file": 15,"line": 455,"col": 57,"name": "start_index"},{"file": 15,"line": 455,"col": 77,"name": "values"},{"file": 15,"line": 388,"col": 16,"name": "T","comptime": true},{"file": 15,"line": 388,"col": 34,"name": "slice"},{"file": 15,"line": 388,"col": 52,"name": "values_to_strip"},{"file": 15,"line": 514,"col": 18,"name": "ReturnType","comptime": true},{"file": 15,"line": 514,"col": 45,"name": "bytes"},{"file": 15,"line": 514,"col": 64,"name": "endian"},{"file": 15,"line": 1538,"col": 17,"name": "addr"},{"file": 15,"line": 1538,"col": 30,"name": "alignment"},{"file": 15,"line": 736,"col": 21,"name": "T","comptime": true},{"file": 15,"line": 736,"col": 39,"name": "buffer"},{"file": 15,"line": 736,"col": 53,"name": "value"},{"file": 15,"line": 736,"col": 63,"name": "endian"},{"file": 15,"line": 977,"col": 12,"name": "allocator"},{"file": 15,"line": 977,"col": 35,"name": "separator"},{"file": 15,"line": 977,"col": 58,"name": "slices"},{"file": 15,"line": 1012,"col": 14,"name": "allocator"},{"file": 15,"line": 1012,"col": 37,"name": "T","comptime": true},{"file": 15,"line": 1012,"col": 55,"name": "slices"},{"file": 15,"line": 1421,"col": 20,"name": "T","comptime": true},{"file": 15,"line": 1421,"col": 38,"name": "bytes"},{"file": 15,"line": 1299,"col": 16,"name": "T","comptime": true},{"file": 15,"line": 1299,"col": 34,"name": "x"},{"file": 15,"line": 1299,"col": 40,"name": "endianness_of_x"},{"file": 15,"line": 483,"col": 18,"name": "T","comptime": true},{"file": 15,"line": 483,"col": 36,"name": "haystack"},{"file": 15,"line": 483,"col": 57,"name": "start_index"},{"file": 15,"line": 483,"col": 77,"name": "needle"},{"file": 15,"line": 1315,"col": 22,"name": "T","comptime": true},{"file": 15,"line": 1315,"col": 40,"name": "x"},{"file": 15,"line": 1307,"col": 16,"name": "T","comptime": true},{"file": 15,"line": 1307,"col": 34,"name": "x"},{"file": 15,"line": 1307,"col": 40,"name": "desired_endianness"},{"file": 15,"line": 444,"col": 22,"name": "T","comptime": true},{"file": 15,"line": 444,"col": 40,"name": "slice"},{"file": 15,"line": 444,"col": 58,"name": "values"},{"file": 15,"line": 1283,"col": 22,"name": "T","comptime": true},{"file": 15,"line": 1283,"col": 40,"name": "x"},{"file": 15,"line": 1291,"col": 19,"name": "T","comptime": true},{"file": 15,"line": 1291,"col": 37,"name": "x"},{"file": 15,"line": 418,"col": 21,"name": "T","comptime": true},{"file": 15,"line": 418,"col": 39,"name": "slice"},{"file": 15,"line": 418,"col": 57,"name": "value"},{"file": 15,"line": 1323,"col": 19,"name": "T","comptime": true},{"file": 15,"line": 1323,"col": 37,"name": "x"},{"file": 15,"line": 650,"col": 22,"name": "T","comptime": true},{"file": 15,"line": 650,"col": 40,"name": "buf"},{"file": 15,"line": 650,"col": 73,"name": "value"},{"file": 15,"line": 298,"col": 15,"name": "T","comptime": true},{"file": 15,"line": 298,"col": 33,"name": "lhs"},{"file": 15,"line": 298,"col": 49,"name": "rhs"},{"file": 15,"line": 440,"col": 18,"name": "T","comptime": true},{"file": 15,"line": 440,"col": 36,"name": "slice"},{"file": 15,"line": 440,"col": 54,"name": "values"},{"file": 15,"line": 332,"col": 16,"name": "T","comptime": true},{"file": 15,"line": 332,"col": 34,"name": "lhs"},{"file": 15,"line": 332,"col": 50,"name": "rhs"},{"file": 15,"line": 901,"col": 16,"name": "T","comptime": true},{"file": 15,"line": 901,"col": 34,"name": "haystack"},{"file": 15,"line": 901,"col": 55,"name": "needle"},{"file": 15,"line": 402,"col": 12,"name": "T","comptime": true},{"file": 15,"line": 402,"col": 30,"name": "slice"},{"file": 15,"line": 402,"col": 48,"name": "values_to_strip"},{"file": 15,"line": 789,"col": 16,"name": "buffer"},{"file": 15,"line": 789,"col": 36,"name": "delimiter_bytes"},{"file": 15,"line": 395,"col": 17,"name": "T","comptime": true},{"file": 15,"line": 395,"col": 35,"name": "slice"},{"file": 15,"line": 395,"col": 53,"name": "values_to_strip"},{"file": 15,"line": 280,"col": 18,"name": "T","comptime": true},{"file": 15,"line": 280,"col": 36,"name": "s"},{"file": 15,"line": 472,"col": 19,"name": "T","comptime": true},{"file": 15,"line": 472,"col": 37,"name": "haystack"},{"file": 15,"line": 472,"col": 58,"name": "needle"},{"file": 15,"line": 575,"col": 27,"name": "T","comptime": true},{"file": 15,"line": 575,"col": 45,"name": "bytes"},{"file": 15,"line": 262,"col": 21,"name": "T","comptime": true},{"file": 15,"line": 262,"col": 39,"name": "dest"},{"file": 15,"line": 262,"col": 50,"name": "source"},{"file": 15,"line": 373,"col": 16,"name": "T","comptime": true},{"file": 15,"line": 373,"col": 34,"name": "slice"},{"file": 15,"line": 373,"col": 52,"name": "scalar"},{"file": 15,"line": 1407,"col": 26,"name": "T","comptime": true},{"file": 15,"line": 1407,"col": 44,"name": "B","comptime": true},{"file": 15,"line": 1477,"col": 25,"name": "T","comptime": true},{"file": 15,"line": 1477,"col": 43,"name": "length","comptime": true},{"file": 16,"line": 394,"col": 12,"name": "T","comptime": true},{"file": 16,"line": 394,"col": 30,"name": "x"},{"file": 16,"line": 394,"col": 36,"name": "r"},{"file": 16,"line": 664,"col": 15,"name": "x"},{"file": 16,"line": 570,"col": 16,"name": "T","comptime": true},{"file": 16,"line": 570,"col": 34,"name": "numerator"},{"file": 16,"line": 570,"col": 48,"name": "denominator"},{"file": 16,"line": 796,"col": 22,"name": "T","comptime": true},{"file": 16,"line": 796,"col": 40,"name": "value"},{"file": 16,"line": 366,"col": 11,"name": "T","comptime": true},{"file": 16,"line": 366,"col": 29,"name": "a"},{"file": 16,"line": 366,"col": 35,"name": "shift_amt"},{"file": 16,"line": 319,"col": 11,"name": "T","comptime": true},{"file": 16,"line": 319,"col": 29,"name": "a"},{"file": 16,"line": 319,"col": 35,"name": "b"},{"file": 16,"line": 868,"col": 17,"name": "T","comptime": true},{"file": 16,"line": 868,"col": 35,"name": "value"},{"file": 16,"line": 616,"col": 11,"name": "T","comptime": true},{"file": 16,"line": 616,"col": 29,"name": "numerator"},{"file": 16,"line": 616,"col": 43,"name": "denominator"},{"file": 16,"line": 847,"col": 21,"name": "T","comptime": true},{"file": 16,"line": 847,"col": 39,"name": "x"},{"file": 16,"line": 784,"col": 29,"name": "T","comptime": true},{"file": 16,"line": 784,"col": 47,"name": "value"},{"file": 16,"line": 333,"col": 16,"name": "T","comptime": true},{"file": 16,"line": 333,"col": 34,"name": "a"},{"file": 16,"line": 333,"col": 40,"name": "shift_amt"},{"file": 16,"line": 639,"col": 11,"name": "T","comptime": true},{"file": 16,"line": 639,"col": 29,"name": "numerator"},{"file": 16,"line": 639,"col": 43,"name": "denominator"},{"file": 16,"line": 324,"col": 11,"name": "T","comptime": true},{"file": 16,"line": 324,"col": 29,"name": "a"},{"file": 16,"line": 324,"col": 35,"name": "b"},{"file": 16,"line": 208,"col": 25,"name": "T","comptime": true},{"file": 16,"line": 441,"col": 23,"name": "from","comptime": true},{"file": 16,"line": 441,"col": 52,"name": "to","comptime": true},{"file": 16,"line": 413,"col": 12,"name": "T","comptime": true},{"file": 16,"line": 413,"col": 30,"name": "x"},{"file": 16,"line": 413,"col": 36,"name": "r"},{"file": 16,"line": 329,"col": 14,"name": "x"},{"file": 16,"line": 743,"col": 17,"name": "alignment","comptime": true},{"file": 16,"line": 743,"col": 42,"name": "ptr"},{"file": 16,"line": 591,"col": 16,"name": "T","comptime": true},{"file": 16,"line": 591,"col": 34,"name": "numerator"},{"file": 16,"line": 591,"col": 48,"name": "denominator"},{"file": 16,"line": 695,"col": 18,"name": "x"},{"file": 16,"line": 105,"col": 17,"name": "value"},{"file": 16,"line": 340,"col": 11,"name": "T","comptime": true},{"file": 16,"line": 340,"col": 29,"name": "a"},{"file": 16,"line": 340,"col": 35,"name": "shift_amt"},{"file": 16,"line": 99,"col": 16,"name": "T","comptime": true},{"file": 16,"line": 99,"col": 34,"name": "x"},{"file": 16,"line": 99,"col": 40,"name": "y"},{"file": 16,"line": 99,"col": 46,"name": "epsilon"},{"file": 16,"line": 221,"col": 25,"name": "T","comptime": true},{"file": 16,"line": 516,"col": 14,"name": "x"},{"file": 16,"line": 549,"col": 16,"name": "T","comptime": true},{"file": 16,"line": 549,"col": 34,"name": "numerator"},{"file": 16,"line": 549,"col": 48,"name": "denominator"},{"file": 43,"line": 74,"col": 16,"name": "self"},{"file": 43,"line": 70,"col": 18,"name": "self"},{"file": 43,"line": 143,"col": 17,"name": "context"},{"file": 43,"line": 143,"col": 31,"name": "startFn","comptime": true},{"file": 36,"line": 768,"col": 19,"name": "x"},{"file": 17,"line": 3067,"col": 12,"name": "fds"},{"file": 17,"line": 3067,"col": 27,"name": "timeout"},{"file": 17,"line": 1775,"col": 21,"name": "flags"},{"file": 17,"line": 786,"col": 16,"name": "file"},{"file": 17,"line": 786,"col": 35,"name": "child_argv"},{"file": 17,"line": 786,"col": 70,"name": "envp"},{"file": 17,"line": 2881,"col": 4,"name": "op"},{"file": 17,"line": 2882,"col": 4,"name": "dname"},{"file": 17,"line": 2883,"col": 4,"name": "class"},{"file": 17,"line": 2884,"col": 4,"name": "ty"},{"file": 17,"line": 2885,"col": 4,"name": "data"},{"file": 17,"line": 2886,"col": 4,"name": "newrr"},{"file": 17,"line": 2887,"col": 4,"name": "buf"},{"file": 17,"line": 2853,"col": 19,"name": "name_buffer"},{"file": 17,"line": 3055,"col": 4,"docs": " The file descriptor of the sending socket.\n","name": "sockfd"},{"file": 17,"line": 3056,"col": 4,"name": "buf"},{"file": 17,"line": 3057,"col": 4,"name": "flags"},{"file": 17,"line": 2365,"col": 4,"name": "name"},{"file": 17,"line": 2366,"col": 4,"name": "oldp"},{"file": 17,"line": 2367,"col": 4,"name": "oldlenp"},{"file": 17,"line": 2368,"col": 4,"name": "newp"},{"file": 17,"line": 2369,"col": 4,"name": "newlen"},{"file": 17,"line": 699,"col": 15,"name": "dir_fd"},{"file": 17,"line": 699,"col": 29,"name": "file_path"},{"file": 17,"line": 699,"col": 53,"name": "flags"},{"file": 17,"line": 699,"col": 65,"name": "mode"},{"file": 17,"line": 2437,"col": 17,"name": "fd"},{"file": 17,"line": 2437,"col": 27,"name": "offset"},{"file": 36,"line": 1163,"col": 15,"name": "m"},{"file": 17,"line": 2125,"col": 25,"name": "inotify_fd"},{"file": 17,"line": 2125,"col": 42,"name": "pathname"},{"file": 17,"line": 2125,"col": 64,"name": "mask"},{"file": 17,"line": 2648,"col": 4,"name": "T","comptime": true},{"file": 17,"line": 2649,"col": 4,"name": "callback"},{"file": 17,"line": 2650,"col": 4,"name": "data"},{"file": 17,"line": 2838,"col": 16,"name": "fd"},{"file": 17,"line": 2838,"col": 26,"name": "times"},{"file": 36,"line": 1179,"col": 16,"name": "m"},{"file": 17,"line": 954,"col": 15,"name": "target_path"},{"file": 17,"line": 954,"col": 40,"name": "sym_link_path"},{"file": 36,"line": 774,"col": 16,"name": "x"},{"file": 17,"line": 2068,"col": 4,"name": "kq"},{"file": 17,"line": 2069,"col": 4,"name": "changelist"},{"file": 17,"line": 2070,"col": 4,"name": "eventlist"},{"file": 17,"line": 2071,"col": 4,"name": "timeout"},{"file": 36,"line": 1167,"col": 15,"name": "m"},{"file": 17,"line": 1481,"col": 16,"name": "ruid"},{"file": 17,"line": 1481,"col": 27,"name": "euid"},{"file": 17,"line": 2736,"col": 25,"name": "pid"},{"file": 17,"line": 3127,"col": 4,"name": "msg"},{"file": 17,"line": 3128,"col": 4,"name": "comp_dn"},{"file": 17,"line": 3129,"col": 4,"name": "exp_dn"},{"file": 17,"line": 2995,"col": 4,"docs": " The file descriptor of the sending socket.\n","name": "sockfd"},{"file": 17,"line": 2997,"col": 4,"docs": " Message to send.\n","name": "buf"},{"file": 17,"line": 2998,"col": 4,"name": "flags"},{"file": 17,"line": 2999,"col": 4,"name": "dest_addr"},{"file": 17,"line": 3000,"col": 4,"name": "addrlen"},{"file": 17,"line": 846,"col": 33,"name": "allocator"},{"file": 17,"line": 846,"col": 60,"name": "env_map"},{"file": 17,"line": 1444,"col": 19,"name": "dirfd"},{"file": 17,"line": 1444,"col": 32,"name": "file_path"},{"file": 17,"line": 1444,"col": 56,"name": "out_buffer"},{"file": 17,"line": 245,"col": 12,"name": "status"},{"file": 17,"line": 2346,"col": 13,"name": "flags"},{"file": 17,"line": 116,"col": 17,"name": "buffer"},{"file": 17,"line": 333,"col": 13,"name": "fd"},{"file": 17,"line": 333,"col": 23,"name": "iov"},{"file": 17,"line": 913,"col": 14,"name": "out_buffer"},{"file": 17,"line": 1471,"col": 14,"name": "uid"},{"file": 17,"line": 1381,"col": 14,"name": "dir_path"},{"file": 36,"line": 1159,"col": 15,"name": "m"},{"file": 17,"line": 2790,"col": 19,"name": "ss"},{"file": 17,"line": 2790,"col": 34,"name": "old_ss"},{"file": 17,"line": 1323,"col": 13,"name": "dir_path"},{"file": 17,"line": 2277,"col": 14,"name": "path"},{"file": 17,"line": 2277,"col": 32,"name": "mode"},{"file": 17,"line": 1284,"col": 14,"name": "dir_path"},{"file": 17,"line": 1284,"col": 37,"name": "mode"},{"file": 17,"line": 2131,"col": 26,"name": "inotify_fd"},{"file": 17,"line": 2131,"col": 43,"name": "pathname"},{"file": 17,"line": 2131,"col": 66,"name": "mask"},{"file": 17,"line": 2554,"col": 16,"name": "pathname"},{"file": 17,"line": 2554,"col": 38,"name": "out_buffer"},{"file": 17,"line": 1993,"col": 15,"name": "pid"},{"file": 17,"line": 1993,"col": 25,"name": "flags"},{"file": 36,"line": 780,"col": 18,"name": "x"},{"file": 17,"line": 2493,"col": 21,"name": "fd"},{"file": 17,"line": 818,"col": 4,"name": "allocator"},{"file": 17,"line": 819,"col": 4,"name": "argv_slice"},{"file": 17,"line": 820,"col": 4,"name": "env_map"},{"file": 17,"line": 2716,"col": 21,"name": "clk_id"},{"file": 17,"line": 2716,"col": 34,"name": "tp"},{"file": 17,"line": 2564,"col": 17,"name": "pathname"},{"file": 17,"line": 2564,"col": 40,"name": "out_buffer"},{"file": 17,"line": 1334,"col": 14,"name": "dir_path"},{"file": 17,"line": 361,"col": 14,"name": "fd"},{"file": 17,"line": 361,"col": 24,"name": "iov"},{"file": 17,"line": 361,"col": 44,"name": "offset"},{"file": 17,"line": 538,"col": 15,"name": "fd"},{"file": 17,"line": 538,"col": 25,"name": "iov"},{"file": 17,"line": 538,"col": 51,"name": "offset"},{"file": 17,"line": 2595,"col": 17,"name": "pathname"},{"file": 17,"line": 2595,"col": 41,"name": "out_buffer"},{"file": 36,"line": 783,"col": 19,"name": "x"},{"file": 17,"line": 2465,"col": 17,"name": "fd"},{"file": 17,"line": 2465,"col": 27,"name": "offset"},{"file": 17,"line": 1412,"col": 16,"name": "file_path"},{"file": 17,"line": 1412,"col": 39,"name": "out_buffer"},{"file": 17,"line": 994,"col": 17,"name": "target_path"},{"file": 17,"line": 994,"col": 42,"name": "newdirfd"},{"file": 17,"line": 994,"col": 58,"name": "sym_link_path"},{"file": 17,"line": 2148,"col": 24,"name": "inotify_fd"},{"file": 17,"line": 2148,"col": 41,"name": "wd"},{"file": 17,"line": 1959,"col": 23,"name": "sockfd"},{"file": 17,"line": 1054,"col": 15,"name": "file_path"},{"file": 17,"line": 650,"col": 12,"name": "file_path"},{"file": 17,"line": 650,"col": 35,"name": "flags"},{"file": 17,"line": 650,"col": 47,"name": "perm"},{"file": 17,"line": 1250,"col": 15,"name": "old_path"},{"file": 17,"line": 1250,"col": 39,"name": "new_path"},{"file": 17,"line": 1814,"col": 17,"name": "epfd"},{"file": 17,"line": 1814,"col": 28,"name": "op"},{"file": 17,"line": 1814,"col": 37,"name": "fd"},{"file": 17,"line": 1814,"col": 46,"name": "event"},{"file": 17,"line": 1929,"col": 15,"name": "sockfd"},{"file": 17,"line": 1929,"col": 29,"name": "sock_addr"},{"file": 17,"line": 1929,"col": 57,"name": "len"},{"file": 17,"line": 1094,"col": 17,"name": "dirfd"},{"file": 17,"line": 1094,"col": 30,"name": "file_path_c"},{"file": 17,"line": 1094,"col": 56,"name": "flags"},{"file": 17,"line": 202,"col": 13,"name": "sig"},{"file": 17,"line": 1491,"col": 14,"name": "gid"},{"file": 17,"line": 1370,"col": 13,"name": "dir_path"},{"file": 17,"line": 1000,"col": 18,"name": "target_path"},{"file": 17,"line": 1000,"col": 44,"name": "newdirfd"},{"file": 17,"line": 1000,"col": 60,"name": "sym_link_path"},{"file": 17,"line": 729,"col": 12,"name": "old_fd"},{"file": 17,"line": 729,"col": 26,"name": "new_fd"},{"file": 36,"line": 777,"col": 17,"name": "x"},{"file": 17,"line": 234,"col": 12,"name": "pid"},{"file": 17,"line": 234,"col": 24,"name": "sig"},{"file": 17,"line": 1501,"col": 16,"name": "rgid"},{"file": 17,"line": 1501,"col": 27,"name": "egid"},{"file": 36,"line": 1155,"col": 16,"name": "m"},{"file": 17,"line": 1273,"col": 13,"name": "dir_path"},{"file": 17,"line": 1273,"col": 35,"name": "mode"},{"file": 17,"line": 1874,"col": 19,"name": "sockfd"},{"file": 17,"line": 1874,"col": 33,"name": "addr"},{"file": 17,"line": 1874,"col": 50,"name": "addrlen"},{"file": 17,"line": 2315,"col": 15,"name": "path"},{"file": 17,"line": 2315,"col": 35,"name": "mode"},{"file": 17,"line": 1084,"col": 16,"name": "dirfd"},{"file": 17,"line": 1084,"col": 29,"name": "file_path"},{"file": 17,"line": 1084,"col": 52,"name": "flags"},{"file": 36,"line": 771,"col": 16,"name": "x"},{"file": 17,"line": 1423,"col": 17,"name": "file_path"},{"file": 17,"line": 1423,"col": 41,"name": "out_buffer"},{"file": 17,"line": 2104,"col": 21,"name": "flags"},{"file": 17,"line": 1043,"col": 14,"name": "file_path"},{"file": 17,"line": 2172,"col": 16,"name": "memory"},{"file": 17,"line": 2172,"col": 51,"name": "protection"},{"file": 17,"line": 1580,"col": 14,"name": "domain"},{"file": 17,"line": 1580,"col": 27,"name": "socket_type"},{"file": 17,"line": 1580,"col": 45,"name": "protocol"},{"file": 17,"line": 2288,"col": 15,"name": "path"},{"file": 17,"line": 2288,"col": 34,"name": "mode"},{"file": 36,"line": 1183,"col": 14,"name": "m"},{"file": 17,"line": 2382,"col": 4,"name": "name"},{"file": 17,"line": 2383,"col": 4,"name": "oldp"},{"file": 17,"line": 2384,"col": 4,"name": "oldlenp"},{"file": 17,"line": 2385,"col": 4,"name": "newp"},{"file": 17,"line": 2386,"col": 4,"name": "newlen"},{"file": 36,"line": 1175,"col": 15,"name": "m"},{"file": 17,"line": 1668,"col": 14,"name": "sockfd"},{"file": 17,"line": 1668,"col": 27,"name": "backlog"},{"file": 17,"line": 759,"col": 15,"name": "path"},{"file": 17,"line": 759,"col": 34,"name": "child_argv"},{"file": 17,"line": 759,"col": 69,"name": "envp"},{"file": 17,"line": 2397,"col": 20,"name": "tv"},{"file": 17,"line": 2397,"col": 35,"name": "tz"},{"file": 17,"line": 691,"col": 14,"name": "dir_fd"},{"file": 17,"line": 691,"col": 28,"name": "file_path"},{"file": 17,"line": 691,"col": 51,"name": "flags"},{"file": 17,"line": 691,"col": 63,"name": "mode"},{"file": 17,"line": 2805,"col": 17,"name": "sig"},{"file": 17,"line": 2805,"col": 26,"name": "act"},{"file": 17,"line": 2805,"col": 49,"name": "oact"},{"file": 17,"line": 508,"col": 14,"name": "fd"},{"file": 17,"line": 508,"col": 24,"name": "iov"},{"file": 17,"line": 1632,"col": 12,"name": "sockfd"},{"file": 17,"line": 1632,"col": 26,"name": "addr"},{"file": 17,"line": 1632,"col": 49,"name": "len"},{"file": 17,"line": 968,"col": 16,"name": "target_path"},{"file": 17,"line": 968,"col": 42,"name": "sym_link_path"},{"file": 17,"line": 3095,"col": 4,"name": "sockfd"},{"file": 17,"line": 3096,"col": 4,"name": "buf"},{"file": 17,"line": 3097,"col": 4,"name": "flags"},{"file": 17,"line": 3098,"col": 4,"name": "src_addr"},{"file": 17,"line": 3099,"col": 4,"name": "addrlen"},{"file": 17,"line": 1855,"col": 15,"name": "initval"},{"file": 17,"line": 1855,"col": 29,"name": "flags"},{"file": 17,"line": 1834,"col": 18,"name": "epfd"},{"file": 17,"line": 1834,"col": 29,"name": "events"},{"file": 17,"line": 1834,"col": 52,"name": "timeout"},{"file": 17,"line": 869,"col": 31,"name": "allocator"},{"file": 17,"line": 869,"col": 58,"name": "envp_buf"},{"file": 17,"line": 1709,"col": 4,"docs": " This argument is a socket that has been created with `socket`, bound to a local address\n with `bind`, and is listening for connections after a `listen`.\n","name": "sockfd"},{"file": 17,"line": 1714,"col": 4,"docs": " This argument is a pointer to a sockaddr structure.  This structure is filled in with  the\n address  of  the  peer  socket, as known to the communications layer.  The exact format of the\n address returned addr is determined by the socket's address  family  (see  `socket`  and  the\n respective  protocol  man  pages).\n","name": "addr"},{"file": 17,"line": 1721,"col": 4,"docs": " This argument is a value-result argument: the caller must initialize it to contain  the\n size (in bytes) of the structure pointed to by addr; on return it will contain the actual size\n of the peer address.\n\n The returned address is truncated if the buffer provided is too small; in this  case,  `addr_size`\n will return a value greater than was supplied to the call.\n","name": "addr_size"},{"file": 17,"line": 1729,"col": 4,"docs": " If  flags  is  0, then `accept4` is the same as `accept`.  The following values can be bitwise\n ORed in flags to obtain different behavior:\n * `SOCK_NONBLOCK` - Set the `O_NONBLOCK` file status flag on the open file description (see `open`)\n   referred  to by the new file descriptor.  Using this flag saves extra calls to `fcntl` to achieve\n   the same result.\n * `SOCK_CLOEXEC`  - Set the close-on-exec (`FD_CLOEXEC`) flag on the new file descriptor.   See  the\n   description  of the `O_CLOEXEC` flag in `open` for reasons why this may be useful.\n","name": "flags"},{"file": 17,"line": 1218,"col": 15,"name": "old_path"},{"file": 17,"line": 1218,"col": 38,"name": "new_path"},{"file": 17,"line": 1205,"col": 14,"name": "old_path"},{"file": 17,"line": 1205,"col": 36,"name": "new_path"},{"file": 17,"line": 1533,"col": 19,"name": "handle"},{"file": 17,"line": 2725,"col": 20,"name": "clk_id"},{"file": 17,"line": 2725,"col": 33,"name": "res"},{"file": 36,"line": 1171,"col": 15,"name": "m"},{"file": 17,"line": 1123,"col": 17,"name": "dirfd"},{"file": 17,"line": 1123,"col": 30,"name": "sub_path_w"},{"file": 17,"line": 1123,"col": 56,"name": "flags"},{"file": 17,"line": 158,"col": 28,"name": "buf"},{"file": 18,"line": 139,"col": 25,"name": "first_address"},{"file": 18,"line": 139,"col": 48,"name": "stack_trace"},{"file": 18,"line": 327,"col": 4,"name": "out_stream"},{"file": 18,"line": 328,"col": 4,"name": "debug_info"},{"file": 18,"line": 329,"col": 4,"name": "tty_color"},{"file": 18,"line": 330,"col": 4,"name": "start_addr"},{"file": 18,"line": 110,"col": 30,"name": "bp"},{"file": 18,"line": 110,"col": 41,"name": "ip"},{"file": 18,"line": 2452,"col": 28,"name": "prefix"},{"file": 18,"line": 775,"col": 33,"name": "debug_info"},{"file": 18,"line": 775,"col": 57,"name": "out_stream"},{"file": 18,"line": 775,"col": 74,"name": "address"},{"file": 18,"line": 775,"col": 90,"name": "tty_color"},{"file": 18,"line": 1031,"col": 26,"name": "di"},{"file": 18,"line": 1031,"col": 42,"name": "allocator"},{"file": 18,"line": 736,"col": 4,"name": "debug_info"},{"file": 18,"line": 737,"col": 4,"name": "out_stream"},{"file": 18,"line": 738,"col": 4,"name": "address"},{"file": 18,"line": 739,"col": 4,"name": "tty_color"},{"file": 18,"line": 740,"col": 4,"name": "printLineFromFile","comptime": true},{"file": 18,"line": 1040,"col": 4,"name": "allocator"},{"file": 18,"line": 1041,"col": 4,"name": "elf_seekable_stream"},{"file": 18,"line": 1042,"col": 4,"name": "elf_in_stream"},{"file": 18,"line": 1512,"col": 18,"name": "allocator"},{"file": 18,"line": 1512,"col": 45,"name": "in_stream"},{"file": 18,"line": 1512,"col": 61,"name": "size"},{"file": 18,"line": 628,"col": 18,"name": "di"},{"file": 18,"line": 628,"col": 34,"name": "mod"},{"file": 18,"line": 1664,"col": 18,"name": "di"},{"file": 18,"line": 1664,"col": 34,"name": "abbrev_offset"},{"file": 18,"line": 2441,"col": 35,"name": "info"},{"file": 18,"line": 1562,"col": 32,"name": "in_stream"},{"file": 18,"line": 1495,"col": 17,"name": "allocator"},{"file": 18,"line": 1495,"col": 44,"name": "in_stream"},{"file": 18,"line": 1002,"col": 23,"name": "stream"},{"file": 18,"line": 1002,"col": 36,"name": "allocator"},{"file": 18,"line": 1525,"col": 23,"name": "allocator"},{"file": 18,"line": 1525,"col": 50,"name": "in_stream"},{"file": 18,"line": 1525,"col": 66,"name": "size"},{"file": 18,"line": 1637,"col": 20,"name": "di"},{"file": 18,"line": 2188,"col": 23,"name": "di"},{"file": 18,"line": 1685,"col": 12,"name": "di"},{"file": 18,"line": 1685,"col": 28,"name": "abbrev_table"},{"file": 18,"line": 1685,"col": 62,"name": "is_64"},{"file": 18,"line": 1530,"col": 26,"name": "allocator"},{"file": 18,"line": 1530,"col": 53,"name": "in_stream"},{"file": 18,"line": 1530,"col": 69,"name": "signed"},{"file": 18,"line": 1530,"col": 83,"name": "size","comptime": true},{"file": 18,"line": 2074,"col": 22,"name": "di"},{"file": 18,"line": 2074,"col": 38,"name": "address"},{"file": 18,"line": 569,"col": 15,"name": "tty_color"},{"file": 18,"line": 1519,"col": 26,"name": "allocator"},{"file": 18,"line": 1519,"col": 53,"name": "in_stream"},{"file": 18,"line": 1519,"col": 69,"name": "size"},{"file": 18,"line": 848,"col": 28,"name": "allocator"},{"file": 18,"line": 1574,"col": 21,"name": "allocator"},{"file": 18,"line": 1574,"col": 48,"name": "in_stream"},{"file": 18,"line": 1574,"col": 64,"name": "size"},{"file": 18,"line": 1064,"col": 26,"name": "allocator"},{"file": 18,"line": 2253,"col": 19,"name": "di"},{"file": 18,"line": 2253,"col": 35,"name": "target_address"},{"file": 18,"line": 2326,"col": 21,"name": "E","comptime": true},{"file": 18,"line": 2326,"col": 39,"name": "in_stream"},{"file": 18,"line": 2326,"col": 67,"name": "is_64"},{"file": 18,"line": 2086,"col": 20,"name": "di"},{"file": 18,"line": 1019,"col": 27,"name": "elf_file"},{"file": 18,"line": 1019,"col": 47,"name": "name"},{"file": 18,"line": 1557,"col": 33,"name": "in_stream"},{"file": 18,"line": 1557,"col": 49,"name": "is_64"},{"file": 18,"line": 358,"col": 31,"name": "di"},{"file": 18,"line": 358,"col": 47,"name": "out_stream"},{"file": 18,"line": 358,"col": 64,"name": "relocated_address"},{"file": 18,"line": 358,"col": 90,"name": "tty_color"},{"file": 18,"line": 1505,"col": 13,"name": "di"},{"file": 18,"line": 1505,"col": 29,"name": "offset"},{"file": 18,"line": 2403,"col": 30,"name": "sig"},{"file": 18,"line": 2403,"col": 40,"name": "info"},{"file": 18,"line": 2403,"col": 67,"name": "ctx_ptr"},{"file": 18,"line": 1678,"col": 23,"name": "abbrev_table"},{"file": 18,"line": 1678,"col": 57,"name": "abbrev_code"},{"file": 18,"line": 1903,"col": 26,"name": "di"},{"file": 18,"line": 1903,"col": 42,"name": "compile_unit"},{"file": 18,"line": 1903,"col": 69,"name": "target_address"},{"file": 18,"line": 1588,"col": 18,"name": "allocator"},{"file": 18,"line": 1588,"col": 45,"name": "in_stream"},{"file": 18,"line": 1588,"col": 61,"name": "form_id"},{"file": 18,"line": 1588,"col": 75,"name": "is_64"},{"file": 21,"line": 96,"col": 24,"name": "Error","comptime": true},{"file": 21,"line": 1081,"col": 18,"name": "endian","comptime": true},{"file": 21,"line": 1081,"col": 51,"name": "packing","comptime": true},{"file": 21,"line": 1081,"col": 78,"name": "Error","comptime": true},{"file": 21,"line": 646,"col": 20,"name": "endian"},{"file": 21,"line": 646,"col": 44,"name": "Error","comptime": true},{"file": 21,"line": 569,"col": 25,"name": "Error","comptime": true},{"file": 21,"line": 306,"col": 19,"name": "endian"},{"file": 21,"line": 306,"col": 43,"name": "Error","comptime": true},{"file": 21,"line": 823,"col": 20,"name": "stream"},{"file": 21,"line": 823,"col": 33,"name": "buf"},{"file": 21,"line": 211,"col": 18,"name": "buffer_size","comptime": true},{"file": 21,"line": 211,"col": 47,"name": "InStreamError","comptime": true},{"file": 21,"line": 573,"col": 31,"name": "buffer_size","comptime": true},{"file": 21,"line": 573,"col": 60,"name": "OutStreamError","comptime": true},{"file": 21,"line": 903,"col": 20,"name": "endian","comptime": true},{"file": 21,"line": 903,"col": 53,"name": "packing","comptime": true},{"file": 21,"line": 903,"col": 80,"name": "Error","comptime": true},{"file": 21,"line": 815,"col": 16,"name": "buf"},{"file": 21,"line": 865,"col": 25,"name": "stream"},{"file": 21,"line": 865,"col": 38,"name": "slice"},{"file": 21,"line": 100,"col": 30,"name": "buffer_size","comptime": true},{"file": 21,"line": 100,"col": 59,"name": "Error","comptime": true},{"file": 21,"line": 77,"col": 21,"name": "allocator"},{"file": 21,"line": 77,"col": 48,"name": "path"},{"file": 21,"line": 69,"col": 17,"name": "path"},{"file": 21,"line": 69,"col": 35,"name": "data"},{"file": 21,"line": 857,"col": 21,"name": "slice"},{"file": 21,"line": 533,"col": 25,"name": "OutStreamError","comptime": true},{"file": 22,"line": 1074,"col": 19,"name": "c"},{"file": 22,"line": 1074,"col": 26,"name": "radix"},{"file": 22,"line": 1578,"col": 20,"name": "byte"},{"file": 22,"line": 574,"col": 4,"name": "c"},{"file": 22,"line": 575,"col": 4,"name": "options"},{"file": 22,"line": 576,"col": 4,"name": "context"},{"file": 22,"line": 577,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 578,"col": 4,"name": "output"},{"file": 22,"line": 699,"col": 4,"name": "value"},{"file": 22,"line": 700,"col": 4,"name": "options"},{"file": 22,"line": 701,"col": 4,"name": "context"},{"file": 22,"line": 702,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 703,"col": 4,"name": "output"},{"file": 22,"line": 1552,"col": 12,"name": "buf"},{"file": 22,"line": 604,"col": 4,"name": "value"},{"file": 22,"line": 605,"col": 4,"name": "options"},{"file": 22,"line": 606,"col": 4,"name": "context"},{"file": 22,"line": 607,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 608,"col": 4,"name": "output"},{"file": 22,"line": 844,"col": 4,"name": "value"},{"file": 22,"line": 845,"col": 4,"name": "options"},{"file": 22,"line": 846,"col": 4,"name": "radix","comptime": true},{"file": 22,"line": 847,"col": 4,"name": "context"},{"file": 22,"line": 848,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 849,"col": 4,"name": "output"},{"file": 22,"line": 1120,"col": 18,"name": "allocator"},{"file": 22,"line": 1120,"col": 45,"name": "fmt","comptime": true},{"file": 22,"line": 1120,"col": 71,"name": "args","varArgs": true},{"file": 22,"line": 998,"col": 16,"name": "T","comptime": true},{"file": 22,"line": 998,"col": 34,"name": "buf"},{"file": 22,"line": 998,"col": 51,"name": "radix"},{"file": 22,"line": 981,"col": 20,"name": "out_buf"},{"file": 22,"line": 981,"col": 35,"name": "value"},{"file": 22,"line": 981,"col": 47,"name": "base"},{"file": 22,"line": 981,"col": 57,"name": "uppercase"},{"file": 22,"line": 981,"col": 74,"name": "options"},{"file": 22,"line": 1585,"col": 18,"name": "out"},{"file": 22,"line": 1585,"col": 29,"name": "input"},{"file": 22,"line": 584,"col": 4,"name": "buf"},{"file": 22,"line": 585,"col": 4,"name": "options"},{"file": 22,"line": 586,"col": 4,"name": "context"},{"file": 22,"line": 587,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 588,"col": 4,"name": "output"},{"file": 22,"line": 1028,"col": 21,"name": "T","comptime": true},{"file": 22,"line": 1028,"col": 39,"name": "buf"},{"file": 22,"line": 1028,"col": 56,"name": "radix"},{"file": 22,"line": 1129,"col": 13,"name": "size"},{"file": 22,"line": 1129,"col": 27,"name": "bytes"},{"file": 22,"line": 25,"col": 11,"name": "used_pos_args","comptime": true},{"file": 22,"line": 25,"col": 41,"name": "maybe_pos_arg","comptime": true},{"file": 22,"line": 25,"col": 80,"name": "next_arg","comptime": true},{"file": 22,"line": 535,"col": 4,"name": "value"},{"file": 22,"line": 536,"col": 4,"name": "fmt","comptime": true},{"file": 22,"line": 537,"col": 4,"name": "options"},{"file": 22,"line": 538,"col": 4,"name": "context"},{"file": 22,"line": 539,"col": 4,"name": "Errors","comptime": true},{"file": 22,"line": 540,"col": 4,"name": "output"},{"file": 22,"line": 36,"col": 15,"name": "fmt","comptime": true},{"file": 22,"line": 1539,"col": 11,"name": "expected"},{"file": 22,"line": 1539,"col": 33,"name": "template","comptime": true},{"file": 22,"line": 1539,"col": 64,"name": "args","varArgs": true},{"file": 22,"line": 1151,"col": 22,"name": "buf"},{"file": 22,"line": 1151,"col": 33,"name": "value"},{"file": 22,"line": 1151,"col": 45,"name": "base"},{"file": 22,"line": 1151,"col": 55,"name": "uppercase"},{"file": 22,"line": 1151,"col": 72,"name": "options"},{"file": 22,"line": 993,"col": 21,"name": "context"},{"file": 22,"line": 993,"col": 45,"name": "bytes"},{"file": 24,"line": 576,"col": 22,"name": "size"},{"file": 24,"line": 576,"col": 33,"name": "block_size"},{"file": 27,"line": 1195,"col": 11,"name": "T","comptime": true},{"file": 27,"line": 1195,"col": 29,"name": "items"},{"file": 27,"line": 1195,"col": 41,"name": "lessThan"},{"file": 27,"line": 1206,"col": 11,"name": "T","comptime": true},{"file": 27,"line": 1206,"col": 29,"name": "items"},{"file": 27,"line": 1206,"col": 41,"name": "lessThan"},{"file": 27,"line": 981,"col": 12,"name": "T","comptime": true},{"file": 27,"line": 971,"col": 11,"name": "T","comptime": true},{"file": 27,"line": 1174,"col": 12,"name": "rng"},{"file": 27,"line": 1043,"col": 14,"name": "a"},{"file": 27,"line": 1043,"col": 29,"name": "b"},{"file": 49,"line": 14,"col": 37,"name": "tinfo"},{"file": 28,"line": 135,"col": 19,"name": "sockfd"},{"file": 28,"line": 135,"col": 33,"name": "arg1"},{"file": 28,"line": 135,"col": 49,"name": "arg2"},{"file": 28,"line": 135,"col": 62,"name": "arg3"},{"file": 28,"line": 203,"col": 23,"name": "fds"},{"file": 28,"line": 203,"col": 39,"name": "nfds"},{"file": 28,"line": 203,"col": 53,"name": "timeout"},{"file": 28,"line": 124,"col": 29,"name": "sockfd"},{"file": 28,"line": 124,"col": 43,"name": "level"},{"file": 28,"line": 124,"col": 57,"name": "optname"},{"file": 28,"line": 124,"col": 73,"name": "optval"},{"file": 28,"line": 124,"col": 90,"name": "optlen"},{"file": 28,"line": 115,"col": 34,"name": "name"},{"file": 28,"line": 115,"col": 53,"name": "mibp"},{"file": 28,"line": 115,"col": 68,"name": "sizep"},{"file": 28,"line": 62,"col": 25,"name": "ptr"},{"file": 28,"line": 62,"col": 43,"name": "size_of_type"},{"file": 28,"line": 62,"col": 64,"name": "item_count"},{"file": 28,"line": 62,"col": 83,"name": "stream"},{"file": 28,"line": 103,"col": 27,"name": "path","noalias": true},{"file": 28,"line": 103,"col": 54,"name": "buf","noalias": true},{"file": 28,"line": 103,"col": 74,"name": "bufsize"},{"file": 28,"line": 146,"col": 32,"name": "fd"},{"file": 28,"line": 146,"col": 42,"name": "buf_ptr"},{"file": 28,"line": 146,"col": 58,"name": "nbytes"},{"file": 28,"line": 146,"col": 73,"name": "basep"},{"file": 28,"line": 63,"col": 24,"name": "ptr"},{"file": 28,"line": 63,"col": 36,"name": "size_of_type"},{"file": 28,"line": 63,"col": 57,"name": "item_count"},{"file": 28,"line": 63,"col": 76,"name": "stream"},{"file": 28,"line": 117,"col": 30,"name": "name"},{"file": 28,"line": 117,"col": 43,"name": "len"},{"file": 28,"line": 65,"col": 25,"name": "format"},{"file": 28,"line": 65,"col": 46,"varArgs": true},{"file": 49,"line": 17,"col": 4,"name": "kq"},{"file": 49,"line": 18,"col": 4,"name": "changelist"},{"file": 49,"line": 19,"col": 4,"name": "nchanges"},{"file": 49,"line": 20,"col": 4,"name": "eventlist"},{"file": 49,"line": 21,"col": 4,"name": "nevents"},{"file": 49,"line": 22,"col": 4,"name": "flags"},{"file": 49,"line": 23,"col": 4,"name": "timeout"},{"file": 28,"line": 125,"col": 23,"name": "sockfd"},{"file": 28,"line": 125,"col": 37,"name": "buf"},{"file": 28,"line": 125,"col": 57,"name": "len"},{"file": 28,"line": 125,"col": 69,"name": "flags"},{"file": 28,"line": 105,"col": 30,"name": "how"},{"file": 28,"line": 105,"col": 42,"name": "set","noalias": true},{"file": 28,"line": 105,"col": 72,"name": "oset","noalias": true},{"file": 28,"line": 165,"col": 33,"name": "newthread","noalias": true},{"file": 28,"line": 165,"col": 64,"name": "attr","noalias": true},{"file": 28,"line": 165,"col": 102,"name": "start_routine"},{"file": 28,"line": 165,"col": 148,"name": "arg","noalias": true},{"file": 28,"line": 73,"col": 23,"name": "path"},{"file": 28,"line": 73,"col": 42,"name": "oflag"},{"file": 28,"line": 73,"col": 57,"varArgs": true},{"file": 28,"line": 113,"col": 25,"name": "name"},{"file": 28,"line": 113,"col": 47,"name": "namelen"},{"file": 28,"line": 113,"col": 64,"name": "oldp"},{"file": 28,"line": 113,"col": 80,"name": "oldlenp"},{"file": 28,"line": 113,"col": 98,"name": "newp"},{"file": 28,"line": 113,"col": 114,"name": "newlen"},{"file": 49,"line": 11,"col": 36,"name": "fd"},{"file": 49,"line": 11,"col": 47,"name": "buf_ptr"},{"file": 49,"line": 11,"col": 63,"name": "buf_len"},{"file": 49,"line": 11,"col": 79,"name": "basep"},{"file": 28,"line": 122,"col": 26,"name": "sockfd"},{"file": 28,"line": 122,"col": 40,"name": "sock_addr"},{"file": 28,"line": 122,"col": 68,"name": "addrlen"},{"file": 28,"line": 170,"col": 31,"name": "thread"},{"file": 28,"line": 170,"col": 50,"name": "arg_return"},{"file": 28,"line": 217,"col": 39,"name": "mutex"},{"file": 28,"line": 223,"col": 39,"name": "cond"},{"file": 28,"line": 75,"col": 24,"name": "sig"},{"file": 28,"line": 163,"col": 27,"name": "fd"},{"file": 28,"line": 163,"col": 37,"name": "times"},{"file": 28,"line": 183,"col": 4,"name": "node","noalias": true},{"file": 28,"line": 184,"col": 4,"name": "service","noalias": true},{"file": 28,"line": 185,"col": 4,"name": "hints","noalias": true},{"file": 28,"line": 186,"col": 4,"name": "res","noalias": true},{"file": 28,"line": 78,"col": 24,"name": "fd"},{"file": 28,"line": 78,"col": 34,"name": "buf"},{"file": 28,"line": 78,"col": 46,"name": "nbyte"},{"file": 28,"line": 78,"col": 60,"name": "offset"},{"file": 28,"line": 84,"col": 25,"name": "fd"},{"file": 28,"line": 84,"col": 35,"name": "buf"},{"file": 28,"line": 84,"col": 53,"name": "nbyte"},{"file": 28,"line": 84,"col": 67,"name": "offset"},{"file": 28,"line": 97,"col": 26,"name": "existing"},{"file": 28,"line": 97,"col": 49,"name": "new"},{"file": 28,"line": 162,"col": 28,"name": "dirfd"},{"file": 28,"line": 162,"col": 41,"name": "pathname"},{"file": 28,"line": 162,"col": 64,"name": "times"},{"file": 28,"line": 162,"col": 85,"name": "flags"},{"file": 28,"line": 221,"col": 36,"name": "cond","noalias": true},{"file": 28,"line": 221,"col": 67,"name": "mutex","noalias": true},{"file": 28,"line": 112,"col": 25,"name": "name"},{"file": 28,"line": 216,"col": 37,"name": "mutex"},{"file": 28,"line": 147,"col": 25,"name": "ruid"},{"file": 28,"line": 147,"col": 39,"name": "euid"},{"file": 28,"line": 99,"col": 24,"name": "path"},{"file": 28,"line": 192,"col": 4,"name": "addr","noalias": true},{"file": 28,"line": 193,"col": 4,"name": "addrlen"},{"file": 28,"line": 194,"col": 4,"name": "host","noalias": true},{"file": 28,"line": 195,"col": 4,"name": "hostlen"},{"file": 28,"line": 196,"col": 4,"name": "serv","noalias": true},{"file": 28,"line": 197,"col": 4,"name": "servlen"},{"file": 28,"line": 198,"col": 4,"name": "flags"},{"file": 28,"line": 102,"col": 23,"name": "old_fd"},{"file": 28,"line": 102,"col": 37,"name": "new_fd"},{"file": 49,"line": 8,"col": 39,"name": "buf"},{"file": 49,"line": 8,"col": 51,"name": "bufsize"},{"file": 28,"line": 168,"col": 39,"name": "attr"},{"file": 28,"line": 174,"col": 4,"name": "kq"},{"file": 28,"line": 175,"col": 4,"name": "changelist"},{"file": 28,"line": 176,"col": 4,"name": "nchanges"},{"file": 28,"line": 177,"col": 4,"name": "eventlist"},{"file": 28,"line": 178,"col": 4,"name": "nevents"},{"file": 28,"line": 179,"col": 4,"name": "timeout"},{"file": 28,"line": 218,"col": 40,"name": "mutex"},{"file": 28,"line": 145,"col": 23,"name": "pid"},{"file": 28,"line": 145,"col": 35,"name": "sig"},{"file": 28,"line": 109,"col": 27,"name": "ruid"},{"file": 28,"line": 109,"col": 41,"name": "euid"},{"file": 28,"line": 100,"col": 25,"name": "path"},{"file": 28,"line": 100,"col": 44,"name": "argv"},{"file": 28,"line": 100,"col": 73,"name": "envp"},{"file": 28,"line": 38,"col": 20,"name": "glibc_version"},{"file": 28,"line": 110,"col": 27,"name": "rgid"},{"file": 28,"line": 110,"col": 41,"name": "egid"},{"file": 28,"line": 60,"col": 24,"name": "filename"},{"file": 28,"line": 60,"col": 47,"name": "modes"},{"file": 28,"line": 96,"col": 24,"name": "path"},{"file": 28,"line": 96,"col": 43,"name": "mode"},{"file": 28,"line": 121,"col": 30,"name": "sockfd"},{"file": 28,"line": 121,"col": 44,"name": "addr","noalias": true},{"file": 28,"line": 121,"col": 69,"name": "addrlen","noalias": true},{"file": 28,"line": 206,"col": 4,"name": "msg"},{"file": 28,"line": 207,"col": 4,"name": "eomorig"},{"file": 28,"line": 208,"col": 4,"name": "comp_dn"},{"file": 28,"line": 209,"col": 4,"name": "exp_dn"},{"file": 28,"line": 210,"col": 4,"name": "length"},{"file": 28,"line": 222,"col": 38,"name": "cond"},{"file": 49,"line": 48,"col": 36,"name": "fd"},{"file": 28,"line": 114,"col": 31,"name": "name"},{"file": 28,"line": 114,"col": 50,"name": "oldp"},{"file": 28,"line": 114,"col": 66,"name": "oldlenp"},{"file": 28,"line": 114,"col": 84,"name": "newp"},{"file": 28,"line": 114,"col": 100,"name": "newlen"},{"file": 28,"line": 127,"col": 4,"name": "sockfd"},{"file": 28,"line": 128,"col": 4,"name": "buf"},{"file": 28,"line": 129,"col": 4,"name": "len"},{"file": 28,"line": 130,"col": 4,"name": "flags"},{"file": 28,"line": 131,"col": 4,"name": "dest_addr"},{"file": 28,"line": 132,"col": 4,"name": "addrlen"},{"file": 28,"line": 94,"col": 23,"name": "fds"},{"file": 28,"line": 89,"col": 27,"name": "dirfd"},{"file": 28,"line": 89,"col": 40,"name": "path"},{"file": 28,"line": 89,"col": 59,"name": "flags"},{"file": 28,"line": 189,"col": 31,"name": "res"},{"file": 28,"line": 86,"col": 25,"name": "addr"},{"file": 28,"line": 86,"col": 57,"name": "len"},{"file": 28,"line": 152,"col": 32,"name": "alignment"},{"file": 28,"line": 152,"col": 50,"name": "size"},{"file": 28,"line": 101,"col": 22,"name": "fd"},{"file": 28,"line": 88,"col": 25,"name": "path"},{"file": 28,"line": 87,"col": 27,"name": "addr"},{"file": 28,"line": 87,"col": 59,"name": "len"},{"file": 28,"line": 87,"col": 71,"name": "prot"},{"file": 28,"line": 201,"col": 31,"name": "errcode"},{"file": 28,"line": 119,"col": 25,"name": "domain"},{"file": 28,"line": 119,"col": 41,"name": "sock_type"},{"file": 28,"line": 119,"col": 60,"name": "protocol"},{"file": 49,"line": 52,"col": 39,"name": "task"},{"file": 49,"line": 52,"col": 58,"name": "name"},{"file": 28,"line": 67,"col": 23,"name": "code"},{"file": 28,"line": 72,"col": 24,"name": "fd"},{"file": 28,"line": 72,"col": 34,"name": "offset"},{"file": 28,"line": 72,"col": 49,"name": "whence"},{"file": 28,"line": 156,"col": 33,"name": "memptr"},{"file": 28,"line": 156,"col": 51,"name": "alignment"},{"file": 28,"line": 156,"col": 69,"name": "size"},{"file": 28,"line": 95,"col": 24,"name": "fds"},{"file": 28,"line": 95,"col": 39,"name": "flags"},{"file": 28,"line": 166,"col": 36,"name": "attr"},{"file": 28,"line": 82,"col": 23,"name": "path","noalias": true},{"file": 28,"line": 82,"col": 50,"name": "buf","noalias": true},{"file": 49,"line": 51,"col": 41,"name": "host"},{"file": 49,"line": 51,"col": 55,"name": "clock_id"},{"file": 49,"line": 51,"col": 77,"name": "clock_serv"},{"file": 28,"line": 120,"col": 25,"name": "sockfd"},{"file": 28,"line": 120,"col": 39,"name": "backlog"},{"file": 28,"line": 85,"col": 23,"name": "addr"},{"file": 28,"line": 85,"col": 56,"name": "len"},{"file": 28,"line": 85,"col": 68,"name": "prot"},{"file": 28,"line": 85,"col": 82,"name": "flags"},{"file": 28,"line": 85,"col": 97,"name": "fd"},{"file": 28,"line": 85,"col": 107,"name": "offset"},{"file": 28,"line": 108,"col": 28,"name": "rqtp"},{"file": 28,"line": 108,"col": 51,"name": "rmtp"},{"file": 28,"line": 77,"col": 24,"name": "fd"},{"file": 28,"line": 77,"col": 35,"name": "iov"},{"file": 28,"line": 77,"col": 56,"name": "iovcnt"},{"file": 28,"line": 71,"col": 35,"name": "fd"},{"file": 28,"line": 71,"col": 45,"name": "buf"},{"file": 28,"line": 90,"col": 25,"name": "buf"},{"file": 28,"line": 90,"col": 37,"name": "size"},{"file": 28,"line": 148,"col": 25,"name": "uid"},{"file": 28,"line": 106,"col": 31,"name": "tv","noalias": true},{"file": 28,"line": 106,"col": 54,"name": "tz","noalias": true},{"file": 28,"line": 70,"col": 24,"name": "fd"},{"file": 28,"line": 70,"col": 34,"name": "buf"},{"file": 28,"line": 155,"col": 23},{"file": 49,"line": 58,"col": 30,"name": "ss"},{"file": 49,"line": 58,"col": 45,"name": "old_ss"},{"file": 28,"line": 111,"col": 24,"name": "path"},{"file": 28,"line": 74,"col": 25,"name": "fd"},{"file": 28,"line": 74,"col": 36,"name": "path"},{"file": 28,"line": 74,"col": 55,"name": "oflag"},{"file": 28,"line": 74,"col": 70,"varArgs": true},{"file": 28,"line": 68,"col": 25,"name": "fd"},{"file": 28,"line": 93,"col": 25,"name": "path"},{"file": 28,"line": 93,"col": 44,"name": "mode"},{"file": 28,"line": 61,"col": 25,"name": "stream"},{"file": 28,"line": 107,"col": 28,"name": "sig"},{"file": 28,"line": 107,"col": 40,"name": "act","noalias": true},{"file": 28,"line": 107,"col": 71,"name": "oact","noalias": true},{"file": 28,"line": 80,"col": 25,"name": "fd"},{"file": 28,"line": 80,"col": 36,"name": "iov"},{"file": 28,"line": 80,"col": 63,"name": "iovcnt"},{"file": 28,"line": 104,"col": 27,"name": "file_name","noalias": true},{"file": 28,"line": 104,"col": 59,"name": "resolved_name","noalias": true},{"file": 28,"line": 69,"col": 24,"name": "fd"},{"file": 28,"line": 91,"col": 26,"name": "pid"},{"file": 28,"line": 91,"col": 38,"name": "stat_loc"},{"file": 28,"line": 91,"col": 57,"name": "options"},{"file": 28,"line": 160,"col": 25,"name": "path"},{"file": 28,"line": 160,"col": 44,"name": "times"},{"file": 28,"line": 118,"col": 23,"name": "socket"},{"file": 28,"line": 118,"col": 37,"name": "address"},{"file": 28,"line": 118,"col": 64,"name": "address_len"},{"file": 49,"line": 50,"col": 33,"name": "clock_serv"},{"file": 49,"line": 50,"col": 59,"name": "cur_time"},{"file": 28,"line": 137,"col": 4,"name": "sockfd"},{"file": 28,"line": 138,"col": 4,"name": "buf","noalias": true},{"file": 28,"line": 139,"col": 4,"name": "len"},{"file": 28,"line": 140,"col": 4,"name": "flags"},{"file": 28,"line": 141,"col": 4,"name": "src_addr","noalias": true},{"file": 28,"line": 142,"col": 4,"name": "addrlen","noalias": true},{"file": 28,"line": 154,"col": 26},{"file": 28,"line": 154,"col": 36},{"file": 28,"line": 153,"col": 25},{"file": 28,"line": 83,"col": 24,"name": "fd"},{"file": 28,"line": 83,"col": 34,"name": "buf"},{"file": 28,"line": 83,"col": 52,"name": "nbyte"},{"file": 28,"line": 149,"col": 32,"name": "clk_id"},{"file": 28,"line": 149,"col": 47,"name": "tp"},{"file": 49,"line": 54,"col": 17,"name": "set"},{"file": 49,"line": 54,"col": 33,"name": "signo"},{"file": 28,"line": 167,"col": 40,"name": "attr"},{"file": 28,"line": 167,"col": 63,"name": "stackaddr"},{"file": 28,"line": 167,"col": 83,"name": "stacksize"},{"file": 49,"line": 9,"col": 41,"name": "image_index"},{"file": 28,"line": 79,"col": 25,"name": "fd"},{"file": 28,"line": 79,"col": 36,"name": "iov"},{"file": 28,"line": 79,"col": 57,"name": "iovcnt"},{"file": 28,"line": 79,"col": 73,"name": "offset"},{"file": 28,"line": 123,"col": 26,"name": "sockfd"},{"file": 28,"line": 123,"col": 40,"name": "addr"},{"file": 28,"line": 123,"col": 57,"name": "addrlen"},{"file": 28,"line": 123,"col": 78,"name": "flags"},{"file": 28,"line": 81,"col": 26,"name": "fd"},{"file": 28,"line": 81,"col": 37,"name": "iov"},{"file": 28,"line": 81,"col": 64,"name": "iovcnt"},{"file": 28,"line": 81,"col": 80,"name": "offset"},{"file": 28,"line": 159,"col": 26,"name": "fd"},{"file": 28,"line": 159,"col": 36,"name": "times"},{"file": 28,"line": 76,"col": 23,"name": "fd"},{"file": 28,"line": 76,"col": 33,"name": "buf"},{"file": 28,"line": 76,"col": 45,"name": "nbyte"},{"file": 28,"line": 98,"col": 25,"name": "old"},{"file": 28,"line": 98,"col": 43,"name": "new"},{"file": 28,"line": 150,"col": 31,"name": "clk_id"},{"file": 28,"line": 150,"col": 46,"name": "tp"},{"file": 29,"line": 393,"col": 11,"name": "a"},{"file": 29,"line": 393,"col": 19,"name": "b"},{"file": 29,"line": 74,"col": 16,"name": "T","comptime": true},{"file": 29,"line": 161,"col": 20,"name": "T","comptime": true},{"file": 29,"line": 547,"col": 18,"name": "T","comptime": true},{"file": 29,"line": 547,"col": 36,"name": "name","comptime": true},{"file": 29,"line": 556,"col": 19,"name": "T","comptime": true},{"file": 29,"line": 278,"col": 17,"name": "T","comptime": true},{"file": 29,"line": 278,"col": 35,"name": "field_name","comptime": true},{"file": 29,"line": 341,"col": 17,"name": "u"},{"file": 29,"line": 197,"col": 23,"name": "T","comptime": true},{"file": 29,"line": 197,"col": 41,"name": "decl_name","comptime": true},{"file": 29,"line": 318,"col": 15,"name": "T","comptime": true},{"file": 29,"line": 118,"col": 23,"name": "T","comptime": true},{"file": 29,"line": 12,"col": 15,"name": "v"},{"file": 29,"line": 534,"col": 17,"name": "Tag","comptime": true},{"file": 29,"line": 534,"col": 37,"name": "tag_int"},{"file": 29,"line": 366,"col": 22,"name": "U","comptime": true},{"file": 29,"line": 366,"col": 40,"name": "tag"},{"file": 29,"line": 55,"col": 20,"name": "T","comptime": true},{"file": 29,"line": 55,"col": 38,"name": "str"},{"file": 29,"line": 233,"col": 14,"name": "T","comptime": true},{"file": 30,"line": 289,"col": 16,"name": "allocator"},{"file": 30,"line": 289,"col": 39,"name": "full_path"},{"file": 30,"line": 1136,"col": 16,"name": "pathname"},{"file": 30,"line": 1136,"col": 38,"name": "buffer"},{"file": 30,"line": 333,"col": 18,"name": "dir_path"},{"file": 30,"line": 1112,"col": 16,"name": "allocator"},{"file": 30,"line": 1112,"col": 39,"name": "dir_path"},{"file": 30,"line": 1181,"col": 19,"name": "out_buffer"},{"file": 30,"line": 87,"col": 22,"name": "source_path"},{"file": 30,"line": 87,"col": 47,"name": "dest_path"},{"file": 30,"line": 87,"col": 70,"name": "mode"},{"file": 30,"line": 323,"col": 17,"name": "dir_path"},{"file": 30,"line": 156,"col": 16,"name": "source_path"},{"file": 30,"line": 156,"col": 41,"name": "dest_path"},{"file": 30,"line": 179,"col": 20,"name": "source_path"},{"file": 30,"line": 179,"col": 45,"name": "dest_path"},{"file": 30,"line": 179,"col": 68,"name": "mode"},{"file": 30,"line": 1247,"col": 21,"name": "allocator"},{"file": 30,"line": 1247,"col": 44,"name": "pathname"},{"file": 30,"line": 342,"col": 18,"name": "full_path"},{"file": 30,"line": 270,"col": 15,"name": "dir_path"},{"file": 30,"line": 1222,"col": 27,"name": "allocator"},{"file": 30,"line": 280,"col": 16,"name": "dir_path"},{"file": 30,"line": 77,"col": 18,"name": "source_path"},{"file": 30,"line": 77,"col": 43,"name": "dest_path"},{"file": 30,"line": 1216,"col": 20,"name": "out_buffer"},{"file": 30,"line": 1229,"col": 22,"name": "out_buffer"},{"file": 30,"line": 328,"col": 18,"name": "dir_path"},{"file": 30,"line": 275,"col": 16,"name": "dir_path"},{"file": 30,"line": 43,"col": 21,"name": "allocator"},{"file": 30,"line": 43,"col": 44,"name": "existing_path"},{"file": 30,"line": 43,"col": 71,"name": "new_path"},{"file": 30,"line": 1141,"col": 17,"name": "pathname_c"},{"file": 30,"line": 1141,"col": 42,"name": "buffer"},{"file": 31,"line": 637,"col": 21,"name": "size","comptime": true},{"file": 31,"line": 637,"col": 43,"name": "fallback_allocator"},{"file": 31,"line": 649,"col": 30,"name": "size","comptime": true},{"file": 31,"line": 865,"col": 24,"name": "allocator"},{"file": 31,"line": 865,"col": 51,"name": "alignment","comptime": true},{"file": 31,"line": 918,"col": 30,"name": "allocator"},{"file": 31,"line": 488,"col": 39},{"file": 31,"line": 837,"col": 17,"name": "allocator"},{"file": 31,"line": 27,"col": 11,"name": "self"},{"file": 31,"line": 27,"col": 29,"name": "old_mem"},{"file": 31,"line": 27,"col": 44,"name": "old_align"},{"file": 31,"line": 27,"col": 60,"name": "new_size"},{"file": 31,"line": 27,"col": 77,"name": "new_align"},{"file": 31,"line": 20,"col": 12,"name": "self"},{"file": 31,"line": 20,"col": 30,"name": "old_mem"},{"file": 31,"line": 20,"col": 45,"name": "old_align"},{"file": 31,"line": 20,"col": 61,"name": "new_size"},{"file": 31,"line": 20,"col": 78,"name": "new_align"},{"file": 31,"line": 889,"col": 31,"name": "allocator"},{"file": 31,"line": 489,"col": 39},{"file": 31,"line": 489,"col": 44},{"file": 51,"line": 22,"col": 19,"name": "self"},{"file": 33,"line": 23,"col": 19,"name": "allocator"},{"file": 33,"line": 37,"col": 17,"name": "allocator"},{"file": 33,"line": 454,"col": 16,"name": "allocator"},{"file": 33,"line": 454,"col": 43,"name": "args_alloc"},{"file": 33,"line": 515,"col": 24,"name": "name"},{"file": 33,"line": 389,"col": 17,"name": "allocator"},{"file": 33,"line": 18,"col": 14,"name": "out_buffer"},{"file": 33,"line": 506,"col": 19,"name": "name"},{"file": 33,"line": 491,"col": 22,"name": "input_cmd_line"},{"file": 33,"line": 491,"col": 51,"name": "expected_args"},{"file": 36,"line": 764,"col": 11,"name": "x"},{"file": 37,"line": 155,"col": 10,"name": "ctx"},{"file": 24,"line": 704,"col": 15,"name": "self"},{"file": 24,"line": 651,"col": 26,"name": "self"},{"file": 24,"line": 651,"col": 44,"name": "allocator"},{"file": 24,"line": 692,"col": 14,"name": "self"},{"file": 24,"line": 692,"col": 32,"name": "len"},{"file": 24,"line": 698,"col": 14,"name": "self"},{"file": 24,"line": 698,"col": 32,"name": "len"},{"file": 24,"line": 639,"col": 12,"name": "block_size"},{"file": 24,"line": 639,"col": 29,"name": "file"},{"file": 24,"line": 639,"col": 41,"name": "blocks"},{"file": 24,"line": 716,"col": 14,"name": "in_stream"},{"file": 24,"line": 716,"col": 34,"name": "buffer"},{"file": 24,"line": 708,"col": 18,"name": "self"},{"file": 32,"line": 166,"col": 17,"name": "self"},{"file": 32,"line": 171,"col": 15,"name": "self"},{"file": 6,"line": 517,"col": 17,"name": "loop"},{"file": 6,"line": 547,"col": 18,"name": "self"},{"file": 6,"line": 571,"col": 21,"name": "self"},{"file": 6,"line": 571,"col": 44,"name": "handle"},{"file": 6,"line": 607,"col": 21,"name": "self"},{"file": 6,"line": 590,"col": 23,"name": "self"},{"file": 6,"line": 530,"col": 23,"name": "self"},{"file": 41,"line": 684,"col": 26,"name": "self"},{"file": 41,"line": 615,"col": 22,"name": "self"},{"file": 41,"line": 615,"col": 35,"name": "node"},{"file": 41,"line": 110,"col": 30,"name": "self"},{"file": 41,"line": 680,"col": 25,"name": "self"},{"file": 41,"line": 162,"col": 18,"name": "self"},{"file": 41,"line": 439,"col": 22,"name": "self"},{"file": 41,"line": 439,"col": 35,"name": "fd"},{"file": 41,"line": 439,"col": 44,"name": "op"},{"file": 41,"line": 439,"col": 53,"name": "flags"},{"file": 41,"line": 439,"col": 65,"name": "resume_node"},{"file": 41,"line": 648,"col": 16,"name": "func","comptime": true},{"file": 41,"line": 648,"col": 36,"name": "args","varArgs": true},{"file": 41,"line": 658,"col": 17,"name": "self"},{"file": 41,"line": 508,"col": 31,"name": "self"},{"file": 41,"line": 508,"col": 44,"name": "fd"},{"file": 41,"line": 448,"col": 25,"name": "self"},{"file": 41,"line": 448,"col": 38,"name": "fd"},{"file": 41,"line": 627,"col": 15,"name": "self"},{"file": 41,"line": 549,"col": 24,"name": "self"},{"file": 41,"line": 549,"col": 37,"name": "ident"},{"file": 41,"line": 549,"col": 51,"name": "filter"},{"file": 41,"line": 120,"col": 29,"name": "self"},{"file": 41,"line": 533,"col": 21,"name": "self"},{"file": 41,"line": 533,"col": 34,"name": "resume_node"},{"file": 41,"line": 533,"col": 66,"name": "ident"},{"file": 41,"line": 533,"col": 80,"name": "filter"},{"file": 41,"line": 533,"col": 93,"name": "fflags"},{"file": 41,"line": 516,"col": 28,"name": "self"},{"file": 41,"line": 516,"col": 41,"name": "ident"},{"file": 41,"line": 516,"col": 55,"name": "filter"},{"file": 41,"line": 516,"col": 68,"name": "fflags"},{"file": 41,"line": 621,"col": 28,"name": "self"},{"file": 41,"line": 621,"col": 41,"name": "node"},{"file": 41,"line": 453,"col": 23,"name": "self"},{"file": 41,"line": 453,"col": 36,"name": "fd"},{"file": 41,"line": 453,"col": 45,"name": "flags"},{"file": 41,"line": 512,"col": 41,"name": "self"},{"file": 41,"line": 512,"col": 54,"name": "fd"},{"file": 41,"line": 98,"col": 16,"name": "self"},{"file": 41,"line": 504,"col": 31,"name": "self"},{"file": 41,"line": 504,"col": 44,"name": "fd"},{"file": 41,"line": 129,"col": 26,"name": "self"},{"file": 41,"line": 129,"col": 39,"name": "thread_count"},{"file": 41,"line": 427,"col": 22,"name": "self"},{"file": 41,"line": 427,"col": 35,"name": "fd"},{"file": 41,"line": 427,"col": 44,"name": "resume_node"},{"file": 41,"line": 427,"col": 70,"name": "flags"},{"file": 41,"line": 812,"col": 22,"name": "self"},{"file": 41,"line": 812,"col": 35,"name": "request_node"},{"file": 41,"line": 173,"col": 18,"name": "self"},{"file": 41,"line": 173,"col": 31,"name": "extra_thread_count"},{"file": 41,"line": 406,"col": 20,"name": "self"},{"file": 41,"line": 842,"col": 18,"name": "self"},{"file": 41,"line": 834,"col": 21,"name": "self"},{"file": 41,"line": 834,"col": 34,"name": "request_node"},{"file": 41,"line": 719,"col": 17,"name": "self"},{"file": 41,"line": 564,"col": 16,"name": "self"},{"file": 41,"line": 965,"col": 24,"name": "h"},{"file": 41,"line": 965,"col": 42,"name": "did_it"},{"file": 42,"line": 58,"col": 13,"name": "name","comptime": true},{"file": 42,"line": 155,"col": 16,"name": "T","comptime": true},{"file": 42,"line": 338,"col": 19,"name": "T","comptime": true},{"file": 42,"line": 22,"col": 18,"name": "traits","comptime": true},{"file": 42,"line": 300,"col": 16,"name": "T","comptime": true},{"file": 42,"line": 197,"col": 21,"name": "T","comptime": true},{"file": 42,"line": 244,"col": 21,"name": "T","comptime": true},{"file": 42,"line": 212,"col": 19,"name": "T","comptime": true},{"file": 42,"line": 277,"col": 19,"name": "T","comptime": true},{"file": 42,"line": 134,"col": 15,"name": "id","comptime": true},{"file": 42,"line": 176,"col": 16,"name": "T","comptime": true},{"file": 42,"line": 82,"col": 16,"name": "name","comptime": true},{"file": 42,"line": 11,"col": 21,"name": "T","comptime": true},{"file": 46,"line": 792,"col": 19,"name": "hns"},{"file": 46,"line": 187,"col": 4,"name": "file_handle"},{"file": 46,"line": 188,"col": 4,"name": "existing_completion_port"},{"file": 46,"line": 189,"col": 4,"name": "completion_key"},{"file": 46,"line": 190,"col": 4,"name": "concurrent_thread_count"},{"file": 46,"line": 156,"col": 21,"name": "dir_path"},{"file": 46,"line": 156,"col": 43,"name": "find_file_data"},{"file": 46,"line": 288,"col": 17,"name": "handle"},{"file": 46,"line": 288,"col": 33,"name": "bytes"},{"file": 46,"line": 733,"col": 19,"name": "hHeap"},{"file": 46,"line": 251,"col": 19,"name": "hObject"},{"file": 46,"line": 605,"col": 19,"name": "lpAddress"},{"file": 46,"line": 605,"col": 39,"name": "dwSize"},{"file": 46,"line": 605,"col": 54,"name": "dwFreeType"},{"file": 46,"line": 100,"col": 28,"name": "h"},{"file": 46,"line": 100,"col": 39,"name": "mask"},{"file": 46,"line": 100,"col": 52,"name": "flags"},{"file": 46,"line": 459,"col": 30,"name": "handle"},{"file": 46,"line": 459,"col": 46,"name": "offset"},{"file": 46,"line": 136,"col": 27,"name": "handle"},{"file": 46,"line": 136,"col": 43,"name": "milliseconds"},{"file": 46,"line": 518,"col": 4,"name": "hFile"},{"file": 46,"line": 519,"col": 4,"name": "buf_ptr"},{"file": 46,"line": 520,"col": 4,"name": "buf_len"},{"file": 46,"line": 521,"col": 4,"name": "flags"},{"file": 46,"line": 385,"col": 18,"name": "old_path"},{"file": 46,"line": 385,"col": 40,"name": "new_path"},{"file": 46,"line": 385,"col": 62,"name": "flags"},{"file": 46,"line": 597,"col": 20,"name": "addr"},{"file": 46,"line": 597,"col": 35,"name": "size"},{"file": 46,"line": 597,"col": 48,"name": "alloc_type"},{"file": 46,"line": 597,"col": 67,"name": "flProtect"},{"file": 46,"line": 345,"col": 4,"name": "sym_link_path"},{"file": 46,"line": 346,"col": 4,"name": "target_path"},{"file": 46,"line": 347,"col": 4,"name": "flags"},{"file": 46,"line": 391,"col": 19,"name": "old_path"},{"file": 46,"line": 391,"col": 43,"name": "new_path"},{"file": 46,"line": 391,"col": 67,"name": "flags"},{"file": 46,"line": 261,"col": 16,"name": "in_hFile"},{"file": 46,"line": 261,"col": 34,"name": "buffer"},{"file": 46,"line": 174,"col": 20,"name": "handle"},{"file": 46,"line": 174,"col": 36,"name": "find_file_data"},{"file": 46,"line": 802,"col": 29,"name": "ft"},{"file": 46,"line": 426,"col": 23,"name": "dir_path"},{"file": 46,"line": 90,"col": 18,"name": "rd"},{"file": 46,"line": 90,"col": 31,"name": "wr"},{"file": 46,"line": 90,"col": 44,"name": "sattr"},{"file": 46,"line": 824,"col": 36,"name": "s"},{"file": 46,"line": 824,"col": 51,"name": "suffix","comptime": true},{"file": 46,"line": 310,"col": 27,"name": "buffer"},{"file": 46,"line": 431,"col": 24,"name": "dir_path_w"},{"file": 46,"line": 560,"col": 26,"name": "lpFileName"},{"file": 46,"line": 797,"col": 17,"name": "ns"},{"file": 46,"line": 725,"col": 27,"name": "InitOnce"},{"file": 46,"line": 725,"col": 49,"name": "InitFn"},{"file": 46,"line": 725,"col": 71,"name": "Parameter"},{"file": 46,"line": 725,"col": 92,"name": "Context"},{"file": 46,"line": 820,"col": 28,"name": "s"},{"file": 46,"line": 703,"col": 19,"name": "hModule"},{"file": 46,"line": 625,"col": 31,"name": "penv"},{"file": 46,"line": 575,"col": 26,"name": "hModule"},{"file": 46,"line": 575,"col": 45,"name": "buf_ptr"},{"file": 46,"line": 575,"col": 62,"name": "buf_len"},{"file": 46,"line": 405,"col": 23,"name": "pathname"},{"file": 46,"line": 405,"col": 45,"name": "attrs"},{"file": 46,"line": 587,"col": 24,"name": "hProcess"},{"file": 46,"line": 587,"col": 42,"name": "uExitCode"},{"file": 46,"line": 474,"col": 32,"name": "handle"},{"file": 46,"line": 474,"col": 48,"name": "offset"},{"file": 46,"line": 204,"col": 4,"name": "completion_port"},{"file": 46,"line": 205,"col": 4,"name": "bytes_transferred_count"},{"file": 46,"line": 206,"col": 4,"name": "completion_key"},{"file": 46,"line": 207,"col": 4,"name": "lpOverlapped"},{"file": 46,"line": 113,"col": 20,"name": "output"},{"file": 46,"line": 555,"col": 25,"name": "filename"},{"file": 46,"line": 692,"col": 20,"name": "lpLibFileName"},{"file": 46,"line": 857,"col": 23,"name": "err"},{"file": 46,"line": 255,"col": 17,"name": "hFindFile"},{"file": 46,"line": 410,"col": 24,"name": "pathname"},{"file": 46,"line": 410,"col": 48,"name": "attrs"},{"file": 46,"line": 816,"col": 27,"name": "s"},{"file": 46,"line": 496,"col": 36,"name": "handle"},{"file": 46,"line": 611,"col": 31,"name": "hConsoleOutput"},{"file": 46,"line": 611,"col": 55,"name": "wAttributes"},{"file": 46,"line": 335,"col": 4,"name": "sym_link_path"},{"file": 46,"line": 336,"col": 4,"name": "target_path"},{"file": 46,"line": 337,"col": 4,"name": "flags"},{"file": 46,"line": 808,"col": 29,"name": "ns"},{"file": 46,"line": 729,"col": 16,"name": "hHeap"},{"file": 46,"line": 729,"col": 31,"name": "dwFlags"},{"file": 46,"line": 729,"col": 47,"name": "lpMem"},{"file": 46,"line": 364,"col": 18,"name": "filename"},{"file": 46,"line": 224,"col": 4,"name": "completion_port"},{"file": 46,"line": 225,"col": 4,"name": "bytes_transferred_count"},{"file": 46,"line": 226,"col": 4,"name": "lpCompletionKey"},{"file": 46,"line": 227,"col": 4,"name": "lpOverlapped"},{"file": 46,"line": 228,"col": 4,"name": "dwMilliseconds"},{"file": 46,"line": 446,"col": 20,"name": "handle_id"},{"file": 46,"line": 872,"col": 24,"name": "status"},{"file": 46,"line": 369,"col": 19,"name": "filename"},{"file": 46,"line": 634,"col": 31,"name": "lpName"},{"file": 46,"line": 634,"col": 47,"name": "lpBuffer"},{"file": 46,"line": 634,"col": 65,"name": "nSize"},{"file": 46,"line": 755,"col": 4,"name": "hFile"},{"file": 46,"line": 756,"col": 4,"name": "lpCreationTime"},{"file": 46,"line": 757,"col": 4,"name": "lpLastAccessTime"},{"file": 46,"line": 758,"col": 4,"name": "lpLastWriteTime"},{"file": 46,"line": 61,"col": 4,"name": "file_path_w"},{"file": 46,"line": 62,"col": 4,"name": "desired_access"},{"file": 46,"line": 63,"col": 4,"name": "share_mode"},{"file": 46,"line": 64,"col": 4,"name": "lpSecurityAttributes"},{"file": 46,"line": 65,"col": 4,"name": "creation_disposition"},{"file": 46,"line": 66,"col": 4,"name": "flags_and_attrs"},{"file": 46,"line": 67,"col": 4,"name": "hTemplateFile"},{"file": 46,"line": 539,"col": 21,"name": "hFile"},{"file": 46,"line": 740,"col": 4,"name": "hFile"},{"file": 46,"line": 485,"col": 28,"name": "handle"},{"file": 46,"line": 485,"col": 44,"name": "offset"},{"file": 46,"line": 48,"col": 4,"name": "file_path"},{"file": 46,"line": 49,"col": 4,"name": "desired_access"},{"file": 46,"line": 50,"col": 4,"name": "share_mode"},{"file": 46,"line": 51,"col": 4,"name": "lpSecurityAttributes"},{"file": 46,"line": 52,"col": 4,"name": "creation_disposition"},{"file": 46,"line": 53,"col": 4,"name": "flags_and_attrs"},{"file": 46,"line": 54,"col": 4,"name": "hTemplateFile"},{"file": 46,"line": 653,"col": 4,"name": "lpApplicationName"},{"file": 46,"line": 654,"col": 4,"name": "lpCommandLine"},{"file": 46,"line": 655,"col": 4,"name": "lpProcessAttributes"},{"file": 46,"line": 656,"col": 4,"name": "lpThreadAttributes"},{"file": 46,"line": 657,"col": 4,"name": "bInheritHandles"},{"file": 46,"line": 658,"col": 4,"name": "dwCreationFlags"},{"file": 46,"line": 659,"col": 4,"name": "lpEnvironment"},{"file": 46,"line": 660,"col": 4,"name": "lpCurrentDirectory"},{"file": 46,"line": 661,"col": 4,"name": "lpStartupInfo"},{"file": 46,"line": 662,"col": 4,"name": "lpProcessInformation"},{"file": 46,"line": 851,"col": 21,"name": "p"},{"file": 46,"line": 851,"col": 34,"name": "s"},{"file": 47,"line": 3,"col": 19,"name": "T","comptime": true},{"file": 47,"line": 3,"col": 37,"name": "in_stream"},{"file": 47,"line": 56,"col": 19,"name": "T","comptime": true},{"file": 47,"line": 56,"col": 37,"name": "in_stream"},{"file": 47,"line": 132,"col": 21,"name": "T","comptime": true},{"file": 47,"line": 132,"col": 39,"name": "encoded"},{"file": 47,"line": 161,"col": 25,"name": "T","comptime": true},{"file": 47,"line": 161,"col": 43,"name": "N","comptime": true},{"file": 47,"line": 161,"col": 62,"name": "encoded"},{"file": 47,"line": 122,"col": 28,"name": "T","comptime": true},{"file": 47,"line": 122,"col": 46,"name": "encoded"},{"file": 47,"line": 141,"col": 21,"name": "T","comptime": true},{"file": 47,"line": 141,"col": 39,"name": "encoded"},{"file": 47,"line": 150,"col": 25,"name": "T","comptime": true},{"file": 47,"line": 150,"col": 43,"name": "N","comptime": true},{"file": 47,"line": 150,"col": 62,"name": "encoded"},{"file": 47,"line": 127,"col": 28,"name": "T","comptime": true},{"file": 47,"line": 127,"col": 46,"name": "encoded"},{"file": 24,"line": 484,"col": 21,"name": "self"},{"file": 24,"line": 484,"col": 33,"name": "stream"},{"file": 24,"line": 470,"col": 20,"name": "self"},{"file": 24,"line": 470,"col": 32,"name": "coff_ptr"},{"file": 24,"line": 470,"col": 54,"name": "file_name"},{"file": 24,"line": 478,"col": 25,"name": "self"},{"file": 24,"line": 478,"col": 37,"name": "id"},{"file": 24,"line": 495,"col": 16,"name": "self"},{"file": 24,"line": 495,"col": 28,"name": "allocator"},{"file": 24,"line": 495,"col": 55,"name": "file"},{"file": 25,"line": 184,"col": 24,"name": "self"},{"file": 25,"line": 215,"col": 22,"name": "self"},{"file": 25,"line": 215,"col": 35,"name": "name","comptime": true},{"file": 25,"line": 43,"col": 16,"name": "allocator"},{"file": 25,"line": 43,"col": 43,"name": "in_file"},{"file": 25,"line": 122,"col": 22,"name": "self"},{"file": 25,"line": 122,"col": 35,"name": "buffer"},{"file": 25,"line": 55,"col": 22,"name": "self"},{"file": 25,"line": 94,"col": 26,"name": "self"},{"file": 25,"line": 94,"col": 39,"name": "file_stream"},{"file": 48,"line": 55,"col": 17,"name": "hasher"},{"file": 48,"line": 55,"col": 30,"name": "key"},{"file": 48,"line": 55,"col": 40,"name": "strat","comptime": true},{"file": 48,"line": 23,"col": 19,"name": "hasher"},{"file": 48,"line": 23,"col": 32,"name": "key"},{"file": 48,"line": 23,"col": 42,"name": "strat","comptime": true},{"file": 48,"line": 200,"col": 16,"name": "key"},{"file": 48,"line": 186,"col": 12,"name": "key"},{"file": 48,"line": 207,"col": 25,"name": "key"},{"file": 48,"line": 193,"col": 19,"name": "key"},{"file": 50,"line": 138,"col": 19,"name": "path_w"},{"file": 50,"line": 176,"col": 23,"name": "path"},{"file": 50,"line": 716,"col": 15,"name": "path"},{"file": 50,"line": 964,"col": 16,"name": "allocator"},{"file": 50,"line": 964,"col": 39,"name": "from"},{"file": 50,"line": 964,"col": 57,"name": "to"},{"file": 50,"line": 570,"col": 20,"name": "allocator"},{"file": 50,"line": 570,"col": 43,"name": "paths"},{"file": 50,"line": 877,"col": 23,"name": "path"},{"file": 50,"line": 724,"col": 22,"name": "path"},{"file": 50,"line": 157,"col": 25,"name": "path"},{"file": 50,"line": 758,"col": 20,"name": "path"},{"file": 50,"line": 229,"col": 24,"name": "path"},{"file": 50,"line": 972,"col": 23,"name": "allocator"},{"file": 50,"line": 972,"col": 46,"name": "from"},{"file": 50,"line": 972,"col": 64,"name": "to"},{"file": 50,"line": 130,"col": 18,"name": "path"},{"file": 50,"line": 78,"col": 19,"name": "allocator"},{"file": 50,"line": 78,"col": 42,"name": "paths"},{"file": 50,"line": 308,"col": 22,"name": "path"},{"file": 50,"line": 389,"col": 22,"name": "allocator"},{"file": 50,"line": 389,"col": 45,"name": "paths"},{"file": 50,"line": 316,"col": 29,"name": "path"},{"file": 50,"line": 23,"col": 13,"name": "byte"},{"file": 50,"line": 1045,"col": 21,"name": "allocator"},{"file": 50,"line": 1045,"col": 44,"name": "from"},{"file": 50,"line": 1045,"col": 62,"name": "to"},{"file": 50,"line": 373,"col": 15,"name": "allocator"},{"file": 50,"line": 373,"col": 38,"name": "paths"},{"file": 50,"line": 361,"col": 22,"name": "s1"},{"file": 50,"line": 361,"col": 38,"name": "s2"},{"file": 50,"line": 213,"col": 23,"name": "path"},{"file": 50,"line": 213,"col": 41,"name": "expected_result"},{"file": 50,"line": 710,"col": 20,"name": "paths"},{"file": 50,"line": 956,"col": 23,"name": "input"},{"file": 50,"line": 956,"col": 42,"name": "expected_output"},{"file": 50,"line": 840,"col": 22,"name": "input"},{"file": 50,"line": 840,"col": 41,"name": "expected_output"},{"file": 50,"line": 209,"col": 25,"name": "path"},{"file": 50,"line": 209,"col": 43,"name": "expected_result"},{"file": 50,"line": 948,"col": 16,"name": "input"},{"file": 50,"line": 948,"col": 35,"name": "expected_output"},{"file": 50,"line": 95,"col": 17,"name": "paths"},{"file": 50,"line": 95,"col": 44,"name": "expected"},{"file": 50,"line": 832,"col": 20,"name": "input"},{"file": 50,"line": 832,"col": 39,"name": "expected_output"},{"file": 50,"line": 320,"col": 26,"name": "ns1"},{"file": 50,"line": 320,"col": 43,"name": "ns2"},{"file": 50,"line": 1139,"col": 23,"name": "from"},{"file": 50,"line": 1139,"col": 41,"name": "to"},{"file": 50,"line": 1139,"col": 57,"name": "expected_output"},{"file": 50,"line": 331,"col": 26,"name": "kind"},{"file": 50,"line": 331,"col": 50,"name": "p1"},{"file": 50,"line": 331,"col": 66,"name": "p2"},{"file": 50,"line": 354,"col": 14,"name": "byte"},{"file": 50,"line": 88,"col": 19,"name": "paths"},{"file": 50,"line": 88,"col": 46,"name": "expected"},{"file": 50,"line": 706,"col": 22,"name": "paths"},{"file": 50,"line": 1134,"col": 21,"name": "from"},{"file": 50,"line": 1134,"col": 39,"name": "to"},{"file": 50,"line": 1134,"col": 55,"name": "expected_output"},{"file": 50,"line": 952,"col": 21,"name": "input"},{"file": 50,"line": 952,"col": 40,"name": "expected_output"}],"files": ["/Users/benjamin.feng/projects/zee_alloc/src/main.zig","/Users/benjamin.feng/Library/Application Support/zig/stage1/builtin/OtjmRIFQtQNAU_DXyosbdTsQKgFMazBc_EQwo-_QiGju_cupBUWC0wWjPJ0cKHhE/builtin.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/std.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/special/test_runner.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/linked_list.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/atomic/queue.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/event/fs.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/array_list.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/io/out_stream.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/target.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/hash_map.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/builtin.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/atomic/stack.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/io/in_stream.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/testing.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/mem.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/math.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/os.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/debug.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/dwarf.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/event.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/io.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/fmt.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/atomic.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/pdb.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/coff.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/hash.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/sort.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/c.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/meta.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/fs.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/heap.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/time.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/process.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/macho.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/fs/file.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/os/bits/darwin.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/mutex.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/parker.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/hash/wyhash.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/progress.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/event/loop.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/meta/trait.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/thread.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/os/bits.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/os/darwin.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/os/windows.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/debug/leb128.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/hash/auto_hash.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/c/darwin.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/fs/path.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/spinlock.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/os/windows/bits.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/math/sqrt.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/special/start.zig","/usr/local/Cellar/zig/0.5.0+anon-struct/lib/zig/std/math/log2.zig"]};